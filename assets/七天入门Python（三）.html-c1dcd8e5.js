import{_ as n,X as s,Y as a,a2 as e}from"./framework-69dceb4c.js";const t={},p=e(`<h1 id="七天入门python-三" tabindex="-1"><a class="header-anchor" href="#七天入门python-三" aria-hidden="true">#</a> 七天入门Python（三）</h1><p>大家好，我是Antvictor，一个励志要成为架构师的程序员。 欢迎收看《七天入门Python》第三篇，在上一篇我们了解了什么是函数， 那么现在我们要了解一下和函数息息相关的模块、类以及包。</p><h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h1><p>简单来讲，我们在一个<code>Python</code>文件<code>A</code>中写了一个函数，而对于其他<code>Python</code>文件<code>A</code>就是一个模块，而我们要在其他<code>Python</code>文件中调用A模块中的函数，就需要引入<code>A</code>。那么我们来实践一下： 首先第一步我们写一个模块文件<code>say.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，我们写一个文件<code>call.py</code>， 注意一定要写在一个目录下哦</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> say
say<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token string">&quot;AntVictor&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行可以看到结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hello, AntVictor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上述的模块中我们直接引入了模块文件并使用了模块名，其实模块还可以重命名，我们可以起一些别名。 使用别名：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>import say as s
s.say(&quot;AntVictor&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，还可以直接引入对应的函数，而不需要再使用别名或模块名进行调用，具体代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> say <span class="token keyword">import</span> say
say<span class="token punctuation">(</span><span class="token string">&quot;AntVictor&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>多了一个<code>from</code>, 那么它是什么意思呢？<code>from</code>代表了从哪里获取，上面整句代码的意思可以翻译为：从（<code>from</code>）<code>say</code>模块引入（<code>import</code>）函数<code>say</code>。 既然可以引入一个函数，那么就可以引入多个函数，我们可以在原来的say.py文件中新增一个函数say1:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">say1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Hi,</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以在引入时，引入两个函数,引入时通过,分割：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> say <span class="token keyword">import</span> say<span class="token punctuation">,</span> say1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>模块到这里便讲完了，模块很重要，因为只要是一个<code>py</code>文件都能算是模块，那么类文件也是，而只要牵扯到引入，都和模块引入差不多。</p><h1 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h1><p>类在面向对象语言中可以说是至关重要的了，在面向对象语言中<strong>万物皆可为类</strong>。<br> 如鸟，鸟是一种类，大多鸟类都拥有相同的属性， 如：翅膀、羽毛等，同样他们拥有一些相同的行为，如：飞、跑等，那么我们便可以对鸟写一个类。<br> 类一般使用<code>class</code>关键字表示，并且命名一般采用驼峰式（首字母大写）， 现在我们写一个示例<code>bird.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  wings<span class="token punctuation">,</span> feather<span class="token punctuation">)</span><span class="token punctuation">:</span>
          self<span class="token punctuation">.</span>wings <span class="token operator">=</span> wings
          self<span class="token punctuation">.</span>feather <span class="token operator">=</span> feather
      <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;this bird use </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>wings<span class="token punctuation">}</span></span><span class="token string"> fly and it has </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>feather<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时我们再写一个<code>main.py</code>，来引入并创建对象，最终调用类的接口。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bird <span class="token keyword">import</span> Bird

b <span class="token operator">=</span> Bird<span class="token punctuation">(</span><span class="token string">&quot;big wings&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green feather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>fly<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在来解释一下，<code>def</code>是函数必须要的关键字，而有一个特殊的<code>__init__</code>这是什么意思呢？<br> 这是初始化的意思。如果没有写，则会默认生成</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时创建对象的时候可以直接使用<code>Bird()</code>。<br> 但在上述的例子中我们使用了<code>__init__</code>，并新增了两个形参，那么在创建对象时就必须传对应的实参。<br></p><p>在每个类的函数中都有一个self关键字，这代表了对象本身，有时我们会创建多个相同类的对象，那么<code>self</code>就可以保证每个对象的函数调用的值都是这个对象自身的值。所以每个函数都需要传<code>self</code>。<br></p><p>那么对象是什么呢？创建对象又是怎么做的呢？<br></p><p>其实<code>Bird(&quot;big wings&quot;, &quot;green feather&quot;)</code>便是创建对象，而<code>b</code>便是对象的引用，通过b可以让<code>Python</code>找到对象真实存放的地址。<br></p><p>对象在代码中其实并不可见，一般对象的引用也可以理解为对象，因为我们必须通过它才能找到对象本身，也必须通过它才能调用方法。</p><h2 id="使用对象的属性" tabindex="-1"><a class="header-anchor" href="#使用对象的属性" aria-hidden="true">#</a> 使用对象的属性</h2><p>除了在类里面的方法中使用对象的属性外，还可以在外部使用，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>wings<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="修改对象属性的值" tabindex="-1"><a class="header-anchor" href="#修改对象属性的值" aria-hidden="true">#</a> 修改对象属性的值</h2><p>也可以直接修改对象属性的值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b<span class="token punctuation">.</span>feather <span class="token operator">=</span> <span class="token string">&quot;red feather&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="删除对象的属性" tabindex="-1"><a class="header-anchor" href="#删除对象的属性" aria-hidden="true">#</a> 删除对象的属性</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> b<span class="token punctuation">.</span>wings
<span class="token comment"># b.fly() 删除后不能再用</span>
b<span class="token punctuation">.</span>wings <span class="token operator">=</span> <span class="token string">&quot;small wings&quot;</span>
b<span class="token punctuation">.</span>fly<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#重新赋值后才能使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：删除掉对象的属性后，该对象中的函数如果使用了被删除的属性会报错，所以必须重新赋值后才能使用。</p><h2 id="删除对象" tabindex="-1"><a class="header-anchor" href="#删除对象" aria-hidden="true">#</a> 删除对象</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除对象后，便不能再使用该对象。</p><h1 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h1><p>有时候一个类并不能完整的表达某些事物，比如鸟类，虽然大多数的鸟都会飞，但依旧有一些鸟类是不会飞的，比如鸵鸟、企鹅等。<br></p><p>那么我们怎么让他们既能有鸟的特征又能表达属于自己的特征呢？没错，就是使用继承，那么Python中怎么使用继承呢？<br></p><p>让我们先看一个示例： 我们继续在bird.py中加入类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span>Bird<span class="token punctuation">)</span> <span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;yes, I\`m run&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承需要在类名后面加一个()，将需要继承的类放进入即可。<br></p><p>在上面的例子中，鸟类这种被继承的被称为父类，而企鹅这种继承鸟类的被称为鸟类的子类，就像父子关系一样，而他们的特性也和父子关系很像，子类拥有父类的全部属性及函数。也就是说子类可以像父类调用自己的方法一样去调用父类的方法。<br></p><p>我们在main.py写一下代码打印一下来看看是否是这样的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p <span class="token operator">=</span> Penguin<span class="token punctuation">(</span><span class="token string">&quot;small wings&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;villus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>fly<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.codejourney.top/img/20230728111257.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>通过打印结果可以看到，就算<code>Penguin</code>中没有<code>fly</code>函数，依旧打印出了和<code>Bird</code>相同的结果，这就是因为子类继承了父类的属性和函数。</p><h2 id="重写" tabindex="-1"><a class="header-anchor" href="#重写" aria-hidden="true">#</a> 重写</h2><p>我们都知道<code>Penguin</code>是不能飞的，他最多是滑翔，那么我们怎么让<code>fly</code>可以和<code>Bird</code>不一样，打印我们需要的内容呢？<br></p><p>这就用到了<strong>重写</strong>，那就是我们可以在子类写一个和父类中同名同参的函数，而函数的内容由子类自己定义：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span>Bird<span class="token punctuation">)</span> <span class="token punctuation">:</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;I\`m Penguin, I\`m can\`t fly, I just glide&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img.codejourney.top/img/20230728111316.png" alt="image.png" loading="lazy"><code>main.py</code>中的代码并没有修改，依旧调用的是fly方法，但打印结果已经改成了<code>Penguin</code>类独有的内容。</p><h2 id="私有" tabindex="-1"><a class="header-anchor" href="#私有" aria-hidden="true">#</a> 私有</h2><p>有时候类中的函数、属性是该类私有，不希望在类之外的地方被使用，那么我们就可以设置私有的属性或函数，在<code>Python</code>这种属性或函数需要一些特殊的命名方式，那就是在函数名或属性名前加两个下划线:<code>__</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Penguin</span><span class="token punctuation">(</span>Brid<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	
	<span class="token keyword">def</span> <span class="token function">__cry</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I only bark at home&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">def</span> <span class="token function">cry</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;嘎嘎，这是我在外面的叫声&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>__cry<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>main.py</code>新增：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p<span class="token punctuation">.</span>cry<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># p.__cry() 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>main</code>中可以看到，我们能调用<code>cry</code>，但不能调用<code>__cry</code>, 而<code>cry</code>内部则可以调用<code>__cry</code>，这就是私有方法</p><h1 id="包" tabindex="-1"><a class="header-anchor" href="#包" aria-hidden="true">#</a> 包</h1><p>一般写项目的时候是要将同一项目的文件放在一个包下的，也就意味着模块文件、类都是可以放在包里的，那么什么是包？又怎么做呢？<br></p><p>包是一种组织模块，可以进行模块的引用和分发。</p><ul><li>包中必须要有<code>__init__.py</code>， 内容可以为空</li><li>引用包的模块必须要在模块引用的基础上加上包名，如：<code>import package.moudle</code> <code>from package import moudle</code></li><li><code>__init__.py</code>可以包含包的初始化方法</li><li>同包下可以直接引用<br></li></ul><p>首先我们建立如下结构的包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mypackage/
├── __init__.py
├── moudle1.py
├── moudle2.py
└── subpackage
    ├── __init__.py
    └── moudle3.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建完后，在各个<code>moudle</code>文件中打印对应的名称，如：<code>print(&quot;This is moudle1&quot;)</code>. 然后在<code>moudle2.py</code>引入<code>moudle3</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> subpackage <span class="token keyword">import</span> moudle3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行可以看到会打印moudle2和3中的打印结果。<br> 这便是包结构，可以让模块更有层次，可以将相同作用或同一功能下的文件放在一个包内，进行结构分层，一个真实项目的包会更复杂，只有用包才能更好的划分模块。</p><h1 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h1><p>至此我们学完了模块、类、包，接下来计划学习什么是条件判断。<br> 如果有表达有误的地方，欢迎评论区讨论，我会及时回复并修改有误的内容，感谢观看</p>`,75),o=[p];function i(c,d){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","七天入门Python（三）.html.vue"]]);export{u as default};
