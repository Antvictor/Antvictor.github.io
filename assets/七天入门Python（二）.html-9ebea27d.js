import{_ as t,X as o,Y as c,$ as s,a0 as n,a2 as p,Z as a,C as i}from"./framework-2b931fd9.js";const r={},d=a('<h1 id="七天入门python-二" tabindex="-1"><a class="header-anchor" href="#七天入门python-二" aria-hidden="true">#</a> 七天入门Python（二）</h1><p>大家好，我是Antvictor，一个励志要成为博学程序员的程序员。 在上一篇我们安装及运行了Python，同时也认识了什么是字符串和变量。<br> 在上一篇中我们是使用的终端输入的命令，然而工欲善其事，必先利其器，我们需要找一些好用又方便的开发工具，那么我们使用什么开发工具呢？<br> 首先在学习开发过程中，使用一些文本类的开发工具便可以，即方便又快捷，之后开发工程时则可以使用idea等开发工具。基于以上条件，学习过程中推荐<code>sublime text</code>、<code>visual Studio Code</code>，工程开发推荐<code>pycharm</code>， 同样<code>vs code</code>也适用工程开发。 那么我们先学习<code>subliime text</code>怎么安装使用吧。</p><h1 id="sublime" tabindex="-1"><a class="header-anchor" href="#sublime" aria-hidden="true">#</a> sublime</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2>',4),l={href:"https://www.sublimetext.com/",target:"_blank",rel:"noopener noreferrer"},u=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
	&quot;cmd&quot; = [&quot;python3&quot;, &quot;-u&quot;, &quot;$file&quot;]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存为<code>Python3.sublime-build</code>. 然后点击<code>Tools-&gt;Build System-&gt;Python3</code>，如果没有者重启会点击。</p><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h2><p>新建一个文件，保存为<code>hello_world.py</code>，文件类型必须为<code>py</code>，在文件中输入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>Tools-&gt;Build</code>或<code>command+B</code>(win 使用ctrl+B), 运行后可以在<code>sublime text</code>的下方看到输出结果即为成功。</p><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><p>工具也安装了，想必有些小伙伴会对一直出现的<code>print</code>产生浓浓的好奇心，这是什么？为什么总是出现？<br><code>print</code>的作用在上一篇中已经提到了，他是Python提供的<strong>函数</strong>，作用是输出括号中的内容到控制台、终端等可以显示输出结果的地方。当我们需要在这些地方输出结果时就需要用到这个函数。<br> 这里我们提到了<strong>函数</strong>，那么函数是什么呢？函数就是将一些逻辑代码放在一起，可以直接通过<strong>函数名</strong>使用，不需要再重复编写相同的代码，就像<code>print</code>一样方便。那么怎么编写一个函数呢？<br> 函数的格式是固定的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span><span class="token punctuation">:</span> 
	<span class="token triple-quoted-string string">&#39;&#39;&#39;这里必须要缩进，在缩进里面的代码才是函数中的代码&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>def</code> 是必须要写的，而<code>function</code>就是函数的名称，就像<code>print</code>一样, 而括号里面的<code>argument</code>则代表参数，就像<code>print(&#39;hello world&#39;)</code>中的<code>hello world</code>一样。<br> 括号中可以选择不写参数，也可以选择写一个及以上的参数，而一个以上的参数需要使用<code>,</code>分割，并且一个函数的参数名是不能相同的。那么我们开始尝试写一下自己的函数吧。函数名的命名规范也和变量的一样，使用的是蛇形。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 调用函数</span>
say_hello<span class="token punctuation">(</span><span class="token string">&#39;Antvictor&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行得到结果:<code>hello, Antvictor</code>.<br> 这样我们的函数就写好了。<br> 在这个函数里面，有两个地方需要注意：<br> 第一个是：<code>f&quot;{}&quot;</code>是什么？这是Python提供的一种简写的语法，含义是可以让我们在字符串中使用变量，而<code>{}</code>就是写变量的地方，并且可以使用各种函数来操作变量。<br> 第二个便是：这里有一个概念，<strong>形参</strong>和<strong>实参</strong>。<code>name</code>就是<strong>形参</strong>，也就是他不表示实际的值，是一个形象值，只有在调用时传入值后才知道具体值是什么，而我们调用接口时传入的的值就叫<strong>实参</strong>。 在调用时传的<strong>实惨</strong>是要和<strong>形参</strong>一一对应的，不能多也不能少。<br> 那么有没有一种方式可以让我们写一个的<strong>形参</strong>可以输入多个<strong>实参</strong>呢？当然有,不过这种参数只能放在形参的最后一个。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>other_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>other_name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
say_hello<span class="token punctuation">(</span><span class="token string">&quot;Ant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ictor&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到结果：<code>hello, Ant (&#39;v&#39;, &#39;ictor&#39;)</code>。咦～出现了不一样的东西，Ant后面怎么多了个<code>()</code>呢？这是因为这种方式传入的内容会被Python解析为<strong>元组</strong>，至于<strong>元组</strong>是什么，这里先卖个关子，等我们讲完接下来的<strong>模块</strong>、<strong>类</strong>之后来讲<strong>元组</strong>、<strong>集合</strong>、<strong>列表</strong>和<strong>字典</strong>。</p><h1 id="结束" tabindex="-1"><a class="header-anchor" href="#结束" aria-hidden="true">#</a> 结束</h1><p>那么我们怎么让自己写的函数能像<code>print</code>函数一样在不同的文件中都能使用呢？<br> 没错就是上面说到的<strong>模块</strong>，那么下一篇《七天入门Python（三）之模块、类与包》<strong>敬请期待</strong>。<br> 如果有表达有误的地方，欢迎评论区讨论，我会及时回复并修改有误的内容，感谢观看。</p>`,16);function h(g,k){const e=i("ExternalLinkIcon");return o(),c("div",null,[d,s("p",null,[n("首先从"),s("a",l,[n("sublime text"),p(e)]),n("官网下载app安装。安装成功后打开app，如果启动Python时使用的是python命令那么无需做任何修改，如果使用的是python3，那么需要进行如下配置：菜单->Tools->Build System->New Build System, 删除里面的内容新增如下内容：")]),u])}const v=t(r,[["render",h],["__file","七天入门Python（二）.html.vue"]]);export{v as default};
