import{_ as i,X as l,Y as d,a2 as u,a3 as s,Z as t,C as r,$ as n,a0 as a}from"./framework-2b931fd9.js";const g={},v=t(`<h2 id="集成" tabindex="-1"><a class="header-anchor" href="#集成" aria-hidden="true">#</a> 集成</h2><p>首先启动Nacos，参考前置章节。 然后正常创建一个<code>SpringBoot</code>项目，在<code>pom</code>文件中引入<code>Nacos</code>。 <code>Nacos 0.2x</code>对应<code>SpringBoot2.x</code>, <code>Nacos 0.1x</code>对应<code>SpringBoot1.x</code>.</p><div class="language-pom line-numbers-mode" data-ext="pom"><pre class="language-pom"><code>&lt;dependency&gt;  
    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;  
    &lt;artifactId&gt;nacos-config-spring-boot-starter&lt;/artifactId&gt;  
    &lt;version&gt;0.2.1&lt;/version&gt;  
&lt;/dependency&gt;
&lt;!--SpringBoot--&gt; 
&lt;dependency&gt;  
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  
    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>在启动类上面增加注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>  
<span class="token annotation punctuation">@EnableNacosConfig</span>  
<span class="token annotation punctuation">@NacosPropertySource</span><span class="token punctuation">(</span>dataId <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> autoRefreshed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">StudyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个Controller类，使用<code>@NacosValue(value=\${test}, autoR=true)</code>.可以动态修改值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapper</span><span class="token punctuation">(</span><span class="token string">&quot;/config&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span><span class="token punctuation">{</span>
	<span class="token comment">// 必须添加默认值，不然报错</span>
	<span class="token annotation punctuation">@NacosValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;\${test:hello}&quot;</span><span class="token punctuation">,</span> autoRefreshed<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> test<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/get&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> test<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k=n("p",null,"首先请求本地项目地址，查看test值",-1),m=n("figure",null,[n("img",{src:"https://img.codejourney.top/img/20230404095024.png",alt:"初始请求.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"初始请求.png")],-1),b=n("p",null,[a("然后打开Nacos页面"),n("code",null,"localhost:8848/nacos"),a(" 登录后进行配置。 配置管理->配置列表->创建配置")],-1),h=n("figure",null,[n("img",{src:"https://img.codejourney.top/img/20230404095155.png",alt:"image.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image.png")],-1),_=n("p",null,"点击发布后刷新本地项目请求，查看test值",-1),f=n("figure",null,[n("img",{src:"https://img.codejourney.top/img/20230404095249.png",alt:"image.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image.png")],-1),y=n("p",null,"发生变化，说明配置生效",-1),S=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"curl"),a(),n("span",{class:"token parameter variable"},"-d"),a(),n("span",{class:"token string"},"'dataId=test'"),a(),n("span",{class:"token punctuation"},"\\"),a(`
`),n("span",{class:"token operator"},">"),a("   "),n("span",{class:"token parameter variable"},"-d"),a(),n("span",{class:"token string"},"'group=DEFAULT_GROUP'"),a(),n("span",{class:"token punctuation"},"\\"),a(`
`),n("span",{class:"token operator"},">"),a("   "),n("span",{class:"token parameter variable"},"-d"),a(),n("span",{class:"token string"},"'namespaceId=public'"),a(),n("span",{class:"token punctuation"},"\\"),a(`
`),n("span",{class:"token operator"},">"),a("   "),n("span",{class:"token parameter variable"},"-d"),a(),n("span",{class:"token string"},"'content=test=HelloWorld!'"),a(),n("span",{class:"token punctuation"},"\\"),a(`
`),n("span",{class:"token operator"},">"),a("   "),n("span",{class:"token parameter variable"},"-X"),a(" POST "),n("span",{class:"token string"},"'http://127.0.0.1:8848/nacos/v2/cs/config'"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("p",null,[n("code",null,"dataId"),a(" 是启动类上配置的值。"),n("code",null,"group"),a("是默认值，"),n("code",null,"namespaceId"),a("也是默认值,"),n("code",null,"content"),a("是传入的参数，格式为key=value。")],-1),x=n("p",null,"查看本地连接一样发生修改。",-1),I=n("figure",null,[n("img",{src:"https://img.codejourney.top/img/20230404095756.png",alt:"image.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image.png")],-1),w=t('<p>至此一个简单的配置管理中心就完成了。较为复杂的配置：如MySql配置等，测试时发现和SpringBoot配合的不是很好。</p><p>方式一：使用SpringBoot默认注入（只写配置文件）。然而如果不在配置文件中写入数据库连接，项目启动就会报错。如果写了，Nacos也无法更新对应的数据库配置信息。</p><p>方式二：手写Config类，使用注解注入获取值。可以不在配置文件中写数据库连接。然而Nacos依旧无法更新对应的数据库配置。</p><h2 id="一些其他坑" tabindex="-1"><a class="header-anchor" href="#一些其他坑" aria-hidden="true">#</a> 一些其他坑</h2><p>需要注意的是：虽然Nacos在github的SpringBoot使用中写了properties配置文件的配置方式，然而如果不在启动类上再配置一次对应的dataId，是不生效的。 以及明明在配置文件中配置了自动更新，但不在<code>@NacosValve</code>中配置自动更新，依旧是无效的。</p><p>再次测试发现<code>properties</code>中的配置都不生效，就算修改了<code>group</code>为其他的，在启动类注解中未配置也不会修改注解中的<code>group</code>。</p><p>结论：配置文件和注解互不影响，且SpringBoot中使用配置文件无效！</p><p>查看源码发现注解和配置文件走的不是同路线，猜测配置文件可能是为了配合<code>SpringCloud</code>。这个在后面<code>SpringCloud+Nacos</code>时研究。</p>',8);function B(j,q){const e=r("Tabs");return l(),d("div",null,[v,u(e,{id:"18",data:[{title:"Nacos界面"},{title:"OpenAPI"}]},{tab0:s(({title:o,value:p,isActive:c})=>[k,m,b,h,_,f,y]),tab1:s(({title:o,value:p,isActive:c})=>[S,N,x,I]),_:1}),w])}const A=i(g,[["render",B],["__file","SpringBoot集成Nacos配置中心.html.vue"]]);export{A as default};
