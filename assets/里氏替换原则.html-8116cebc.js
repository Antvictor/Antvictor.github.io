import{_ as n,X as s,Y as a,a2 as e}from"./framework-69dceb4c.js";const t={},p=e(`<p>大家好，我是Ant，今天我们来学习的是设计原则之一的<strong>里氏替换原则(Liskov Substitution principle)</strong>。</p><h2 id="什么是里氏替换原则" tabindex="-1"><a class="header-anchor" href="#什么是里氏替换原则" aria-hidden="true">#</a> 什么是里氏替换原则？</h2><p>里氏替换原则是面向对象设计的基本原则之一，它是对继承复用的一个补充。</p><p>里氏替换原则的定义是：如果对于一个对象o1，都有对象o2，使得以o2替换o1，程序的行为没有发生变化，那么o2是o1的子类型。</p><p>简单来说，就是一个父类可以被它的子类所替换，而不会影响业务逻辑和正确性。</p><p>同时根据上面的定义，我们可以扩展一下：如果子类不能完整的实现父类的业务, 那么建议断开父子关系, 采用依赖、聚集、组合等方式代替继承。</p><h2 id="为什么使用里氏替换原则" tabindex="-1"><a class="header-anchor" href="#为什么使用里氏替换原则" aria-hidden="true">#</a> 为什么使用里氏替换原则？</h2><p>里氏替换原则主要是来约束继承的复用的。</p><p>那么为什么要使用呢？假设一下：</p><p>在<code>Order</code>中有一个方法<code>orderSortByAmount</code> ，这个方法的功能是对订单根据金额进行排序, 而在<code>OrderExt</code>中将<code>orderSortByAmoount</code> 改成了根据订单的创建时间排序。那么使用的时候，既不报错，结果又不对，是不是就傻眼了。</p><p>所以，我们需要使用里氏替换原则来约束继承的复用。</p><h2 id="违反里氏替换原则的情况" tabindex="-1"><a class="header-anchor" href="#违反里氏替换原则的情况" aria-hidden="true">#</a> 违反里氏替换原则的情况</h2><p>一般来讲，我们写的继承代码基本不会违背里氏替换原则，那么什么情况下会违背呢？</p><ul><li>第一种就是上面提到的，彻底修改了父类的业务逻辑。</li><li>第二种是修改了父类的接口权限。不过这种情况IDEA编译器自动给避免了。</li><li>第三种是子类违反了父类要求的入参、出参、异常等。</li><li>第四种是子类违背了父类要求的特殊规则。 <ul><li>比如父类要求不能出现负的金额，但子类却允许出现负的金额。</li></ul></li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>在上一篇开闭原则中，我们有以下的示例，当时提到了这样修改违背了<strong>里氏替换原则</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsDiscounts</span> <span class="token keyword">extends</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span>
	<span class="token class-name">GoodsDiscounts</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.6</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getOriginPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么为什么说它违背了呢？ 是否还记得，我们有这么一个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
	* 查询购买指定数量的商品总价
	*/</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么看其实并没有违背吖？那么为什么说它违背呢？ 如果我们将<code>getTotalPrice</code>定义为获取总价格，然后有<code>getPayPrice()</code>获取实际支付价格，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">getPayPrice</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么将<code>GoodsDiscounts</code>传入<code>getTotalPrice</code>中是否还能得到正确的结果呢？ 明显我们得不到正确的结果，那么我们将<code>GoodsDiscounts</code>代码修改为如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsDiscounts</span> <span class="token keyword">extends</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span>
	<span class="token class-name">GoodsDiscounts</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    
	<span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getDiscountsPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.6</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就没有修改<code>getPrice()</code>了，也没修改父类的业务逻辑，现在总该符合了吧？</p><p>其实还不符合，我们在<code>getPayPrice()</code>中就拿不到想要的结果了，要么就得修改<code>getPayPrice</code>方法，而这又不符合开闭原则。</p><p>那么我们就没有两全其美的方法吗？ 其实在上面的示例我们可以感觉到<code>GoodsDicounts</code>似乎就不适合继承了。</p><p>这时候我们可以使用<strong>策略模式</strong>来进行<strong>重构</strong>：</p><p>首先建立一个价格策略接口，然后实现对应的策略：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 价格策略
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PriceStrategy</span><span class="token punctuation">{</span>
    <span class="token class-name">Double</span> <span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token class-name">Double</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 原价计算策略
 */</span>
<span class="token keyword">public</span> <span class="token class-name">PriceCalculatorStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">PriceStrategy</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token class-name">Double</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price <span class="token operator">*</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 折扣计算策略
 */</span>
<span class="token keyword">public</span> <span class="token class-name">DiscountsPriceCalculatorStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">PriceStrategy</span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">double</span> discounts <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    
    <span class="token class-name">DiscountsPriceCalculator</span><span class="token punctuation">(</span><span class="token keyword">double</span> discounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>discounts <span class="token operator">=</span> discounts<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token class-name">Double</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price  <span class="token operator">*</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次将<code>GoodsTest</code>修改为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;买了&quot;</span> <span class="token operator">+</span> num <span class="token operator">+</span> goods<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;总价：&quot;</span> <span class="token operator">+</span> <span class="token function">calculatePrice</span><span class="token punctuation">(</span>goods<span class="token punctuation">,</span> num<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">PriceCalculatorStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果要知道折扣实付金额</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;打折，只需要付&quot;</span> <span class="token operator">+</span> <span class="token function">calculatePrice</span><span class="token punctuation">(</span>goods<span class="token punctuation">,</span> num<span class="token punctuation">,</span> 
                <span class="token keyword">new</span> <span class="token class-name">DiscountsPriceCalculatorStrategy</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 计算价格，理论上应该是策略的调用类，这里简化为方法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">PriceStrategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">calculatePrice</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就将<code>GoodsDiscounts</code>的业务逻辑和计算逻辑分离了，并且将计算逻辑抽象出来了，这样就符合了里氏替换原则。 之后再增加什么计算规则，都可以增加对应的策略。</p><p>可能上面这样改，我们可能会产生一个疑问：这不是修改了<code>getTotalPrice()</code>和<code>getPayPrice()</code>吗？</p><p>其实有时我们不能要求一开始就设计的很完美，设计要适合，比如一开始想到了价格会出现不同的算法，那么就可以使用策略模式， 但有时可能很久都不会修改价格，那么就没必要设计，不能因为未来很低的可能性，造成过度设计。</p><p>如果一开始以为出现修改价格的可能性很低，但后来就是出现了，那么就可以先扩展，扩展不了就重构，重构不算修改。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>里氏替换原则是面向对象设计的基本原则之一，它主要是用来约束继承。</p><p>同时我们要注意，设计要适度，根据经验判断大概率会出现的，那么不用想，直接上设计模式（而且大概率也用过对应的设计模式）， 如果小概率才出现，而且可能影响进度，造成代码冗余，那就没必要设计。</p><p>接下来我们将学习<strong>单一职责原则（Single Responsibility Principle）</strong>，敬请期待。</p>`,39),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","里氏替换原则.html.vue"]]);export{d as default};
