import{_ as n,X as s,Y as a,a2 as e}from"./framework-69dceb4c.js";const p={},t=e(`<p>大家好，我是Antvictor，励志要成为一名架构师的程序员。</p><p>在上一篇我们学习了运算符、逻辑运算符及条件判断。现在我们来学习一下列表、集合、字典及元组。</p><p>无论是列表、集合还是其他，他们只是不同的存储方式，但这些概念可以说是所有开发语言都有的，而且都比较重要，因为他们是程序中最主要的数据存储方式。</p><h1 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h1><p>序列是<code>Python</code>中最基本的数据结构，序列会为每元素分配一个数字--它的位置，也叫索引。第一个的索引为0，第二个的为1，以此类推，绝大多数语言的数据结构都是从0开始数的。</p><p>而列表便是<code>Python</code>序列的一个类型</p><p>在<code>Python</code>中列表不会对数据类型有要求。</p><p>创建一个列表只需要用<code>[]</code>包裹起来，用&quot;,&quot;分割不同的数据，如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h2><p>查询列表的值，需要使用索引来查询指定位置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时在<code>python</code>中有一些特殊的索引: 负的值，使用<code>-x</code>时，返回的便是列表倒数第x位的值, 以此类推：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 返回倒数第一个：0.5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 返回倒数第二个：test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法，在不知道列表多长或需要返回后面几位的时候很好用，当然如果能知道列表的长度就更好了，那么有什么方法吗？ 有，使用<code>len(列表)</code>可以直接查看列表的长度。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="添加、删除及修改列表中的元素" tabindex="-1"><a class="header-anchor" href="#添加、删除及修改列表中的元素" aria-hidden="true">#</a> 添加、删除及修改列表中的元素</h2><h3 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h3><p>将数据添加到队尾：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># [1,2,&#39;test&#39;,0.5, &#39;hello&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将数据添加到指定的位置, 位置要使用索引：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># [1, 2, &#39;world&#39;, &#39;test&#39;, 0.5, &#39;hello&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><p>使用<code>del</code>删除指定位置的元素：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># [1, 2, &#39;world&#39;, 0.5, &#39;hello&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>pop</code>查询指定位置的元素并删除，也叫推出：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 推出最后一个位置上的值 hello</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 推出指定位置的值 world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>remove</code>根据值来进行删除, 如果有多个相同的值，需要多次删除：</p><p>为了方便测试，我们向列表<code>a</code>中再加一些相同的数据：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#[1, 2, &#39;test&#39;, 0.5, &#39;test&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们开始删除：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># [1, 2, 0.5, &#39;test&#39;]</span>
a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># [1, 2, 0.5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h1><p>元组是什么呢？</p><p>元组是一个不可以变的列表，也就是说元组在创建后就不能再新增、删除、修改了。</p><p>元组使用<code>()</code>进行创建，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元组拥有和列表相同的特性，可以通过索引进行查询，可以存储不限类型的元素，唯独不可变。所以也就没有了新增、查询、删除等。</p><h1 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h1><p>什么是字典呢？</p><p>字典是一种<code>key:value</code>的数据结构，存储的是一个<strong>键值对</strong>。</p><p>那么怎么使用呢？</p><p>字典使用\`{&quot;key&quot;:value}的形式来创建</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>maps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&quot;Ant&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询-1" tabindex="-1"><a class="header-anchor" href="#查询-1" aria-hidden="true">#</a> 查询</h2><p>查询的方式和列表的相同，也是使用<code>变量名[]</code>，不过区别在于，字典查询时传的不再是索引，而是<code>key</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Ant</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如代码中所示，查询没有的key时会报错，那么怎么避免呢？</p><p>使用<code>get(&#39;key&#39;, msg)</code>方法, 如果查询不到，则会返回msg。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="新增" tabindex="-1"><a class="header-anchor" href="#新增" aria-hidden="true">#</a> 新增</h2><p>使用<code>变量名[key] = value</code>的方式新增，需要注意的是：如果key已经在字典中了，那么使用这种方式就变成了修改，key是不能重复存在</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>maps<span class="token punctuation">[</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span> <span class="token comment"># {&#39;name&#39;: &#39;Ant&#39;, &#39;age&#39;: 25, 2: 3, &#39;new&#39;: &#39;hello&#39;}</span>

maps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span> <span class="token comment"># {&#39;name&#39;: &#39;Ant&#39;, &#39;age&#39;: 25, 2: 4, &#39;new&#39;: &#39;hello&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h2><p>修改如上所述，对已有的key进行重新赋值，便完成了修改。</p><h2 id="删除-1" tabindex="-1"><a class="header-anchor" href="#删除-1" aria-hidden="true">#</a> 删除</h2><p>删除和列表一致，使用<code>del</code>进行删除，不再赘述。</p><h1 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h1><p>集合（Set）是一种列表形式的字典，使用的是字典的key的规则，即：不能重复。</p><p>Set也使用<code>{}</code>,只是不再是键值对，而是和列表一样用<code>,</code>分割，并且Set是无序的，所以不能通过索引查询：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;sss&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {0.5, 2, 3, &#39;sss&#39;, &#39;1&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新增-1" tabindex="-1"><a class="header-anchor" href="#新增-1" aria-hidden="true">#</a> 新增</h2><p>使用<code>add()</code>或<code>update()</code>可以进行新元素的添加，需要注意的是<code>update</code>不能传入数字, 而且会将字符串拆分，<code>update</code>还可以传入列表、元组、字典。 如果新增的内容是Set中已经有的，那么不会添加。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sets<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {0.5, 2, 3, &#39;sss&#39;, &#39;1&#39;} 无新增</span>

sets<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {0.5, 2, 3, 22, &#39;sss&#39;, &#39;1&#39;}</span>

sets<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {0.5, 2, 3, 22, &#39;123&#39;, &#39;sss&#39;, &#39;1&#39;}</span>

sets<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {0.5, 2, 3, &#39;sss&#39;, 22, &#39;1&#39;, &#39;3&#39;, &#39;123&#39;, &#39;2&#39;}</span>

maps1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;sets&quot;</span><span class="token punctuation">}</span>
sets<span class="token punctuation">.</span>update<span class="token punctuation">(</span>maps1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {0.5, 2, 3, &#39;3&#39;, 22, &#39;1&#39;, &#39;sss&#39;, &#39;123&#39;, &#39;test&#39;, &#39;2&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>update</code>传入字典的话，只会记录<code>key</code>。</p><h2 id="删除-2" tabindex="-1"><a class="header-anchor" href="#删除-2" aria-hidden="true">#</a> 删除</h2><p>使用集合时，是不能像列表那样通过索引或像字典一样通过key来查询的，使用集合只能通过将集合中的元素清除的方式获取，而清除的前提是知道了<code>set</code>中有什么值，所以<code>set</code>一般用来确认值是否在<code>set</code>中的。</p><p>那么我们可以通过哪些方法呢？</p><p>可以通过<code>remove</code>、<code>pop</code>、<code>discard</code>方法进行删除，需要注意：<code>remove</code>删除没有的值时会报错，而<code>discard</code>则不会。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sets<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span>  <span class="token comment"># {0.5, 2, 3, &#39;2&#39;, &#39;3&#39;, 22, &#39;sss&#39;, &#39;1&#39;, &#39;123&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0.5</span>
sets<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># {2, 3, &#39;2&#39;, &#39;3&#39;, 22, &#39;sss&#39;, &#39;1&#39;, &#39;123&#39;}</span>
sets<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哦，用了全篇的<code>del</code>首次失去了宠爱，他无效了，真的如此吗？ 其实<code>del</code>虽然不能删除元素了，但它可以掀桌子，直接删掉集合。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> sets
<span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment"># 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h1><p>本篇我们了解了<code>Python</code>中存储数据的结构：列表、元组、字典及集合，那么存起来不用怎么能行呢，那么将列表中存的数据全部获取呢？总不能一个个索引查询吧，那也太麻烦了。</p><p>下一篇我们便讲一下，什么是循环。看循环是如何将列表中的数据取出。</p><p>如果有表达有误的地方，欢迎评论区讨论，我会及时回复并修改有误的内容，感谢观看</p>`,76),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","七天入门Python（五）.html.vue"]]);export{d as default};
