<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux下安装宋体</title>
      <link href="/;categories/linux%20%E4%B8%AD%E5%8D%88%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/linux%20%E4%B8%AD%E5%8D%88%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下安装宋体"><a href="#linux下安装宋体" class="headerlink" title="linux下安装宋体"></a><a href="https://www.cnblogs.com/yangjianbo/articles/10825178.html">linux下安装宋体</a></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.到windows环境下将所需字体拷贝到linux下。(simsun.ttc(宋体),msyf.ttf（微软雅黑）)</span><br><span class="line">2.到linux环境下创建目录</span><br><span class="line">mkdir -pv /usr/share/fonts/chinese/TrueType</span><br><span class="line">将字体放入目录下</span><br><span class="line">cd /usr/share/fonts/chinese/TrueType</span><br><span class="line">chmod 755 * 为字体赋予可执行权限</span><br><span class="line">3.建立字体缓存</span><br><span class="line"># mkfontscale （如果提示 mkfontscale: command not found，需自行安装 # yum install mkfontscale ）</span><br><span class="line"># mkfontdir</span><br><span class="line"># fc-cache -fv （如果提示 fc-cache: command not found，则需要安装# yum install fontconfig</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Box_clf/article/details/85224413">https://blog.csdn.net/Box_clf/article/details/85224413</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sendEmail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 返回LocalDateTime转为String</title>
      <link href="/;categories/%5BSpringBoot%5D%20SpringBoot%20%E8%BF%94%E5%9B%9ELocalDateTime%E8%BD%AC%E4%B8%BAString/"/>
      <url>/;categories/%5BSpringBoot%5D%20SpringBoot%20%E8%BF%94%E5%9B%9ELocalDateTime%E8%BD%AC%E4%B8%BAString/</url>
      
        <content type="html"><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>老规矩，直接解决方法</p><span id="more"></span><p>在需要的参数上加下列注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using = LocalDateTimeSerializer.class)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> result </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库查询时，得到的时间不对问题</title>
      <link href="/;categories/%5BMybatis%5D%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%97%B6%EF%BC%8C%E5%BE%97%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%5BMybatis%5D%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%97%B6%EF%BC%8C%E5%BE%97%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>数据库时间与实际时间不符问题</p><span id="more"></span><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>逐步解决：</p><ol><li>首先查看数据库时区</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%time_zone%&quot;; </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210805111806.png" alt="image-20210805111806768"></p><p>时区明显不对，居然是CST时区，如果得到的时区不对，那么大概率就是这个造成的，所以修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global time_zone=&quot;+8:00&quot;;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>等一会，再次查询，如下图所示即为修改成功</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210805111528.png" alt="image-20210805111528788"></p><ol start="2"><li>一般情况下修改数据库就会成功，（ps: 可能不会立即生效，可以先重启项目试试）如果一直不成功，那么排查服务器时区是否正确。</li></ol><ol start="3"><li>服务器时区正确，还不行，那么就在项目的配置文件的链接数据库的url中增加时区</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://47.97.154.202:3306/glosselephant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf-8&amp;serverTimeZone=GMT+8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> type </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next 主题 功能测试</title>
      <link href="/;categories/%E6%B5%8B%E8%AF%95next%20%E6%A0%87%E7%AD%BE/"/>
      <url>/;categories/%E6%B5%8B%E8%AF%95next%20%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://theme-next.js.org/docs/tag-plugins/tabs.html">next 主题文档</a> </p><div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">1</a></li><li class="tab"><a href="#unique-name-2">2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p>Any content (support inline tags too).</p></div><div class="tab-pane" id="unique-name-2"><p>哈哈哈</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql创建用户并授权</title>
      <link href="/;categories/%5BMysql%5DMysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/"/>
      <url>/;categories/%5BMysql%5DMysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql创建用户并授权"><a href="#Mysql创建用户并授权" class="headerlink" title="Mysql创建用户并授权"></a>Mysql创建用户并授权</h1><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"># % 所有地址都可用</span><br><span class="line">create user &#x27;userName&#x27;@&#x27;%&#x27; identified by ‘password&#x27;;</span><br></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># all : 所有权限  # test.* 所有表</span><br><span class="line">grant all on database.table to &#x27;username&#x27; identified by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费ssl证书</title>
      <link href="/;categories/%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6/"/>
      <url>/;categories/%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.laozuo.org/tag/lets-encrypt">Let’s Encrypt</a>作为一个公共且免费SSL的项目逐渐被广大用户传播和使用，是由Mozilla、Cisco、Akamai、IdenTrust、EFF等组织人员发起，主要的目的也是为了推进网站从HTTP向HTTPS过度的进程，目前已经有越来越多的商家加入和赞助支持。</p><p><a href="http://www.laozuo.org/tag/lets-encrypt%E5%85%8D%E8%B4%B9ssl">Let’s Encrypt免费SSL</a>证书的出现，也会对传统提供付费SSL证书服务的商家有不小的打击。到目前为止，<a href="http://www.laozuo.org/tag/lets-encrypt">Let’s Encrypt</a>获得IdenTrust交叉签名，这就是说可以应用且支持包括FireFox、Chrome在内的主流浏览器的兼容和支持，虽然目前是公测阶段，但是也有不少的用户在自有网站项目中正式使用起来。</p><p>虽然目前Let’s Encrypt免费SSL证书默认是90天有效期，但是我们也可以到期自动续约，不影响我们的尝试和使用。</p><span id="more"></span><p><strong>第一、安装Let’s Encrypt前的准备工作</strong></p><p>根据官方的要求，我们在VPS、服务器上部署Let’s Encrypt免费SSL证书之前，需要系统支持Python2.7以上版本以及支持GIT工具。这个需要根据我们不同的系统版本进行安装和升级，因为有些服务商提供的版本兼容是完善的，尤其是debian环境兼容性比CentOS好一些。</p><p><strong>第二、快速获取Let’s Encrypt免费SSL证书</strong></p><p>PS：在获取某个站点证书文件的时候，我们需要在安装PYTHON2.7以及GIT，更需要将域名解析到当前主机IP中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:``//github``.com``/letsencrypt/letsencrypt``cd` `letsencrypt``.``/letsencrypt-auto` `certonly --standalone --email admin@laozuo.org -d laozuo.org -d www.laozuo.org</span><br></pre></td></tr></table></figure><p>然后执行上面的脚本，我们需要根据自己的实际站点情况将域名更换成自己需要的。</p><p>**第三、Let’s Encrypt免费SSL证书获取与应用<br>**</p><p>在完成Let’s Encrypt证书的生成之后，我们会在”/etc/letsencrypt/live/laozuo.org/“域名目录下有4个文件就是生成的密钥证书文件。</p><p>cert.pem - Apache服务器端证书<br>chain.pem - Apache根证书和中继证书<br>fullchain.pem - Nginx所需要ssl_certificate文件<br>privkey.pem - 安全证书KEY文件</p><p>如果我们使用的Nginx环境，那就需要用到fullchain.pem和privkey.pem两个证书文件，在部署Nginx的时候需要用到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate ``/etc/letsencrypt/live/laozuo``.org``/fullchain``.pem;``ssl_certificate_key ``/etc/letsencrypt/live/laozuo``.org``/privkey``.pem;</span><br></pre></td></tr></table></figure><p>比如我们在Nginx环境中，只要将对应的ssl_certificate和ssl_certificate_key路径设置成我们生成的2个文件就可以，最好不要移动和复制文件，因为续期的时候直接续期生成的目录文件就可以，不需要再手工复制。</p><p><strong>第四、解决Let’s Encrypt免费SSL证书有效期问题</strong></p><p>我们从生成的文件中可以看到，Let’s Encrypt证书是有效期90天的，需要我们自己手工更新续期才可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.``/letsencrypt-auto` `certonly --renew-by-default --email admin@laozuo.org -d laozuo.org -d www.laozuo.org</span><br></pre></td></tr></table></figure><p>这样我们在90天内再去执行一次就可以解决续期问题，这样又可以继续使用90天。如果我们怕忘记的话也可以制作成定时执行任务，比如每个月执行一次。</p><p><strong>第五、关于Let’s Encrypt免费SSL证书总结</strong></p><p>通过以上几个步骤的学习和应用，我们肯定学会了利用Let’s Encrypt免费生成和获取SSL证书文件，随着Let’s Encrypt的应用普及，SSL以后直接免费不需要购买，因为大部分主流浏览器都支持且有更多的主流商家的支持和赞助，HTTPS以后看来也是趋势。在Let’s Encrypt执行过程在中我们需要解决几个问题。</p><p>A - 域名DNS和解析问题。在配置Let’s Encrypt免费SSL证书的时候域名一定要解析到当前VPS服务器，而且DNS必须用到海外域名DNS，如果用国内免费DNS可能会导致获取不到错误。</p><p>B - 安装Let’s Encrypt部署之前需要服务器支持PYTHON2.7以及GIT环境，要不无法部署。</p><p>C - Let’s Encrypt默认是90天免费，需要手工或者自动续期才可以继续使用。</p><p>Let’s Encrypt 发布的 ACME v2 现已正式支持通配符证书，接下来将为大家介绍怎样申请</p><h1 id="一、acme-sh的方式"><a href="#一、acme-sh的方式" class="headerlink" title="一、acme.sh的方式"></a>一、<code>acme.sh</code>的方式</h1><h3 id="1-获取acme-sh"><a href="#1-获取acme-sh" class="headerlink" title="1.获取acme.sh"></a>1.获取<code>acme.sh</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>如下所示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs15205059_CCQX.png" alt="img"></p><p>注：我在centos 7上遇到问题，安装完后执行<code>acme.sh</code>，提示命令没找到，如果遇到跟我一样的问题，请关掉终端然后再登陆，或者执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="2-开始获取证书"><a href="#2-开始获取证书" class="headerlink" title="2.开始获取证书"></a>2.开始获取证书</h3><p><code>acme.sh</code>强大之处在于，可以自动配置DNS，不用去域名后台操作解析记录了，我的域名是在阿里注册的，下面给出阿里云解析的例子，其他地方注册的请参考这里自行修改：<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert">传送门</a></p><p>请先前往阿里云后台获取<code>App_Key</code>跟<code>App_Secret</code> <a href="https://ak-console.aliyun.com/#/accesskey">传送门</a>，然后执行以下脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 替换成从阿里云后台获取的密钥</span><br><span class="line">export Ali_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;</span><br><span class="line">export Ali_Secret=&quot;jlsdflanljkljlfdsaklkjflsa&quot;</span><br><span class="line"># 换成自己的域名</span><br><span class="line">acme.sh --issue --dns dns_ali -d zhuziyu.cn -d *.zhuziyu.cn</span><br></pre></td></tr></table></figure><p>这里是通过线程休眠120秒等待DNS生效的方式，所以至少需要等待两分钟</p><p>到了这一步大功告成，撒花</p><p>生成的证书放在该目录下: <code>~/acme.sh/domain/</code></p><p>下面是一个Nginx应用该证书的例子:</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># domain自行替换成自己的域名</span><br><span class="line">server &#123;</span><br><span class="line">    server_name xx.domain.com;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    ssl_certificate /path/.acme.sh/domain/fullchain.cer;</span><br><span class="line">    ssl_certificate_key /path/.acme.sh/domain/domain.key;</span><br><span class="line">    ssl_trusted_certificate  /path/.acme.sh/domain/ca.cer;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_pass http://127.0.0.1:10086;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p><code>acme.sh</code>比<code>certbot</code>的方式更加自动化，省去了手动去域名后台改DNS记录的步骤，而且不用依赖Python，墙裂推荐</p><p>第一次成功之后，<code>acme.sh</code>会记录下App_Key跟App_Secret，并且生成一个定时任务，每天凌晨0：00自动检测过期域名并且自动续期。对这种方式有顾虑的，请慎重，不过也可以自行删掉用户级的定时任务，并且清理掉~/.acme.sh文件夹就行</p><h1 id="二、-docker-镜像获取"><a href="#二、-docker-镜像获取" class="headerlink" title="二、 docker 镜像获取"></a>二、 docker 镜像获取</h1><p>如果装有docker环境的话，也可以用docker镜像来获取证书，只需一行命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm  -it  \</span><br><span class="line">  -v &quot;$(pwd)/out&quot;:/acme.sh  \</span><br><span class="line">  -e Ali_Key=&quot;xxxxxx&quot; \</span><br><span class="line">  -e Ali_Secret=&quot;xxxx&quot; \</span><br><span class="line">  neilpang/acme.sh  --issue --dns dns_ali -d domain.cn -d *.domain.cn</span><br></pre></td></tr></table></figure><p>成功之后，证书会保存在当前目录下的out文件夹，也可以指定路径，修改上面第一行 <code>&quot;$(pwd)/out&quot;</code>，改为你想要保存的路径即可。</p><p>详细用法，可以参考：<a href="https://github.com/Neilpang/acme.sh/wiki/Run-acme.sh-in-docker">传送门</a></p><p>获取下来的证书跟方式一 获取的一模一样，其他信息请参考方式一。</p><h1 id="三、-certbot方式获取证书-不推荐"><a href="#三、-certbot方式获取证书-不推荐" class="headerlink" title="三、 certbot方式获取证书[不推荐]"></a>三、 <code>certbot</code>方式获取证书<code>[不推荐]</code></h1><h3 id="1-获取certbot-auto"><a href="#1-获取certbot-auto" class="headerlink" title="1.获取certbot-auto"></a>1.获取<code>certbot-auto</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line"></span><br><span class="line"># 设为可执行权限</span><br><span class="line">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure><h3 id="2-开始申请证书"><a href="#2-开始申请证书" class="headerlink" title="2.开始申请证书"></a>2.开始申请证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注xxx.com请根据自己的域名自行更改</span><br><span class="line">./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d &quot;*.xxx.com&quot; --manual --preferred-challenges dns-01 certonly</span><br></pre></td></tr></table></figure><p>执行完这一步之后，会下载一些需要的依赖，稍等片刻之后，会提示输入邮箱，随便输入都行【该邮箱用于安全提醒以及续期提醒】</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs14144603_4ezr.png" alt="img"></p><p>注意，申请通配符证书是要经过DNS认证的，按照提示，前往域名后台添加对应的DNS TXT记录。添加之后，不要心急着按回车，先执行<code>dig xxxx.xxx.com txt</code>确认解析记录是否生效，生效之后再回去按回车确认</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs14144824_vKdF.png" alt="img"></p><p>到了这一步后，大功告成！！！ 证书存放在/etc/letsencrypt/live/xxx.com/里面</p><p>要续期的话，执行<code>certbot-auto renew</code>就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs14144952_1Soy.png" alt="img"></p><p>注：经评论区 ddatsh 的指点，这样的证书无法应用到主域名<code>xxx.com</code>上，如需把主域名也增加到证书的覆盖范围，请在开始申请证书步骤的那个指令把主域名也加上，如下： 需要注意的是，这样的话需要修改两次解析记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d &quot;*.xxx.com&quot; -d &quot;xxx.com&quot; --manual --preferred-challenges dns-01 certonly</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs15095409_uiHL.png" alt="img"></p><p>下面是一个nginx应用该证书的一个例子</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name xxx.com;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/cert/xxx.cn/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/cert/xxx.cn/privkey.pem;</span><br><span class="line">    ssl_trusted_certificate  /etc/cert/xxx.cn/chain.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:6666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> ssl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费曼理论</title>
      <link href="/;categories/%E8%B4%B9%E6%9B%BC/%5B%E8%B4%B9%E6%9B%BC%5D%20%E8%B4%B9%E6%9B%BC%E7%90%86%E8%AE%BA/"/>
      <url>/;categories/%E8%B4%B9%E6%9B%BC/%5B%E8%B4%B9%E6%9B%BC%5D%20%E8%B4%B9%E6%9B%BC%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、确立目标"><a href="#一、确立目标" class="headerlink" title="一、确立目标"></a>一、确立目标</h1><p>怎么学、分几个阶段、如何有序进行、怎样按时达到目的？</p><ol><li>论证学习这门知识/做这件事 的必要性</li><li>确认规划与目标的实质联系</li></ol><span id="more"></span><p>确立目标要有以下原则：</p><p>s: (specific）明确的目标</p><p>m: (measurable)可以量化</p><p>a : (achievable)自身能力能否达到</p><p>r : (rewarding)能产生满足感</p><p>t: (time-bound)有时间限制</p>]]></content>
      
      
      <categories>
          
          <category> 费曼 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>screen</title>
      <link href="/;categories/screen/"/>
      <url>/;categories/screen/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y screen</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动一个screen窗口</span></span><br><span class="line">screen -S seesion_test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个screen窗口，但不进入</span></span><br><span class="line">screen -dmS session_test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的 screen 会输出一个id</span></span><br><span class="line">screen -ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入screen</span></span><br><span class="line">screen -x seesionId</span><br><span class="line"><span class="meta">#</span><span class="bash">接入(attach)一个名为<span class="built_in">test</span>会话</span></span><br><span class="line">screen -r test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">远程脱离(detach) <span class="built_in">test</span> 会话</span></span><br><span class="line">screen -d test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">脱离(detach)当前会话，将目前的 screen session (可能含有多个 windows) 丢到后台执行</span></span><br><span class="line">CTRL+a然后d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 screen 版本号</span></span><br><span class="line">screen -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：</span></span><br><span class="line">screen -wipe</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付-合单支付</title>
      <link href="/;categories/%5B%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%5D%20%E5%90%88%E5%8D%95%E6%94%AF%E4%BB%98/"/>
      <url>/;categories/%5B%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%5D%20%E5%90%88%E5%8D%95%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3_partner/open/pay/chapter2_9_2.shtml">合单支付</a></p><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter4_1_1.shtml">商户支付</a></p><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3_partner/open/pay/chapter7_1_1.shtml">服务商支付</a></p><span id="more"></span><p>再次调研服务商和商户支付分账</p><h3 id="服务商"><a href="#服务商" class="headerlink" title="服务商"></a>服务商</h3>]]></content>
      
      
      <categories>
          
          <category> 微信支付 </category>
          
          <category> 合单支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 入门</title>
      <link href="/;categories/%5B%E5%88%86%E5%B8%83%E5%BC%8F%5D%20Zookeeper%E5%85%A5%E9%97%A8/"/>
      <url>/;categories/%5B%E5%88%86%E5%B8%83%E5%BC%8F%5D%20Zookeeper%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper入门"><a href="#Zookeeper入门" class="headerlink" title="Zookeeper入门"></a>Zookeeper入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        Zookeeper 是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。</p><span id="more"></span><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p>​        Zookeeper 从设计模式角度来看：是一个基于观察这模式设计的分布式服务管理框架，它<strong>负责存储和管理大家都关心的数据</strong>，然后<strong>接受观察者的注册</strong>， 一旦这些数据的状态发生变化，Zookeeper就将<strong>负责通知已经在Zookeepr上注册的那些观察者</strong> 做出相应的反应。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>一个领导者（Leader), 多个跟随者（Follower）组成的集群</li><li>集群中只要有半数以上节点存活，Zookeeper集群就能正常服务。</li><li>全局数据一致：每个Server备份一份相同的数据副本，Client无论链接到哪个Server，数据都是一致的。</li><li>更新请求顺序进行，来自同一个Client的更新请求按其发送顺序依次执行</li><li>数据更新原子性，一次数据更新要么成功，要么失败。</li><li>实时性，在一定时间范围内，Client能读到最新数据。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>树形结构。</p><p>​    数据模型结构与Unix文件系统很类似i，整体上可以看作是一颗树，每个节点称作一个ZNode，每个ZNode默认能存储1MB的数据，每个ZNode都可以通过其路径唯一标识。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">a[ZNode] --&gt; b[ZNode1]</span><br><span class="line">a --&gt; c[ZNode2]</span><br><span class="line">b--&gt;d[ZNode1/file]</span><br><span class="line">b--&gt;e[ZNode1/file1]</span><br><span class="line">c--&gt;f[ZNode2/file]</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>​        提供的服务包括：</p><ul><li><p>统一命名服务</p><ul><li><p>在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。如下图，客户端访问域名，域名可以直接转发多个ip地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph Zokkeper Serviece</span><br><span class="line">/ --&gt; /service --&gt; id1[www.baidu.com]</span><br><span class="line">--&gt; 192.168.22.13</span><br><span class="line">id1--&gt; 192.168.22.14</span><br><span class="line">id1--&gt;192.168.22.15</span><br><span class="line">end</span><br><span class="line">client1 -- 访问--&gt; id1</span><br><span class="line">client2 -- 访问--&gt; id1</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul></li><li><p>统一配置管理</p><ul><li>分布式环境下，配置文件同步非常常见。<ul><li>一般要求一个集群中，所有节点的配置信息是一致的。比如Kafka集群</li><li>对配置文件修改后，希望能够快速同步到各个节点上。</li></ul></li><li>配置管理可交由Zookeeper实现<ul><li>可将配置信息写入ZooKeeper上的一个ZNode</li><li>各个客户断服务器监听这个ZNode</li><li>一旦ZNode中的数据被修改，ZooKeeper将通知各个客户端服务器。</li></ul></li></ul></li><li><p>统一集群管理</p><ul><li>分布式环境下，实时掌握每个节点的状态是必要的<ul><li>可根据节点试试状态作出一些调整</li></ul></li><li>ZooKeeper可以实现实时监控节点状态变化<ul><li>可将节点信息写入ZooKeeper是那个的一个ZNode</li><li>禁停这个ZNode可获取它的实时状态变化。</li></ul></li></ul></li><li><p>服务器节点动态上下线</p><ul><li>客户端能实时洞察到服务器上下线的变化</li></ul></li><li><p>软负载均衡</p><ul><li>在ZooKeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求。</li></ul></li><li><p>…</p></li></ul><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://zookeeper.apache.org/">Zookeeper官网</a></p><p><a href="https://zookeeper.apache.org/releases.html#download">下载地址</a></p><p><a href="https://downloads.apache.org/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz">3.7</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载后解压，简单明了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入opt</span> </span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">mkdir -p model/zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">cd model/zookeeper/</span><br><span class="line">curl https://downloads.apache.org/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz -&gt; zookeeper3.7.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tart -zxvf zookeeper3.7.tar.gz</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>zookeeper 文件目录如下：</p><p>![image-20210413221230858](/Users/exccedy/Library/Application Support/typora-user-images/image-20210413221230858.png)</p><p><strong>第一步</strong>：将 conf/zoo_sample.cfg 修改为 zoo.cfg</p><p><code> mv conf/zoo_sample.cfg conf/zoo.cfg</code></p><p><strong>第二步</strong> 新建数据存储文件</p><p><code> mkdir zkData</code></p><p><strong>第三步</strong> 修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi conf/zoo.cfg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将其中的dataDir=tem/zookeeper 修改</span></span><br><span class="line">dataDir=/opt/zookeeper/apache-zooleeper-3.7.0-bin/zkData</span><br><span class="line"></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p><strong>第四步</strong> 启动 （单机模式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>![image-20210413222950138](/Users/exccedy/Library/Application Support/typora-user-images/image-20210413222950138.png)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p>![image-20210413223123852](/Users/exccedy/Library/Application Support/typora-user-images/image-20210413223123852.png)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动客户端</span></span><br><span class="line">bin/zkCli.sh</span><br></pre></td></tr></table></figure><p>![image-20210413223231040](/Users/exccedy/Library/Application Support/typora-user-images/image-20210413223231040.png)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 退出客户端</span></span><br><span class="line">quit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件</span></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure><p><strong>第五步</strong>关闭服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 分布式 </category>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/;categories/%5Bproxy%5Dnginx/"/>
      <url>/;categories/%5Bproxy%5Dnginx/</url>
      
        <content type="html"><![CDATA[<p><a href="nginx">@TOC</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs 安装</title>
      <link href="/;categories/%5Bnodejs%5Dnodejs%20%E5%AE%89%E8%A3%85/"/>
      <url>/;categories/%5Bnodejs%5Dnodejs%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="http://nodejs.cn/">官网</a>：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p><a href="https://cdn.npm.taobao.org/dist/node/v14.16.1/node-v14.16.1.tar.gz">下载地址</a>：<a href="https://cdn.npm.taobao.org/dist/node/v14.16.1/node-v14.16.1.tar.gz">https://cdn.npm.taobao.org/dist/node/v14.16.1/node-v14.16.1.tar.gz</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><em>Linux的下载百变不离其中，首先还是下载解压包</em></p><p>​        ps: 之所以经常用下载源码的方式安装，是因为使用yum安装的指定版本比较麻烦，当然不需要指定版本使用yum是比较方便，但是，yum嘛，懂的都懂，经常性没有你想要的，所以首推还是下载源码压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir nodejs</span><br><span class="line">cd nodejs</span><br><span class="line">curl &lt;下载地址&gt; &gt; nodejs-v14.16.1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nodejs-v14.16.1</span><br><span class="line">make </span><br></pre></td></tr></table></figure><p><strong>如果报错，大概率是没有gcc造成的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装gcc gcc-c++</span></span><br><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure><p>安装完成后，再次运行make</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/;categories/%5BZookeeper%5D%20%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/;categories/%5BZookeeper%5D%20%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven 项目 引入后jdk版本问题</title>
      <link href="/;categories/%5BSpringBoot%5D%20SpringBoot%20%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%98jdk1.5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/;categories/%5BSpringBoot%5D%20SpringBoot%20%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%98jdk1.5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>​        引入的项目无视配置，自动变成jdk1.5. </p><p>无论是修改model的Language Level 还是修改设置中的Java Compiler都无效，会生效一小会，然后又自动变成了jdk1.5.</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>直接在父pom文件中加入下述插件，指定版本即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="问题中提到的解决方法"><a href="#问题中提到的解决方法" class="headerlink" title="问题中提到的解决方法"></a>问题中提到的解决方法</h2><p>​        问题中提到的方法遇到一般状况是有效的，那么也说一下解决步骤吧。</p><ol><li><p>修改 Language Level</p><p>File -&gt;Project Structure -&gt; Modules -&gt; Language Level 选择8-***.</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsfiArV5eXUwMI78d.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210406170813935.png" alt="image-20210406170813935"></p></li><li><p>修改设置中的Java Compiler</p><p>IntellJ IDEA-&gt; Preferences -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler -&gt;Module 修改Target byte code version 为8</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sails 系列</title>
      <link href="/;categories/%5BSails%5D%20sails%20%E7%B3%BB%E5%88%97%20/"/>
      <url>/;categories/%5BSails%5D%20sails%20%E7%B3%BB%E5%88%97%20/</url>
      
        <content type="html"><![CDATA[<p>@<a href="Sails">TOC</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Sails.js 是一个Web框架，可轻松构建自定义的企业级Node.js应用程序。它的设计类似于Ruby On Rails一类的框架中的MVC架构，但支持Web应用程序和API开发的更现代，面向数据的样式。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h2><p>​    需要先安装node.js，直接进入<a href="https://nodejs.org/en/download/">node官网</a>进行下载安装，这里赘述。</p><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>​    使用命令行下载sails</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> sails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sails </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo 进阶</title>
      <link href="/;categories/%5BNosql%5DMongo%20%E8%BF%9B%E9%98%B6/"/>
      <url>/;categories/%5BNosql%5DMongo%20%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo 安装</title>
      <link href="/;categories/%5BNoSql%5DMongo%20%E5%AE%89%E8%A3%85/"/>
      <url>/;categories/%5BNoSql%5DMongo%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>​        首先进入<a href="https://www.mongodb.com/">mongoDB官网</a>，点击 Tre Free -&gt; On-premises -&gt; MongoDB Community Server。 选择对应的操作系统及版本，进行下载。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210331105703016.png" alt="image-20210331105703016"></p><p>mac 及 linux推荐使用链接下载，因此进行上图5. 的操作copy link。</p><p><a href="https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.4.tgz">mongo 下载mac 4.4.4</a></p><ul><li><p>本文以mac 为例</p><p>打开终端，进行如下命令下载：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过链接下载,sudo是必须的，需要获取root权限</span></span><br><span class="line">sudo curl -0 https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.4.tgz --output mongodb.tgz</span><br></pre></td></tr></table></figure><p>​        下载完成后看到mongodb.tgz 文件，移动到 /usr/local/ 目录下解压并重命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移动</span></span><br><span class="line">mv mongodb.tgz /usr/local/</span><br><span class="line">cd /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf mongodb.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv mongodb-macos-x86_64-4.4.4  mongodb64</span><br></pre></td></tr></table></figure><p>下载完毕（下载并解压完后，其实就相当于安装了）</p><hr><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>​        接下来是对环境变量的配置以及mongodb的启动。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>​        打开全局环境配置文件，然后将mongodb地址配置到环境变量中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开配置文件，没有则创建</span></span><br><span class="line">cd</span><br><span class="line">vim ./.bash_profile</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimgsimage-20210331115651202.png" alt="image-20210331115651202"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进行配置在文件中输入如下信息</span></span><br><span class="line">MONGODB_HOME=/usr/loacl/mongodb64</span><br><span class="line">export PATH=$MONGODB_HOME/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出并保存</span></span><br><span class="line">: wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使环境变量生效</span></span><br><span class="line">source ./.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证, 输入mongo 并回车，如果不是报找不到的错误，那么环境变量便生效了。</span></span><br><span class="line">mongo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里必然报错，因为服务还没启动，只是验证环境是否搭建成功</span></span><br></pre></td></tr></table></figure><p>​    下面便是启动准备工作，首先创建 数据存放文件夹及日志文件夹，然后启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建数据存储文件</span></span><br><span class="line">sudo mkdir -p /usr/local/var/mongodb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建日志文件</span></span><br><span class="line">sudo mkdir -p /usr/local/var/log/mongodb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权，确保当前用户有文件权限</span></span><br><span class="line">sudo chown &#x27;userName&#x27; /usr/local/var/mongodb</span><br><span class="line">sudo chown &#x27;userName&#x27; /usr/local/var/log/mongodb</span><br></pre></td></tr></table></figure><p> mongodb启动，直接使用mongod命令进行启动，启动时需要注意一下参数：</p><ul><li>–dbpath: 指定数据存储文件位置</li><li>–logpath: 指定日志输出文件位置</li><li>–fork 后台启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动mongo服务</span></span><br><span class="line">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongodb.log --fork</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入服务</span></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimgsmongo%E5%AE%89%E8%A3%85-3.png" alt="image-20210331151707009"></p><hr><p>至此，mongodb 下载安装及启动完成。</p>]]></content>
      
      
      <categories>
          
          <category> Mongo </category>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 安装</title>
      <link href="/;categories/%5BNoSql%5D%20Redis%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%5BNoSql%5D%20Redis%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先肯定是要安装了</p><p><a href="https://redis.io/">官网</a>：<a href="https://redis.io/">https://redis.io/</a></p><p><a href="https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783">6.0.12下载地址</a>：<a href="https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783">https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行如下命令</span></span><br><span class="line">cd /usr/local/</span><br><span class="line">mkdir redis</span><br><span class="line">cd redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下述命令2选一</span></span><br><span class="line">curl https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783 &gt; redis-6.0.12.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> wget 需要安装 curl 一般自带</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783</span><br></pre></td></tr></table></figure><h2 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd redis-6.0.12</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改conf</span></span><br><span class="line">vim redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 daemoinze 改为yes 这个参数的作用是 redisserver是否以后台形式启动</span></span><br><span class="line">daemoinze yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出并保存</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">src/redis-server redis.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据实体类创建数据库</title>
      <link href="/;categories/%5BMybatis%5D%20%E6%A0%B9%E6%8D%AE%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/;categories/%5BMybatis%5D%20%E6%A0%B9%E6%8D%AE%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93">TOC</a></p><p>​        首先说一下，研究这个的契机是什么，今天刚从github上clone下来一个项目，想跑一下，结果发现没有sql，而这个开源项目又已经很久没更新了，也不太好找维护者，所以，没有办法，只能想办法自己创建数据库，而当我看到成堆的实体类时，，emmm，算了，找个简单的办法吧。</p><p>​        因此，就找到了这个jar包 <code> mybatis-enhance-actable</code></p><p>​        那么就开始实战吧。</p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-enhance-actable<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><p>​    首先是配置sql信息的配置类<code>MySqlConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yeafel.evaluation.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.PropertiesFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">/** 包位置是固定不变的*/</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.gitee.sunchenbin.mybatis.actable.manager.*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTableConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// mysql所有的配置来自第二章，配置文件</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"><span class="comment">//数据库连接</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"><span class="comment">//数据库账号</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">//数据库密码</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 配置数据源</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setMaxActive(<span class="number">30</span>);</span><br><span class="line">        dataSource.setInitialSize(<span class="number">10</span>);</span><br><span class="line">        dataSource.setValidationQuery(<span class="string">&quot;SELECT 1&quot;</span>);</span><br><span class="line">        dataSource.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 数据源</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());</span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml&quot;</span>));</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.yeafel.evaluation.dataobject.entity.*&quot;</span>);</span><br><span class="line">        <span class="comment">//上述classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml固定的包路径</span></span><br><span class="line">        <span class="comment">//com.xxx.xxx.entity.*替换成你的实体类地址</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(MyTableConfig.class)</span><span class="comment">//上面第一点配置文件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">            mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.yeafel.evaluation.dataobjet.mapper.*;com.gitee.sunchenbin.mybatis.actable.dao.*&quot;</span>);</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactory&quot;</span>);</span><br><span class="line">        <span class="comment">//com.xxx.xxx.mapper.*替换成你的mapper地址</span></span><br><span class="line">        <span class="comment">//com.gitee.sunchenbin.mybatis.actable.dao.*固定的包</span></span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置类中，主要注意的就是两个类中的entity和mapper地址，尤其是mapper地址，只传*mapper.java的位置就可以。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置类中用到的配置，直接放在默认的<code>application.yml</code>中即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3307/eval_teac?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="comment"># mybatis 生成数据库配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">table:</span></span><br><span class="line"><span class="attr">auto:</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">pack:</span> <span class="string">com.**.**.entity</span> <span class="string">//</span> <span class="string">你的实体类路径</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>mysql的配置是普通的mysql标准配置，不做解释，那么详细说一下mybatis的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```yml</span><br><span class="line">update: 每次加载hibernate时根据实体类生成数据库，并且参数属性更新时，表中的属性会同步更新，但是不会覆盖表（不会删除原数据）</span><br><span class="line">create: 每次加载hibernate时根据实体类生成数据库，并且会删除原表重建新表</span><br><span class="line">none: 不做任何操作</span><br><span class="line">add: 只对新增做处理，不会更新原有数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```mybatis.database.type=mysql``` 表明要创建的是什么类型的数据库，还有很多可以选择，这里简单说一下，毕竟是以mysql为主的文章。 </span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">oracle</span><br><span class="line">sqlserver</span><br><span class="line">postgresql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>实体类主要是注解的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(name = &quot;test&quot;)</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta">@Column(name=&quot;action_id&quot;,type=MySqlTypeConstant.BIGINT, length = 11, isKey = true, isAutoIncrement = true,isNull = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long actionRoleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 角色id */</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 功能id */</span></span><br><span class="line">    <span class="keyword">private</span> Long actionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是第一种使用方式，是比较直观的。那么说一下配置的含义。</p><ul><li><p>@Table 表明这是需要扫描的类，并生成name中的表，如name=”test”，那么就会生成test的数据库表。</p></li><li><p>@Column 显而易见这是列，其中的参数有很多，就不一一列举，只说一下文中用到。</p><ul><li>name 列名</li><li>type 参数类型</li><li>length 参数长度，默认255</li><li>isKey 是否是主键，默认false</li><li>isAutoIncrement 是否自增，默认false</li><li>isNull 是否为空，默认true</li></ul></li></ul><p>还有第二种方式，注解拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.ColumnType;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.command.BaseModel;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种定义方式，使用<span class="doctag">@Table</span>和<span class="doctag">@Column</span>定义字段，具体内容用具体注解定义</span></span><br><span class="line"><span class="comment"> * 例如<span class="doctag">@Id</span>，<span class="doctag">@IsNotNull</span>，<span class="doctag">@isAutoIncrement</span>等等</span></span><br><span class="line"><span class="comment"> * 如果没有设置name，会直接把变量名按照驼峰规则转换，如果没有设置类型也会自动转换Java的类型到SQL类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@IsAutoIncrement</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Integer    id;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="meta">@ColumnType(value = MySqlTypeConstant.VARCHAR, length=11)</span></span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Column 表明是列</li><li>@ColumnType 表明参数类型，不使用后自动加载，<ul><li>value 类型</li><li>length 长度，默认255</li></ul></li></ul><p>第三种方式，是最简单的方式，全部交给自动加载，自动加载会更佳驼峰规则转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsKey;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三种定义方式，懒人定义，按照驼峰规则转换</span></span><br><span class="line"><span class="comment"> * 不需要对每个字段设置<span class="doctag">@Column</span></span></span><br><span class="line"><span class="comment"> * 这里没有继承BaseModel，因为BaseModel离有OrderBy等参数，也会对其进行构建字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐森威</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(isSimple = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLogin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@IsKey</span></span><br><span class="line">   <span class="meta">@IsAutoIncrement</span></span><br><span class="line">   <span class="keyword">private</span> Integer    id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>日志打印如下，即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimgsimage-20210406225103372.png" alt="image-20210406225103372"></p><p>同时观察数据库</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210406225248538.png" alt="image-20210406225248538"></p><p>至此，实体类转化为数据库成功！</p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/;categories/%5BMac%5D%20mac%20%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/;categories/%5BMac%5D%20mac%20%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="全局变量配置"><a href="#全局变量配置" class="headerlink" title="全局变量配置"></a>全局变量配置</h3><ul><li>首先打开终端</li><li>输入ls -a 命令找到 .bash_profile 文件，如果没有则创建：<code>mkdir .bash_profile</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210330153431430.png" alt="image-20210330153431430"></p><ul><li>输入 <code>vim ./.bash_profile </code> 或者输入     <code>vi ./.bash_profile</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210330153935600.png" alt="image-20210330153935600"></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210330160934673.png" alt="image-20210330160934673"></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 常用命令</title>
      <link href="/;categories/%5BMac%5D%20mac%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/;categories/%5BMac%5D%20mac%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="根据连接下载"><a href="#根据连接下载" class="headerlink" title="根据连接下载"></a>根据连接下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过curl -0 进行下载 通过--output 确认输出文件</span></span><br><span class="line">curl -0 链接 --output file</span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">curl -0 https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.4.tgz --output mongob.tgz</span><br></pre></td></tr></table></figure><h4 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新配置文件</span></span><br><span class="line">source ./.bash_profice</span><br></pre></td></tr></table></figure><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接创建文件夹</span></span><br><span class="line">mkdir &lt;fileName&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 父文件夹不存在时，同时创建父文件夹</span></span><br><span class="line">mkdir -p /parent/fileName</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不加-p 并且 父文件夹不存在时，会报错。</span></span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tar 系列 备份文件指 压缩后的文件</span></span><br><span class="line">tar -zxvf name.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> -z: 通过 gzip指令处理备份文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -x: 从备份中还原文件（解压）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v: 显示执行过程</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> -f: 指定备份文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c：备份文件</span></span><br></pre></td></tr></table></figure><h3 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -i:port</span></span><br><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主要是linux</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看系统日期</span></span><br><span class="line">date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看硬件日期</span></span><br><span class="line">hwclock --show</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将系统日期同步到硬件时间</span></span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步网络时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 ntpdate工具</span></span><br><span class="line">yum -y install ntp ntpdate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步时间</span></span><br><span class="line">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> cli </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sftp</title>
      <link href="/;categories/%5BLinux%5D%20sftp/"/>
      <url>/;categories/%5BLinux%5D%20sftp/</url>
      
        <content type="html"><![CDATA[<h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sftp -P port user@ip</span><br><span class="line">password</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务器路径</span></span><br><span class="line">pwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本季路径</span></span><br><span class="line">lpwd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载到本地</span></span><br><span class="line">get -r file</span><br><span class="line">get file</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传文件</span></span><br><span class="line">put -r file</span><br><span class="line">put file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCv</title>
      <link href="/;categories/%5BJavaCV%5D%E5%AE%89%E8%A3%85OpenCV/"/>
      <url>/;categories/%5BJavaCV%5D%E5%AE%89%E8%A3%85OpenCV/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://docs.opencv.org/master/d0/db2/tutorial_macos_install.html"> 官方网址</a></p><p>linux 安装及 win安装都需要特定的安装，在上方的安装文档中有，这里只记录mac</p><h2 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h2><p><a href="https://github-releases.githubusercontent.com/537699/7a398280-985a-11eb-8ed9-61b0ef22bd88?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20210415/us-east-1/s3/aws4_request&X-Amz-Date=20210415T073241Z&X-Amz-Expires=300&X-Amz-Signature=920bef45acbd330e8ae1afc13d711cdd8a409fad9c2933357d128927196f37ef&X-Amz-SignedHeaders=host&actor_id=30826199&key_id=0&repo_id=537699&response-content-disposition=attachment;%20filename=cmake-3.20.1-macos-universal.dmg&response-content-type=application/octet-stream">下载cmake</a></p><ul><li>首先进入下载界面下载cmake，然后安装</li><li>根据 tools-&gt; how to install for Command line Use。 将cmake设置为命令行可用<ul><li>根据第一种方式，将 /Application/cmake.app/bin 配置到 /root/.bash_profile 中即可</li></ul></li><li><code>cmake --version</code> 测试是否成功</li></ul><h2 id="下载OpenCV"><a href="#下载OpenCV" class="headerlink" title="下载OpenCV"></a>下载OpenCV</h2><p><a href="https://opencv.org/releases/">zip下载</a></p><p>最好通过git下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir opencv</span><br><span class="line">cd opencv</span><br><span class="line">git clone https://github.com/opencv/opencv.git</span><br><span class="line">git clone https://github.com/opencv/opencv_contrib.git</span><br></pre></td></tr></table></figure><h2 id="使用CMake-build-OpenCV"><a href="#使用CMake-build-OpenCV" class="headerlink" title="使用CMake build OpenCV"></a>使用CMake build OpenCV</h2><p>为了防止源码污染，因此建立 opencv同级目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build_opencv</span><br><span class="line">cd build_opencv</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMOLES=ON ../opencv</span><br><span class="line">make -j7</span><br></pre></td></tr></table></figure><h2 id="将openCV引入到项目"><a href="#将openCV引入到项目" class="headerlink" title="将openCV引入到项目"></a>将openCV引入到项目</h2><p>-DCMAKE_USE_OPENSSL</p><h2 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h2><p><a href="https://opencv.org/links/">https://opencv.org/links/</a></p><p><a href="https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html">https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html</a></p><p>但是，是opencv3.x，没安装完，还不太清楚是不是</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令</title>
      <link href="/;categories/%5BGit%E7%B3%BB%E5%88%97%5D%20git%20%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%5BGit%E7%B3%BB%E5%88%97%5D%20git%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="合并其他分支指定提交到本分支"><a href="#合并其他分支指定提交到本分支" class="headerlink" title="合并其他分支指定提交到本分支"></a>合并其他分支指定提交到本分支</h2><p>当1.1分支的某个提交 需要提前放到1.0分支时，那么可以单独将该提交放到1.0分支。</p><p>首先切换到1.1分支，使用<code>git log </code> 查看commitId。 然后切换回1.0分支，执行下列命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commitId</span><br></pre></td></tr></table></figure><p>此时提交是提交在了本地，因此需要 <code>git push</code> 才能上传到 远程。</p><p>ps: 目标提交必须在本地!</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 请求慢问题</title>
      <link href="/;categories/%5BGit%5D%20github%E8%AF%B7%E6%B1%82%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/;categories/%5BGit%5D%20github%E8%AF%B7%E6%B1%82%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>最简单的办法，做映射</p><span id="more"></span><p>​    先查询github的ip地址，然后在本地做映射，可以有效提升github访问速度</p><p>​    <a href="http://tool.chinaz.com/">ip查询</a> : <a href="http://tool.chinaz.com/">http://tool.chinaz.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsft8Xr2QLO7kegjw.png" alt="ip查询结果"></p><p>​    </p><p>如上图所示，13.229.188.59 搭载在新加坡，并且ttl只有8，所以我们就映射这个ip。</p><p>找到hosts文件，如mac 在/etc/ 文件夹下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开hosts</span></span><br><span class="line">sudo vim hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将本行代码加入到hosts中</span></span><br><span class="line">13.229.188.59 github.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置生效</span></span><br><span class="line">source hosts</span><br></pre></td></tr></table></figure><p> 然后本地请求github.com 时 其实是请求了ip地址，而这个ip地址的延迟是很低的，因此可以有效的提高访问速度。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器配置环境变量重启时失效</title>
      <link href="/;categories/%5BDocker%5D%20docker%20%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%A4%B1%E6%95%88/"/>
      <url>/;categories/%5BDocker%5D%20docker%20%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-容器配置的环境变量重启时失效问题解决"><a href="#Docker-容器配置的环境变量重启时失效问题解决" class="headerlink" title="Docker 容器配置的环境变量重启时失效问题解决"></a>Docker 容器配置的环境变量重启时失效问题解决</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>在/etc/profile 配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/opt/java/jdk-15.0.2</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后在/etc/bashrc 中增加环境刷新命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>可以保证重启时环境变量依旧有效</p><span id="more"></span><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>容器加载时会先从/root/.bashrc 中加载环境变量，而/root/.bashrc 实际调用的是/etc/bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .bashrc</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>因此在/etc/bashrc 文件中加入刷新命令，可以使容器每次加载时都会自动刷新环境变量，因此解决重启环境变量失效的问题。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockre </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub + PicGo + Typora 自动上传图片</title>
      <link href="/;categories/Github%20%E5%9B%BE%E5%BA%8A%20+%20Typora%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
      <url>/;categories/Github%20%E5%9B%BE%E5%BA%8A%20+%20Typora%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><span id="more"></span><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722102530549.png"></p><p>新建仓库<name> ，然后就不用管了。</p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><p><a href="https://github.com/Molunerfinn/PicGo/releases/">下载PicGo</a> 可以在该地址选择心仪的版本，然后安装。</p><p>ps: PicGO的指南地址：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p><p>因为笔者电脑限制，所以这里只说mac版，其实是一样的，但是为了严谨。</p><p>下载 <a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.6/PicGo-2.3.0-beta.6.dmg">PicGo-2.3.0-beta.6.dmg</a> 然后点击安装，之后打开，打开后不会出来界面，需要手动点出。 </p><p>在状态栏找到</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722104355.png"></p><p>右键点击，选择 打开详细窗口</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722104523.png"></p><h2 id="回到github，生成token"><a href="#回到github，生成token" class="headerlink" title="回到github，生成token"></a>回到github，生成token</h2><p>点击头像，选择setting，然后选择Developer settings -&gt; Personal access tokens -&gt; Generate new token.</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105001811.png"></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105219756.png"></p><p>​    给予repo权限，表示对仓库有操作权限。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105318749.png"></p><p>然后copy token，记得保存，不然只能重新生成了</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105441447.png"></p><h2 id="配置github信息到PicGo"><a href="#配置github信息到PicGo" class="headerlink" title="配置github信息到PicGo"></a>配置github信息到PicGo</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722112843.png"></p><p>token为上述生成的token，仓库名为新建的仓库。</p><p>自定义域名：</p><p>github 默认：<a href="https://github.com/exceedyc/images">https://github.com/exceedyc/images</a> </p><p>cdn加速：<a href="https://cdn.jsdelivr.net/gh/exceedyc/images">https://cdn.jsdelivr.net/gh/exceedyc/images</a></p><p>同时点击PicGo设置，将 时间戳重命名 及 上传后复制 打开</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722114732.png"></p><p>此处两个配置的作用是： 避免同名造成上传失败，以及上传成功后 自动复制链接到编译器。</p><p>至此上传及图床配置完成，接下来就是编辑器的配置了</p><h1 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h1><p>下载安装Typora 不再赘述。打开Typora -&gt; 设置 -&gt; 图片</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722114237.png"></p><p>将插入图片时配置为上传图片。将上传服务选定为PicGo.app。</p><p>点击验证图片上传选项，得到以下提示即为成功。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722114512.png"></p><p>这样在插入图片后会自动上传并自动修改路径。</p><p>至此结束。</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DJL</title>
      <link href="/;categories/%5BDJL%5D%20DJL%E5%AD%A6%E4%B9%A0/"/>
      <url>/;categories/%5BDJL%5D%20DJL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>@<a href="DJL">DJL</a></p><p>学习DJL之前先了解一下什么是深度学习</p><hr><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="什么是深度学习"><a href="#什么是深度学习" class="headerlink" title="什么是深度学习"></a>什么是深度学习</h2><p>深度学习是机器学习中监督学习的分支，是根据神经网络对模型进行训练的任务过程。</p><p>机器学习包含：</p><ul><li>监督学习</li><li>非监督学习</li></ul><p> 在上层是 人工智能。</p><ul><li>一开始是传统专家系统，根据判断（数据、规则）得出答案。</li><li>进一步发展：数据+答案通过机器学习训练模型得到规则</li></ul><span id="more"></span><h2 id="什么是神经网络"><a href="#什么是神经网络" class="headerlink" title="什么是神经网络"></a>什么是神经网络</h2><p>神经网络是由大量简单元件相互链接而成的网络，具有以下特征：</p><ul><li><p>非线性</p></li><li><p>分层特征学习</p><ul><li>输入层：输入数据、答案</li><li>隐藏层：进行训练</li><li>输出层：输出规则</li></ul></li><li><p>可扩展结构</p><ul><li>隐藏层可以根据不同的业务进行扩展</li></ul></li><li><p>高算力要求</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210408105026467.png" alt="神经网络"></p></li></ul><h3 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h3><p>包含了两个很重要的步骤：</p><ul><li><p>前向传播</p></li><li><p>反向传播</p></li><li><p>epochs：输入数据—&gt; 神经网络-&gt;输出数据-&gt;损失-&gt;根据损失反向求导-&gt;得到一个梯队，然后更新权重，再重新输入数据。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210408105649963.png" alt="image-20210408105649963"></p></li></ul><h1 id="DJL"><a href="#DJL" class="headerlink" title="DJL"></a>DJL</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DJL 是什么？DJL 为Java量身定制的机器学习平台。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>为Java量身定制的方法<ul><li>多线程支持和内存管理</li></ul></li><li>全引擎支持<ul><li>一次构建，轻松运行</li></ul></li><li>预训练模型库<ul><li>70多个预训练模型</li></ul></li><li>为开源社区贡献<ul><li>已支持PaddlePaddle</li></ul></li></ul><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><ul><li>Amazon family</li><li>TalkingData<ul><li>基于Apache Spark的大数据智能分析</li></ul></li><li>Netflix<ul><li>基于Scala的大规模流数据推理</li></ul></li><li>阿里<ul><li>基于Java的深度学习推理服务</li><li>PaddlePaddle </li></ul></li></ul><h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><p>DJL + Paddle = Java完全支持</p><h2 id="DJL架构"><a href="#DJL架构" class="headerlink" title="DJL架构"></a>DJL架构</h2><ul><li>NDArray:    目的：把很复杂的数据结构表达出来。</li><li>NDManager： NDArray的管理者，目的：对内存的管理，当NDArray结束时，立马回收。</li><li>Model：模型<ul><li>Trainer ： 训练师：对模型训练</li><li>Predictor： 推理师：进行推理</li></ul></li><li>Block：模块，所有的神经网络在DJL中都是BLock表达出来的，一个或多个就会构成一个基本的Model架构。</li></ul><h3 id="NDArray"><a href="#NDArray" class="headerlink" title="NDArray"></a>NDArray</h3><ul><li><p>多维数组</p></li><li><p>获取数组信息</p><ul><li>getDataType(): boolean int32,int64,float32,float64,string</li><li>getShape(): Shape 物件 (long[]）</li><li>getDevice(): CPU, GPU(0)</li><li>size(): 数组元素的总数</li></ul></li><li><p>实际上 NDArray 是在 natice C++ 内存里</p><ul><li>通过toByteBuffer 复制一份进Java heap<ul><li>toFloatArray()</li><li>toFloat()</li></ul></li></ul><h4 id="为什么内存存在C-里"><a href="#为什么内存存在C-里" class="headerlink" title="为什么内存存在C++里"></a>为什么内存存在C++里</h4></li></ul><p>​    只在java中，数据太大不好处理，并且使用的cpu较少,同时多维不好处理，并且下述中的加速库都是由C、C++实现的，所以需要存一份数据在C++中。</p><ul><li>矩阵加速库：LAPACK，BLAS</li><li>多线程：OpenMP</li><li>CPU加速库： oneDNN（MKLDNN）</li><li>GPU加速库：CUDA, cuDNN</li></ul><p> 因此，需要尽量避免原生的Java做计算，善用DJL提供的算子 array.add(1f).所有的计算都做完后再调用toFloatArray 转回java。</p><h4 id="DJL提供的算子"><a href="#DJL提供的算子" class="headerlink" title="DJL提供的算子"></a>DJL提供的算子</h4><ul><li><p>四则运算：add,sub,mul,div,…</p><p>｜1｜2｜</p><p>｜3｜4｜ </p><p>当使用add时，add(2)，矩阵中的所有数都会+2.</p><p>｜1+2｜2+2｜</p><p>｜3+2｜4+2｜</p><p>同理，sub,mul,div都是如此，而这里的矩阵乘法和标准的矩阵乘法时不一样的，因此，延伸出了专门针对标准矩阵乘法的接口。matMul。</p></li><li><p>矩阵乘法：matMul</p><p>当使用matMul时：array.matMul(array)</p></li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">｜<span class="number">1</span><span class="operator">*</span><span class="number">1</span><span class="operator">+</span><span class="number">2</span><span class="operator">*</span><span class="number">3</span><span class="operator">|</span><span class="number">1</span><span class="operator">*</span><span class="number">3</span><span class="operator">+</span><span class="number">2</span><span class="operator">*</span><span class="number">4</span><span class="operator">|</span></span><br><span class="line">｜<span class="number">3</span><span class="operator">*</span><span class="number">1</span><span class="operator">+</span><span class="number">4</span><span class="operator">*</span><span class="number">3</span><span class="operator">|</span><span class="number">3</span><span class="operator">*</span><span class="number">2</span><span class="operator">+</span><span class="number">4</span><span class="operator">*</span><span class="number">4</span><span class="operator">|</span></span><br></pre></td></tr></table></figure><ul><li><p>改变形状：reshape，swapAxes</p><p>reshape 与 swapAxes的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reshape(....y,x); ：y 代表从上往下排序几行，x代表从左到右排序几列，并且是x轴优先排序.但是在C++中的排序是不会变的。如：</span><br><span class="line">|1|2|3|</span><br><span class="line">|4|5|6|</span><br><span class="line">这个矩阵对应的C++的排列是：</span><br><span class="line">|1|2|3|4|5|6|</span><br><span class="line">然后调用reshape(3,2);</span><br><span class="line">java中的解读变成了：</span><br><span class="line">|1|2|</span><br><span class="line">|3|4|</span><br><span class="line">|5|6|</span><br><span class="line">但是C++中是不会变的。</span><br><span class="line">特别提示：最后两位永远是y,x而前面的是怎么分组，前位每多一个数，便多一个分组，并且所有的数相乘要等于数组大小。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">swapAxes(0,1);</span><br><span class="line">|1|2|3|</span><br><span class="line">|4|5|6|</span><br><span class="line">这里比较特殊，这个矩阵是（2，3）并且方向是(y,x)格式的矩阵，这里的yx和上述方法中的yx一个含义，所以上面的矩阵是1-3从左到右排序，然后从上往下排序。</span><br><span class="line">但是在swapAxes是进行整个轴的对调。那么这个矩阵就变成了(3,2),虽然排序方向依旧是（y,x) ，但是优先排序变成了y轴。因此，对调完后是，从上往下排3，然后从左到右排2，结果便是：</span><br><span class="line">｜1｜4｜</span><br><span class="line">｜2｜5｜</span><br><span class="line">｜3｜6｜</span><br><span class="line">同时C++中的排列也会随之改变为：</span><br><span class="line">|1|4|2|5|3|6|</span><br></pre></td></tr></table></figure></li><li><p>比较运算：eq,gt,…</p><p>array.eq(array);</p><p>|1==1|2==2|</p><p>|3==3|4==4|</p></li><li><p>Reduction运算：su m,max,min,…</p><p>array.max()</p><p>|4|</p></li><li><p>其他数学运算：abs，exp,…</p></li></ul><p> 每个操作输出的NDArray都是一份新的拷贝。也就是说不影响以前的数据喽。</p><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><p>临时生成的NDArray越早释放越好，并且不会自动释放。</p><p>因为NDArray内存存在C++里，上面提到过，所以java的GC没办法回收native内存。</p><p>​    每一个产生的NDArray都需要调用C API回收，这样非常容易出现内存溢出。</p><p>​    针对回收DJL使用NDManager管理。将临时的NDArray装入NDManager中，调用close()时一起释放。</p><h3 id="NDManager"><a href="#NDManager" class="headerlink" title="NDManager"></a>NDManager</h3><ul><li><p>管理数据的创建以及生命周期</p></li><li><p>创建所有的NDArray都需要通过NDManager.</p><ul><li>manager.create(new float[]{0f,1f,2f,3f}, new Shape(2,2));</li><li>manager.zeros(new Shape(2,2)); // 全是0的2*2 矩阵</li><li>manager.randomUniform(0f,1f,new Shape(2,2)); // 2*2 0-1的矩阵</li></ul></li><li><p>回收临时NDArray的方案</p><p>创建一个manager内部的NDMaber，然后将临时的NDArray放入，一起close。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NDManager subManager = manager.newSubManager();</span><br><span class="line">array.attach(subManager);</span><br><span class="line">subManager.close();</span><br></pre></td></tr></table></figure></li></ul><h2 id="DJL-深度学习推理实现"><a href="#DJL-深度学习推理实现" class="headerlink" title="DJL 深度学习推理实现"></a>DJL 深度学习推理实现</h2><h4 id="分步"><a href="#分步" class="headerlink" title="分步"></a>分步</h4><p><strong>数据前处理 -&gt; 推理 -&gt; 数据后处理</strong></p><ul><li>数据前处理：如图片<ul><li>把图片转化成RGB数组</li><li>把文字转换成索引</li><li>将数据归一化</li></ul></li><li>推理：<ul><li>输入NDList(List of NDArray)，封装NDArray到LIst中。</li><li>输出NDList(List of NDArray)</li><li>(概率，文字索引…)</li></ul></li><li>数据后处理<ul><li>把概率转换对应的标签</li><li>把文字索引转换回真正的文字</li></ul></li></ul><h4 id="Translator"><a href="#Translator" class="headerlink" title="Translator"></a>Translator</h4><p>将数据前处理和数据后处理封装到了Translator里</p><ul><li>public NDList processInput(TranslatorContext cox, I);     </li><li>public O processOutput(TranslatorContext ctx, NDList lits)</li><li>TranslatorContext 会获取NDManager，并且将数据处理时产生的NDArray返回NDManager,处理完成后直接close。</li><li>优点<ul><li>整理琐碎的处理代码</li><li>容易服用经典的数据处理</li></ul></li></ul><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="Apache-MXNet"><a href="#Apache-MXNet" class="headerlink" title="Apache MXNet"></a>Apache MXNet</h4><ul><li>Symbolic 模型</li><li>Gluon 模型，需要先 hybridize 后保存,就会转成Symbolic模型</li></ul><h4 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h4><ul><li>TorchScript 模型</li><li>PyTorch模型，可通过 jit.trace 或是 jit.script 转成TorchScript</li></ul><h4 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h4><ul><li>SavedModel</li><li>h5模型，可通过tf.keras.models.load_model 搭配 tf.saved_model.save转成SavedModel</li></ul><h3 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h3><ul><li>创建多个搜索条件找到需要加载的模型<ul><li>可以读取本地的模型</li><li>S3上的预训练模型</li><li>支持从URL读取，包含http，S3，hdfs</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**读取S3上的预训练模型*/</span></span><br><span class="line">Criteria&lt;Image, DetectedObjects&gt; criteria = Criteria.builder()</span><br><span class="line">.optApplication(Application.CV.OBJECT_DETECTION) <span class="comment">//读取模型</span></span><br><span class="line">.setTypes(Image.class, DetectedObjects.class) <span class="comment">// 类型</span></span><br><span class="line">.optFilter(<span class="string">&quot;backbone&quot;</span>,<span class="string">&quot;resnet50&quot;</span>) <span class="comment">// 多个filter</span></span><br><span class="line">.optProgress(<span class="keyword">new</span> ProgressBar()) <span class="comment">// </span></span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**读取本地模型</span></span><br><span class="line"><span class="comment">* 本地模型：/var/models/my_resnet50/my_resent50.pt</span></span><br><span class="line"><span class="comment">* pt 模型名要和上级文件夹同名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Criteria&lt;Image, Classifications&gt; criteria = Criteria.builder()</span><br><span class="line">  .setTypes(Image.class, Classifications.class)</span><br><span class="line">  .optTranslator(ImageClassifictionTranslator.builder()</span><br><span class="line">                .setSynsetArtifactName(<span class="string">&quot;synset.txt&quot;</span>)</span><br><span class="line">                .build()) <span class="comment">// 建立 Translator</span></span><br><span class="line">  .optModelUrls(<span class="string">&quot;file:///var/models/my_resnet50&quot;</span>) <span class="comment">// 路径</span></span><br><span class="line">  .optArtifactId(<span class="string">&quot;ai.djl.localmodelzoo:my_resnet50&quot;</span>) <span class="comment">// 本地的id</span></span><br><span class="line">  .build();</span><br><span class="line">ZooModel&lt;Image, Classifications&gt; model = ModelZoo.loadModel(criteria); <span class="comment">// 获取model</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果模型和上级文件不想同名，那么删除 optArtifactId，并将ModelUrl修改</span></span><br><span class="line"><span class="comment">// files:///var/models/文件名不一样?artifact_id=文件名&amp;model_name=模型名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取模型Criteria-API"><a href="#读取模型Criteria-API" class="headerlink" title="读取模型Criteria API"></a>读取模型Criteria API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Predictor</span></span><br><span class="line"><span class="keyword">try</span>(ZooModel&lt;?,?&gt; model = loadModel(arguments, metrics))&#123;</span><br><span class="line">  Object predictResult = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span>(Predictor predictor = model.<span class="function">new <span class="title">Predictor</span><span class="params">()</span>)</span>&#123; <span class="comment">// 线程安全的</span></span><br><span class="line">    predictResult = predictor.predic(inputData); <span class="comment">// 开始推理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多线程环境下：一个线程创建一个Predcitor，避免每次predict时都创建新的Predictor。</span></span><br></pre></td></tr></table></figure><h3 id="优化推理速度"><a href="#优化推理速度" class="headerlink" title="优化推理速度"></a>优化推理速度</h3><h4 id="MXNet"><a href="#MXNet" class="headerlink" title="MXNet"></a>MXNet</h4><ul><li>MXNet 推理引擎不是线程安全的</li><li>多线程调用需使用NaiveEngine （线程安全的）<ul><li>export MXNET_ENGINE_TYPE = NaiveEngine。</li></ul></li><li>每个线程里面都要有自己一份拷贝的weight </li><li>可以使用实验性质的线程安全接口 -Dai.djl.mxnet.user_thread_safe_predictor=true</li><li>多线程性能最优配置：<ul><li>export OMP_NUM_THREADS=1</li><li>只需要调整Java线程数量</li></ul></li></ul><h4 id="PyTorch-1"><a href="#PyTorch-1" class="headerlink" title="PyTorch"></a>PyTorch</h4><ul><li>Pytorch 释放Tensor的接口不是线程安全的，需要避免GC更NDManager同时回收Tensor<ul><li>必须传入：-Dai.djl.disable_close_resource_on_finalize=true</li></ul></li><li>PyTorch 默认不使用MKLDNN(oneDNN)<ul><li>使用：-Dai.djl.pytorch.usr_mkldnn=true</li></ul></li><li>多线程性能最优配置<ul><li>-Dai.djl.pytorch.num_interop_threads=1</li><li>-Dai.djl.pytorch.num_threads=1</li><li>同样只需要调整java线程数量即可</li></ul></li></ul><h4 id="TensorFlow-1"><a href="#TensorFlow-1" class="headerlink" title="TensorFlow"></a>TensorFlow</h4><ul><li>多行程性能最优配置<ul><li>export OMP_NUM_THREADS=1</li><li>export TF_NUM_INTEROP_THREADS=1</li><li>export TF_NUM_INTRAOP_THREADS=1</li><li>只需要调整Java线程数量</li></ul></li></ul><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210408113352890.png" alt="image-20210408113352890"></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="基于Java的Jupyter-Notebook"><a href="#基于Java的Jupyter-Notebook" class="headerlink" title="基于Java的Jupyter Notebook"></a>基于Java的Jupyter Notebook</h3><ul><li>基于Java11+ 的notebook</li><li>安装配置简单</li><li>Tablesaw： Java中的matplotlib</li><li>DJL完美适配：CPU/GPU直接使用</li></ul><h3 id="JAVA-深度学习微服务部署"><a href="#JAVA-深度学习微服务部署" class="headerlink" title="JAVA 深度学习微服务部署"></a>JAVA 深度学习微服务部署</h3><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h3 id="DJL模块简介"><a href="#DJL模块简介" class="headerlink" title="DJL模块简介"></a>DJL模块简介</h3><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>​    神经网络模型搭建：Model/ 使用Block Api 代表神经网络的基石</p><ul><li>Sequential Blocak</li><li>ParallelBlock</li><li>Lambda BLock</li></ul><h4 id="BLock-实现"><a href="#BLock-实现" class="headerlink" title="BLock 实现"></a>BLock 实现</h4><p>Linear Block 全连接层</p><ul><li><p>Linear, FullyConnected(FC),Dense</p></li><li><p>描述公式：<br>$$<br>Y=XW^T + b<br>$$</p></li><li><p>参数：Weight, Bias</p></li><li><p>前向传播：forward</p></li><li><p>实例演示：全连接层和多层感知机</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Linear</span> <span class="keyword">extends</span> <span class="title">AbstractBlock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> VERSION = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> units;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> inputFeatures;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Shape inputShape;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Parameter weight;</span><br><span class="line">   <span class="keyword">private</span> Parameter bias;</span><br><span class="line"></span><br><span class="line">   Linear(Builder builder) &#123;</span><br><span class="line">       <span class="keyword">super</span>(VERSION);</span><br><span class="line">       units = builder.units;</span><br><span class="line">       <span class="comment">// &quot;inputFeatures&quot; is only known after &quot;beforeInitialize&quot; is called, hence we need</span></span><br><span class="line">       <span class="comment">// a callback, even if we do not used the callback parameter</span></span><br><span class="line">       weight =</span><br><span class="line">               addParameter(</span><br><span class="line">                       <span class="keyword">new</span> Parameter(<span class="string">&quot;weight&quot;</span>, <span class="keyword">this</span>, ParameterType.WEIGHT),</span><br><span class="line">                       inputShapes -&gt; <span class="keyword">new</span> Shape(units, inputFeatures));</span><br><span class="line">       <span class="keyword">if</span> (builder.bias) &#123;</span><br><span class="line">           bias = addParameter(<span class="keyword">new</span> Parameter(<span class="string">&quot;bias&quot;</span>, <span class="keyword">this</span>, ParameterType.BIAS), <span class="keyword">new</span> Shape(units));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** &#123;<span class="doctag">@inheritDoc</span>&#125; */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> NDList <span class="title">forwardInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">           ParameterStore parameterStore,</span></span></span><br><span class="line"><span class="params"><span class="function">           NDList inputs,</span></span></span><br><span class="line"><span class="params"><span class="function">           <span class="keyword">boolean</span> training,</span></span></span><br><span class="line"><span class="params"><span class="function">           PairList&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">       NDArray input = inputs.singletonOrThrow();</span><br><span class="line">       Device device = input.getDevice();</span><br><span class="line">       NDArray weightArr = parameterStore.getValue(weight, device, training);</span><br><span class="line">       NDArray biasArr = parameterStore.getValue(bias, device, training);</span><br><span class="line">       <span class="keyword">return</span> linear(input, weightArr, biasArr);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据集读取和预处理：Dataset-Api"><a href="#数据集读取和预处理：Dataset-Api" class="headerlink" title="数据集读取和预处理：Dataset Api"></a>数据集读取和预处理：Dataset Api</h3><ul><li>预处理Transform， 需要做一些特殊处理</li><li>预处理Popeline</li><li>CV预处理流程</li><li>NLP预处理流程<ul><li>编码-&gt;清洗-&gt;分词-&gt;特征处理</li></ul></li><li>多线程载入数据</li></ul><h4 id="正式训练"><a href="#正式训练" class="headerlink" title="正式训练"></a>正式训练</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">1[数据] --&gt; 2[网络] --&gt;3[前向传播]--&gt;4[损失函数]--&gt; 5[方向传播]--&gt;6[更新权重]--&gt;1</span><br></pre></td></tr></table></figure><p>Trainer Api:</p><ul><li>​    设置损失函数和优化器<ul><li>学习目标和更新权重 的方法</li></ul></li><li>超参数设置<ul><li>训练多久，样本大小，学习率更新</li></ul></li><li>权重初始化</li><li>用Evaluator 评测学习情况</li><li>多GPU学习</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> lr = <span class="number">0.9f</span>; <span class="comment">// 学习率</span></span><br><span class="line">Model model = Model.newInstance(<span class="string">&quot;cnn&quot;</span>); <span class="comment">// 新建一个model</span></span><br><span class="line">model.setBlock(block);</span><br><span class="line"></span><br><span class="line">Loss loss = Los.softmaxCrossEntropyLoss(); <span class="comment">// 损失函数</span></span><br><span class="line"></span><br><span class="line">Tracker lrt = Tracker.fixed(lr); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">Optimizer sgd = Optimizer.sgd().setLearningRateTracker(lrt).build();</span><br><span class="line"></span><br><span class="line">DefaultTrainingConfig config = <span class="keyword">new</span> DefaultTrainingConfig(loss).optOptimizer(sgd) <span class="comment">// 设置损失函数和优化器</span></span><br><span class="line">  .addEvaluator(<span class="keyword">new</span> Accuracy()) <span class="comment">// 评测学习情况，默认打印超参数。accuracy: 学习情况</span></span><br><span class="line">  .addTrainingListeners(TrainingListener.Defaults.logging());</span><br></pre></td></tr></table></figure><p>源代码相似度比较，200多个分类。</p><p>比特币源代码，里面的源码被归类为1</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> DJL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DJL </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java操作图片-ImageIo</title>
      <link href="/;categories/ImageIo/"/>
      <url>/;categories/ImageIo/</url>
      
        <content type="html"><![CDATA[<h2 id="java操作图片"><a href="#java操作图片" class="headerlink" title="java操作图片"></a>java操作图片</h2><p>​    本文章主要说明java 进行图片合并、添加文字两个功能，其他功能大同小异，但是因为博主没用过，所以不做过多赘述。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ImageIo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 集成webSocket （二）</title>
      <link href="/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>基于stomp版的，啊，有个demo，但是还没实际用过，不想写怎么办，在线等，一点也不急那种。</p><span id="more"></span><p>啊，时隔n久，终于用到这个demo了，现在来补一下，啦啦啦。<br>此次使用的主要是后台推送功能，这样实现起来就比较简单了，前端订阅后，就不需要再次操作。<br>和上一篇有很多相似之处，主要的还是前后端连接，首先上配置类也是最主要的类代码。 </p><h5 id="1-WebStompConfig"><a href="#1-WebStompConfig" class="headerlink" title="1.  WebStompConfig"></a>1.  WebStompConfig</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/7/10/15:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebStompConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private WebSocketHandleInterceptor interceptor;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加一个/chat端点，客户端就可以通过这个端点来进行连接；withSockJS作用是添加SockJS支持</span></span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/chat&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义了两个客户端订阅地址的前缀信息，也就是客户端接收服务端发送消息的前缀信息</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;/api&quot;</span>);</span><br><span class="line">        <span class="comment">//定义了服务端接收地址的前缀，也即客户端给服务端发消息的地址前缀</span></span><br><span class="line">        <span class="comment">// 因不需要前端发送信息，所以不提供接收地址</span></span><br><span class="line"><span class="comment">//        registry.setApplicationDestinationPrefixes(&quot;/ws/jbcc&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端其实这样就算是结束了，是不是很简单。那么接下来，其实还有一点，没错，这里只是配置了链接，没有推送，我们的目的是推送呀推送。<br>好的，那么来推送代码，推送简直简单的可怕。</p><h5 id="2-推送代码"><a href="#2-推送代码" class="headerlink" title="2.推送代码"></a>2.推送代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private SimpMessagingTemplate simpMessagingTemplate; //引入消息发送类</span><br><span class="line"> simpMessagingTemplate.convertAndSend(&quot;/chain/info&quot;,&quot;test&quot;); // 发送消息到订阅该链接的客户端</span><br></pre></td></tr></table></figure><p>简单吧，没错，因为博主只用了推送功能，所以，就是这么简单。其实，就算使用客户端发送消息功能，后端其实也是这样写。</p><h4 id="前端交互"><a href="#前端交互" class="headerlink" title="前端交互"></a>前端交互</h4><h5 id="js-代码"><a href="#js-代码" class="headerlink" title="js 代码"></a>js 代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/stomp.js/2.3.3/stomp.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()  &#123;</span><br><span class="line">var socket;</span><br><span class="line">      </span><br><span class="line">            console.log(&quot;SockJS&quot;);</span><br><span class="line">            //socket = new SockJS(&quot;http://192.168.200.31:80/cloud/ws/jbcc&quot;);</span><br><span class="line">socket = new SockJS(&quot;http://127.0.0.1:8080/cloud/ws/jbcc&quot;);</span><br><span class="line">        var client = Stomp.over(socket);</span><br><span class="line">        client.connect(&#123;&#125;,function (succ) &#123;</span><br><span class="line">            console.log(&#x27;client connect success:&#x27;, succ);</span><br><span class="line"></span><br><span class="line">            client.subscribe(&quot;/blocks/info&quot;, function (res) &#123;</span><br><span class="line">                console.log(&#x27;收到消息---/blocks/info：&#x27;,res);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, function (error) &#123;</span><br><span class="line">            console.log(&#x27;client connect error:&#x27;, error);</span><br><span class="line">        &#125;);</span><br><span class="line">        sendMessage = function (destination, headers, body) &#123;</span><br><span class="line">            client.send(destination, headers, body)</span><br><span class="line">        &#125;;</span><br><span class="line">        disConnect = function () &#123;</span><br><span class="line">            client.disconnect();</span><br><span class="line">            console.log(&#x27;client connect break&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> webSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo 学习日记</title>
      <link href="/;categories/dubbo-md/"/>
      <url>/;categories/dubbo-md/</url>
      
        <content type="html"><![CDATA[<p>dubbo 直接使用scoket通信，传输效率高，并可以统计系统之间的调用干洗、调用次数。缺点是无法跨语音，只能是java。<br>  <span id="more"></span><br>  dubbo 是阿里巴巴开源的分布式框架。<br>  <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsdubbo-relation.jpg" alt="依赖关系"></p><pre><code>简单来说，我们的服务端启动后，第一步去注册中心进行注册，第二部客户端去注册中心查找，第三步注册中心返回符合要求的地址，第四步客户端进行调用就进行请求调用。</code></pre><p>  注册中心：官方推荐使用zookeeper。:</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql读写分离 （一）</title>
      <link href="/;categories/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E4%B8%80/"/>
      <url>/;categories/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<pre><code>为了能让数据库更有效快速的进行存储查询工作，因此需要使用到读写分离。笔者是为了能使用springboot + mysql + mybaits 进行读写分离，因此专门进行学（挖）习（坑）</code></pre><span id="more"></span><pre><code>首先读写分离需要用到mysql的主从复制，读写分离也是基于mysql的主从复制展开的。所以本篇主要讲mysql怎么进行主从复制的搭建。一般都是废话写在前，那么我的废话就写在后吧，接下来就开始主从库的搭建。一、环境准备  正常来说，应该准备两个虚拟机，然后对其中一台虚拟机进行安装mysql8，并添加slave用户以及修改加密规则等操作，然后复制虚拟机进行ip，mysqlserverid 修改。这样两个准备环境就搭建完成了。但是，咳咳，博主没走正常路，用的是docker。咳，自己给自己作。那么就按照docker的步骤来记录吧。  1.1 拉取镜像    ``` docker pull centos ```    简单易操作，这里就不多赘述了。嗯，下面就是开始填坑了。  1.2 万恶的镜像    启动镜像    ``` docker run centos ```    拉取的镜像，是最小化版本的，啥都木得，唉，什么都要安装，最重要的是不能用ip addr     ``` yum -y install initscripts ```  1.3 安装mysql    因为是拉取的全新的镜像，启动起来的容器也就是一个啥也没有的centos系统，所以一切要重头来，所以，要安装mysql。    ``` yum -y mysql ```</code></pre>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msyql </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 踩坑记 （一）</title>
      <link href="/;categories/docker%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/docker%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>  直奔主题吧，介绍文会新建一个，这里直接就开始安装使用吧<br>  <span id="more"></span></p><h4 id="CentOS-7-安装docker"><a href="#CentOS-7-安装docker" class="headerlink" title="CentOS 7 安装docker"></a>CentOS 7 安装docker</h4><p>  CentOS 可以直接使用命令行安装：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker</span><br></pre></td></tr></table></figure></p><h4 id="测试Docker版本"><a href="#测试Docker版本" class="headerlink" title="测试Docker版本"></a>测试Docker版本</h4><p>  1.运行 <code>docker --version</code> 可以查看docker版本<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 1.13.1, build b2f74b2/1.13.1</span><br></pre></td></tr></table></figure><br>  2.运行 <code>docker info</code> 查看docker安装的更多详细信息</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Containers: 7</span><br><span class="line">Running: 0</span><br><span class="line">Paused: 0</span><br><span class="line">Stopped: 7</span><br><span class="line">Images: 3</span><br><span class="line">Server Version: 1.13.1</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line">Backing Filesystem: xfs</span><br><span class="line">Supports d_type: true</span><br><span class="line">Native Overlay Diff: true</span><br><span class="line">Logging Driver: journald</span><br><span class="line">Cgroup Driver: systemd</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h4 id="测试Docker安装"><a href="#测试Docker安装" class="headerlink" title="测试Docker安装"></a>测试Docker安装</h4><ol><li><p>通过运行简单的Docker镜像hello-world来测试安装是否有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>列出hello-world 下载到虚拟机的镜像</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><ol start="3"><li>列出 hello-world 在显示其消息后退出的容器，如果它仍在运行，将不需要 –all选项；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls --all</span><br><span class="line"></span><br><span class="line">CONTAINER ID     IMAGE           COMMAND      CREATED            STATUS</span><br><span class="line">54f4984ed6a8     hello-world     &quot;/hello&quot;     20 seconds ago     Exited (0) 19 seconds ago</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 踩坑记 （一）</title>
      <link href="/;categories/Swagger/"/>
      <url>/;categories/Swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Swagger"><a href="#什么是Swagger" class="headerlink" title="什么是Swagger"></a>什么是Swagger</h1><p>Swagger是当前比较流行的Open Api 生成工具</p><blockquote><p>SwaggerHub is a collaborative platform for defining your APIs using the <a href="https://swagger.io/specification/">OpenAPI Specification</a>, and managing them throughout their lifecycle. It integrates the core Swagger tools (UI, Editor, Codegen, and Validator) into a single platform to help you coordinate the entire workflow of an API’s lifecycle.</p><hr><p>SwaggerHub是一个协作平台，用于使用<a href="https://swagger.io/specification/">OpenAPI规范</a>定义您的API ，并在其整个生命周期内对其进行管理。它将核心Swagger工具（UI，编辑器，Codegen和Validator）集成到单个平台中，以帮助您协调API生命周期的整个工作流程</p></blockquote><ul><li>文档地址： <a href="https://support.smartbear.com/swaggerhub/getting-started/introductory-topics/">https://support.smartbear.com/swaggerhub/getting-started/introductory-topics/</a></li></ul><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Swaggerhub分为两种生成Api的方式：</p><ul><li>远程生成</li><li>本地生成</li></ul><h2 id="远程生成"><a href="#远程生成" class="headerlink" title="远程生成"></a>远程生成</h2><p>远程生成使用的是订阅交付模式，所以需要去SwaggerBhub进行注册登录</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>点击下方地址进行注册登录：</p><blockquote><p><a href="https://app.swaggerhub.com/signup">https</a> : <a href="https://app.swaggerhub.com/signup">//app.swaggerhub.com/signup</a></p></blockquote><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><ul><li>设计优先</li><li>代码优先</li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="集成到项目"><a href="#集成到项目" class="headerlink" title="集成到项目"></a><strong>集成到项目</strong></h3><p>使用swagger需要使用<strong>springfox</strong>。嗯，一会研究下springfox</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="swagger-配置类"><a href="#swagger-配置类" class="headerlink" title="swagger 配置类"></a>swagger 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就已经可以用了，默认是扫描全部，所以springboot自带的/error也有被扫描，居然看下方启动</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>直接启动项目就可，启动后输入地址 ip:port/swagger-ui.html。这是固定的，swagger-ui.html在引入swagger-ui的包内。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20200930161447109.png" alt="image-20200930161447109"></p><p>启动后可以看到swaggerui分为了四个部分：</p><ul><li>API信息</li><li>接口信息</li><li>模块</li><li>组</li></ul><p>接下来就是分析一波源码了</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式study（一）</title>
      <link href="/;categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fstudy%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fstudy%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p> 人丑就要多读书，技术差就得多学习，这不，我就是又丑技术又差的，那么没办法，学习呗。先从《head first设计模式》开始。<br> <span id="more"></span></p><ul><li>设计原则<ul><li>1.找到应用中可能需要变化之处，把它们独立出来，不要和不需要变化的代码混在一起。</li><li>2.面向接口编程，而不是面向实现编程。</li><li>3.多用组合，少用继承。</li><li>4.为了交互对象之间的松耦合设计而努力</li><li>5.类对扩展开放，对修改关闭</li></ul></li></ul><hr><ul><li>设计模式<ul><li>策略模式：策略模式定义了算法族，分别封装起来，让它们之间可以互相替换。此模式让算法的变化独立于使用算法的客户。</li><li>观察者模式：定义了对象之间的一对多依赖，这样依赖，当一个对象改变状态时，它的所有依赖者都会收到通知。<ul><li>jvm的观察者模式：可观察者继承Observable，观察者实现Observer。</li></ul></li><li>装饰者模式：动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> head first </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 集成webSocket （一）</title>
      <link href="/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>   springboot 集成webSocket是很方便简单的，当然对于博主这种小萌新还是需要多努力的，经过不断的度娘终于完成了可用的demo，虽然都是搬的，但是还是要做做笔记。<br>    <span id="more"></span><br>   好的，为了能加深印象，简单说一下webSocket的用处，webSocket是单个TCP链接提供全双工（双向通信）通信的计算机通信协议。webSocket允许服务端主动向客户端推送数据，在浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的链接，并进行双向数据传输。</p><h4 id="接下来就是代码时刻："><a href="#接下来就是代码时刻：" class="headerlink" title="接下来就是代码时刻："></a>接下来就是代码时刻：</h4><p>  首先springboot集成websocket在pom文件内直接加入以下代码<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h5 id="1-先从配置开始"><a href="#1-先从配置开始" class="headerlink" title="1. 先从配置开始"></a>1. 先从配置开始</h5><p>主要配置文件，配置了链接webSocket的访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.tdchain.cloud.interceptor.SocketInterceptor;</span><br><span class="line"><span class="keyword">import</span> cn.tdchain.cloud.service.websocket.MyWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment">* <span class="doctag">@time</span> 2019/3/12/11:33</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketInterceptor handshake; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyWebSocketHandler handler; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实现 WebSocketConfigurer 接口，重写 registerWebSocketHandlers 方法，这是一个核心实现方法，配置 websocket 入口，允许访问的域、注册 Handler、SockJs 支持和拦截器。</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * registry.addHandler()注册和路由的功能，当客户端发起 websocket 连接，把 /path 交给对应的 handler 处理，而不实现具体的业务逻辑，可以理解为收集和任务分发中心。</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * addInterceptors，顾名思义就是为 handler 添加拦截器，可以在调用 handler 前后加入我们自己的逻辑代码。</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * setAllowedOrigins(String[] domains),允许指定的域名或 IP (含端口号)建立长连接，如果只允许自家域名访问，这里轻松设置。如果不限时使用”*”号，如果指定了域名，则必须要以 http 或 https 开头。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//部分 支持websocket 的访问链接,允许跨域</span></span><br><span class="line">        registry.addHandler(handler, <span class="string">&quot;/echo&quot;</span>).addInterceptors(handshake).setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//部分 不支持websocket的访问链接,允许跨域</span></span><br><span class="line">        registry.addHandler(handler, <span class="string">&quot;/sockjs/echo&quot;</span>).addInterceptors(handshake).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-实现HandshakeInterceptor"><a href="#2-实现HandshakeInterceptor" class="headerlink" title="2. 实现HandshakeInterceptor"></a>2. 实现HandshakeInterceptor</h5><p>拦截器，在客户端与服务端握手前后进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.tdchain.cloud.constant.WebSocketUrlType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/3/12/10:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (serverHttpRequest <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            HttpServletRequest request = ((ServletServerHttpRequest)serverHttpRequest).getServletRequest();</span><br><span class="line">            String user = (String) request.getAttribute(WebSocketUrlType.WEBSOCKET_USERNAME);</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                user = (String) request.getSession().getAttribute(WebSocketUrlType.WEBSOCKET_USERNAME);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------socket&quot;</span> +user);</span><br><span class="line">            map.put(WebSocketUrlType.WEBSOCKET_USERNAME,user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="3、实现WebSocketHandler-该功能主要用于消息分发"><a href="#3、实现WebSocketHandler-该功能主要用于消息分发" class="headerlink" title="3、实现WebSocketHandler,该功能主要用于消息分发"></a>3、实现WebSocketHandler,该功能主要用于消息分发</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">import cn.tdchain.cloud.constant.WebSocketUrlType;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.socket.*;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Mr.Y</span><br><span class="line"> * @time 2019/3/12/9:51</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class MyWebSocketHandler implements WebSocketHandler &#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(MyWebSocketHandler.class);</span><br><span class="line">    private final static List&lt;WebSocketSession&gt; webSocketSessions = Collections.synchronizedList(new ArrayList&lt;WebSocketSession&gt;());</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionEstablished(WebSocketSession webSocketSession) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;webSocket 链接成功&quot;);</span><br><span class="line">        webSocketSessions.add(webSocketSession);</span><br><span class="line"></span><br><span class="line">        String userName = (String) webSocketSession.getAttributes().get(WebSocketUrlType.WEBSOCKET_USERNAME);</span><br><span class="line">        System.out.println(&quot;--------user:&quot; + userName);</span><br><span class="line">        if (userName != null) &#123;</span><br><span class="line">            JSONObject obj = new JSONObject();</span><br><span class="line">            // 统计当前链接人数</span><br><span class="line">            obj.put(&quot;count&quot;, webSocketSessions.size());</span><br><span class="line">            users(obj);</span><br><span class="line">            webSocketSession.sendMessage(new TextMessage(obj.toJSONString()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;处理消息发送&quot;);</span><br><span class="line">        JSONObject msg = JSON.parseObject(webSocketMessage.getPayload().toString());</span><br><span class="line">        JSONObject obj = new JSONObject();</span><br><span class="line">        if (msg.getInteger(&quot;type&quot;) == 1) &#123;</span><br><span class="line">            // 发送给所有人</span><br><span class="line">            obj.put(&quot;msg&quot;, msg.getString(&quot;msg&quot;));</span><br><span class="line">            sendMessageToUser(new TextMessage(obj.toJSONString()));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String to = msg.getString(&quot;to&quot;);</span><br><span class="line">            obj.put(&quot;msg&quot;, msg.getString(&quot;msg&quot;));</span><br><span class="line">            sendMessageToUser(to, new TextMessage(obj.toJSONString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleTransportError(WebSocketSession webSocketSession, Throwable throwable) throws Exception &#123;</span><br><span class="line">        if (webSocketSession.isOpen()) &#123;</span><br><span class="line">            webSocketSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(&quot;链接出错，断开链接。。。&quot;);</span><br><span class="line">        webSocketSessions.remove(webSocketSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionClosed(WebSocketSession webSocketSession, CloseStatus closeStatus) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;链接断开&quot;);</span><br><span class="line">        webSocketSessions.remove(webSocketSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supportsPartialMessages() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给所有用户发消息</span><br><span class="line">     *</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public static void sendMessageToUser(TextMessage message) &#123;</span><br><span class="line">        webSocketSessions.forEach(v -&gt; &#123;</span><br><span class="line">            if (v.isOpen()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    v.sendMessage(message);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送给指定用户</span><br><span class="line">     *</span><br><span class="line">     * @param to</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public static void sendMessageToUser(String to, TextMessage message) &#123;</span><br><span class="line">        webSocketSessions.forEach(v -&gt; &#123;</span><br><span class="line">            if (v.getAttributes().get(WebSocketUrlType.WEBSOCKET_USERNAME).equals(to)) &#123;</span><br><span class="line">                if (v.isOpen()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        v.sendMessage(message);</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将所有用户发送到前端</span><br><span class="line">     *</span><br><span class="line">     * @param obj</span><br><span class="line">     */</span><br><span class="line">    private void users(JSONObject obj) &#123;</span><br><span class="line">        List&lt;String&gt; userNames = new ArrayList&lt;&gt;();</span><br><span class="line">        webSocketSessions.forEach(v -&gt; &#123;</span><br><span class="line">            userNames.add((String) v.getAttributes().get(WebSocketUrlType.WEBSOCKET_USERNAME));</span><br><span class="line">        &#125;);</span><br><span class="line">        obj.put(&quot;users&quot;, userNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List&lt;WebSocketSession&gt; getWebSocketSessions() &#123;</span><br><span class="line">        return webSocketSessions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>前端js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> websocket;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;WebSocket&quot;</span>);</span><br><span class="line">          websocket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:8080/cloud/echo&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;MozWebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;MozWebSocket&quot;</span>);</span><br><span class="line">          websocket = <span class="keyword">new</span> MozWebSocket(<span class="string">&quot;ws://cloud/echo&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;SockJS&quot;</span>);</span><br><span class="line">          websocket = <span class="keyword">new</span> SockJS(<span class="string">&quot;http://127.0.0.1:8080/cloud/sockjs/echo&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;链接服务器成功!&quot;</span>, evnt.data);</span><br><span class="line">      &#125;;</span><br><span class="line">      websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;收到消息:&#x27;</span>, evnt.data);</span><br><span class="line">          <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(evnt.data);</span><br><span class="line">          <span class="keyword">if</span> (json.hasOwnProperty(<span class="string">&#x27;users&#x27;</span>)) &#123;</span><br><span class="line">              <span class="keyword">var</span> users = json.users;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">                  $(<span class="string">&quot;#inputGroupSelect01&quot;</span>).append(<span class="string">&#x27;&lt;option value=&quot;&#x27;</span> + users[i] + <span class="string">&#x27;&quot;&gt;&#x27;</span> + users[i] + <span class="string">&#x27;&lt;/option&gt;&#x27;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//打印消息</span></span><br><span class="line">              toast(json, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      websocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">      &#125;;</span><br><span class="line">      websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;与服务器断开了链接!&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toast</span>(<span class="params">text, icon</span>) </span>&#123;</span><br><span class="line">      $.toast(&#123;</span><br><span class="line">          <span class="attr">text</span>: text,</span><br><span class="line">          <span class="attr">heading</span>: <span class="string">&#x27;新消息&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: icon,</span><br><span class="line">          <span class="attr">showHideTransition</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">          <span class="attr">allowToastClose</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">hideAfter</span>: <span class="number">3000</span>,</span><br><span class="line">          <span class="attr">stack</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">position</span>: <span class="string">&#x27;top-right&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="attr">bgColor</span>: <span class="string">&#x27;#444444&#x27;</span>,</span><br><span class="line">          <span class="attr">textColor</span>: <span class="string">&#x27;#eeeeee&#x27;</span>,</span><br><span class="line">          <span class="attr">textAlign</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">loaderBg</span>: <span class="string">&#x27;#006eff&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> webSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 日期转化器 （一）</title>
      <link href="/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="骚气的前言"><a href="#骚气的前言" class="headerlink" title="骚气的前言"></a>骚气的前言</h4><p>SpringBoot @RequestBody 在写接口的时候用这个注解接收对象，哇塞，简直好用的一批，@RequestBody 转换对象时使用的是<span id="more"></span>Jackson。</p><p>jackson千好万好，但是居然不支持”yyyy-MM-dd HH:mm:ss”这个格式，大佬，您都支持”yyyy-MM-dd HH:mm:ss.SSSZ”这个格式了，为嘛不支持一下CN常用的格式嘞。咳咳，吐槽的话不多说，毕竟人家是大佬。那么接下来就是为RequestBody做一个自定义的日期转换器了。</p><p>现在博主使用的方式是进行局部转换，还没找到不加注解就转换的好方法，找到后后期会更新。好了废话有点多，接下来就上代码：</p><p>顺带一提，使用@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”, timezone=”GMT+8”)这个方式也不可行，只要是用@RequestBody，好像就和这个格式绝缘一样，当然也有可能是博主使用有问题，有问题的话欢迎指出。</p><h4 id="正儿八经的局部转换方法"><a href="#正儿八经的局部转换方法" class="headerlink" title="正儿八经的局部转换方法"></a>正儿八经的局部转换方法</h4><p> 博主目前使用的是@JsonDeserialize和@JsonSerialize。首先需要一个类来继承JsonDeserializer,然后重写里面的deserialize方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/3/7/16:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note</span> 在接口接受对象使用<span class="doctag">@RequestBody</span>时,在对象中Date类型的变量上添加注解<span class="doctag">@JsonDeserialize</span>(using = DateJsonDeserializer.class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat simpleDateFormat = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        String time = jsonParser.getText();</span><br><span class="line">        time = time.trim();</span><br><span class="line">        <span class="keyword">if</span> (time.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// 可能是时间戳</span></span><br><span class="line">            Long _time = Long.valueOf(String.valueOf(jsonParser.getText()));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(_time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是在对象中添加注解，方式很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonDeserialize(using = DateJsonDeserializer.class)</span></span><br><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好，至此大工当然没有告成。</p><h4 id="差点忘记的全局配置方法"><a href="#差点忘记的全局配置方法" class="headerlink" title="差点忘记的全局配置方法"></a>差点忘记的全局配置方法</h4><p>上述的代码只是对@RequestBody进行了处理，让Date的转换可以按照我们自定义的方式进行。接下来就是让不使用RequestBody的接口接受参数时进行时间的转换了。</p><p>  全局配置的处理方式是实现Converter接口，重写convert方法，然后进行全局配置。代码在这：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/3/6/16:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String time = (String) o;</span><br><span class="line">        time = time.trim();</span><br><span class="line">        <span class="keyword">if</span> (time.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// 可能是时间戳</span></span><br><span class="line">            Long _time = Long.valueOf(String.valueOf(o));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(_time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后进行全局配置，全局配置需要继承WebMvcConfigurationSupport类，然后重写addFormatters方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcCloudConfigure</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> DateConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好的，到这里才是大功告成，是不是很简(炸)单(裂)。哎，一把心酸类，踩了两天的坑，终于有点样子了。继续学习，加油！</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> DateConverter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi</title>
      <link href="/;categories/poi/"/>
      <url>/;categories/poi/</url>
      
        <content type="html"><![CDATA[<h2 id="操作excel"><a href="#操作excel" class="headerlink" title="操作excel"></a>操作excel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工作簿</span></span><br><span class="line">       HSSFWorkbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">       <span class="comment">// 创建表</span></span><br><span class="line">       Sheet sheet = hssfWorkbook.createSheet();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>合并单元格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CellRangeAddress cellAddresses = <span class="keyword">new</span> CellRangeAddress(startRow,endRow,startCell,endCell);</span><br><span class="line">sheet.addMergedRegion(cellAddresses);</span><br></pre></td></tr></table></figure><ul><li>设置默认列宽</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sheet.setdefaultColumnWidt(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><ul><li><p>设置样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 设置样式</span></span><br><span class="line">        HSSFCellStyle style = hssfWorkbook.createCellStyle();</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 左右居中</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 上下居中</span></span><br><span class="line">cell.setCellStyle(style);</span><br></pre></td></tr></table></figure></li><li><p>读取图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片输出流</span></span><br><span class="line">ByteImageOutStream byteOut = <span class="keyword">new</span> ByteImageOutStream();</span><br><span class="line"><span class="comment">// 读取图片</span></span><br><span class="line">BufferedImage image = ImageIo.read(<span class="keyword">new</span> File(path));</span><br><span class="line"><span class="comment">// 将图片写入输出流</span></span><br><span class="line">ImageIo.write(image,<span class="string">&quot;png&quot;</span>,byteOut);</span><br></pre></td></tr></table></figure></li><li><p>插入图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 进阶 -jvm</title>
      <link href="/;categories/java-%E8%BF%9B%E9%98%B6-jvm/"/>
      <url>/;categories/java-%E8%BF%9B%E9%98%B6-jvm/</url>
      
        <content type="html"><![CDATA[<p>生成内存溢出快照：在runConfigurations中的VM arguments添加：<code>-XX:+HeapDumpOnOutOfMemoryError </code>。 </p><p>-Xss规定了每个线程堆栈的大小。一般情况下256K是足够了。影响了此进程中并发线程数大小。</p><p>-Xms初始的Heap的大小。</p><p>-Xmx最大Heap的大小。</p><p>在很多情况下，-Xms和-Xmx设置成一样的。这么设置，是因为当Heap不够用时，会发生内存抖动，影响程序运行稳定性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux sendEmail 踩坑记 （一）</title>
      <link href="/;categories/linux%20sendEmail%20%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/linux%20sendEmail%20%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>linux 可以直接发送email，需要借助sendEmail工具，废话少说直接上代码</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 下载安装包</span><br><span class="line">wget http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar zxf sendEmail-v1.56.tar.gz</span><br><span class="line"></span><br><span class="line"># 进入解压目录</span><br><span class="line">cd /usr/src/sendEmail-v1.56/</span><br><span class="line"></span><br><span class="line">#复制程序到指定目录</span><br><span class="line">cp -a sendEmail /usr/local/bin/</span><br><span class="line"></span><br><span class="line">#给执行权限</span><br><span class="line">chmod +x /usr/local/bin/sendEmail</span><br><span class="line"></span><br><span class="line">#安装组件</span><br><span class="line">yum install perl-Net-SSLeay perl-IO-Socket-SSL -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sendEmail-参数"><a href="#sendEmail-参数" class="headerlink" title="sendEmail 参数"></a>sendEmail 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sendEmail -h</span><br><span class="line"></span><br><span class="line">-f 表示发送者的邮箱</span><br><span class="line">-t 表示接收者的邮箱</span><br><span class="line">-s 表示SMTP服务器的域名或者ip</span><br><span class="line">-u 表示邮件的主题</span><br><span class="line">-xu 表示SMTP验证的用户名</span><br><span class="line">-xp 表示SMTP验证的密码(注意,这个密码貌似有限制,例如我用d!5neyland就不能被正确识别)</span><br><span class="line">-m 表示邮件的内容</span><br><span class="line">-cc 表示抄送</span><br><span class="line">-bcc 表示暗抄送</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="发送邮件测试"><a href="#发送邮件测试" class="headerlink" title="发送邮件测试"></a>发送邮件测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#发送邮件</span><br><span class="line">/usr/local/bin/sendEmail -f hhh@163.com -t 123456789@qq.com -s smtp.163.com -u &quot;测试&quot;-xu hhh@163.com -xp @453163.com -m &quot;test-1234567890&quot;</span><br></pre></td></tr></table></figure><p> 发送邮箱测试时会报如下错误，原因是perl版本不兼容</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    *******************************************************************</span><br><span class="line"> Using the default of SSL_verify_mode of SSL_VERIFY_NONE for client</span><br><span class="line"> is deprecated! Please set SSL_verify_mode to SSL_VERIFY_PEER</span><br><span class="line"> possibly with SSL_ca_file|SSL_ca_path for verification.</span><br><span class="line"> If you really don&#x27;t want to verify the certificate and keep the</span><br><span class="line"> connection open to Man-In-The-Middle attacks please set</span><br><span class="line"> SSL_verify_mode explicitly to SSL_VERIFY_NONE in your application.</span><br><span class="line">*******************************************************************</span><br><span class="line">  at /usr/local/bin/sendEmail line 1906.</span><br><span class="line">invalid SSL_version specified at /usr/share/perl5/vendor_perl/IO/Socket/SSL.pm line 444.</span><br></pre></td></tr></table></figure><p> 解决方案，sendEmail 增加两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o tls=no    // sendEmail -h 查看帮助，解释是 -o tls=&lt;auto|yes|no&gt;         -o fqdn=FQDN  即不验证 ssl</span><br></pre></td></tr></table></figure><p>完整的正确命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sendEmail -f hhh@163.com -t 123456789@qq.com -s smtp.163.com -u &quot;测试&quot;-xu hhh@163.com -xp @453163.com -m &quot;正文&quot; -o tls = no</span><br></pre></td></tr></table></figure><p>上述问题还有解决perl版本冲突的方案，博主还没测试，等测试可用后再进行更新。<br>执行发送命令时需要注意 -xp 的密码并不是发送邮箱的本身密码，以163邮箱为例，需要开启smtp等权限，然后生成授权码，该密码为生成的授权码。设置授权码详情整理后更新</p><hr><p>参考网址：<a href="http://www.mamicode.com/info-detail-2404622.html">http://www.mamicode.com/info-detail-2404622.html</a><br>参考网址：<a href="https://blog.csdn.net/ithomer/article/details/83514232">https://blog.csdn.net/ithomer/article/details/83514232</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sendEmail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本学习笔记 （一）</title>
      <link href="/;categories/shell%20%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/shell%20%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>  日常补差中，今日份补差是shell脚本。简单的一些shell会写，但是为了加深，再次进行学习，希望能进一步了解shell。那么今天就从最简单的变量开始。<br>  <span id="more"></span><br>  首先是标识脚本语言<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span>  </span><br></pre></td></tr></table></figure></p><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 踩坑记 （一）</title>
      <link href="/;categories/mysql%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/mysql%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>今天某贱贱的同事，给我出了个题,关于sql查询的题，那么直接开始吧。</p><span id="more"></span><ul><li>题目：</li></ul><table><thead><tr><th>id</th><th>userid</th><th>start</th><th>end</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>18</td><td>28</td></tr><tr><td>2</td><td>2</td><td>34</td><td>44</td></tr><tr><td>3</td><td>2</td><td>24</td><td>44</td></tr><tr><td>获得从开始时间(start)到结束时间(end)的总时长,重复时间按一个时间算。</td><td></td><td></td><td></td></tr></tbody></table><ul><li>代码解答:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE test() BEGIN</span><br><span class="line">DECLARE</span><br><span class="line">oneStart INT;</span><br><span class="line">DECLARE</span><br><span class="line">oneEnd INT;</span><br><span class="line">DECLARE</span><br><span class="line">twoStart INT;</span><br><span class="line">DECLARE</span><br><span class="line">twoEnd INT;</span><br><span class="line">DECLARE</span><br><span class="line">count INT default 0;</span><br><span class="line">-- DECLARE</span><br><span class="line">-- start_ INT;</span><br><span class="line">-- DECLARE</span><br><span class="line">-- end_ INT;</span><br><span class="line">declare done int default false;</span><br><span class="line">DECLARE</span><br><span class="line">my_test CURSOR FOR ( SELECT START, END FROM ruizhi WHERE userid = 2 ORDER BY START ASC );</span><br><span class="line">declare continue HANDLER for not found set done = true;</span><br><span class="line">OPEN my_test;</span><br><span class="line">FETCH  my_test INTO oneStart,oneEnd;</span><br><span class="line">read_loop:loop</span><br><span class="line">FETCH  my_test INTO twoStart,twoEnd;</span><br><span class="line">if done then</span><br><span class="line">leave read_loop;    # 跳出游标循环</span><br><span class="line"> end if;</span><br><span class="line">SELECT twoStart,twoEnd;</span><br><span class="line">IF</span><br><span class="line">twoStart &lt; oneStart THEN</span><br><span class="line"></span><br><span class="line">SET oneStart = twoStart; </span><br><span class="line">END IF; -- 如果第一行的结束小于第二行的开始就记录第一行的结果。并更新start为第二行。</span><br><span class="line">IF</span><br><span class="line">oneEnd &lt; twoStart THEN </span><br><span class="line">SET count = count + ( oneEnd - oneStart ); </span><br><span class="line">SET oneStart = twoStart; </span><br><span class="line">SET oneEnd = twoEnd;</span><br><span class="line">ELSEIF twoEnd &gt; oneEnd THEN-- 第二行开始时间包含在第一行，那么对比结束时间</span><br><span class="line">SET oneEnd = twoEnd; </span><br><span class="line">END IF ;</span><br><span class="line">-- SELECT start_,end_,count;</span><br><span class="line"></span><br><span class="line">end loop;</span><br><span class="line">SET count = count + ( oneEnd - oneStart ); </span><br><span class="line">CLOSE my_test ;</span><br><span class="line">SELECT count;</span><br><span class="line">END // </span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call test();</span><br><span class="line">oEnd &gt; oneEnd THEN-- 第二行开始时间包含在第一行，那么对比结束时间</span><br><span class="line">SET oneEnd = twoEnd; </span><br><span class="line">END IF ;</span><br><span class="line">-- SELECT start_,end_,count;</span><br><span class="line"></span><br><span class="line">end loop;</span><br><span class="line">SET count = count + ( oneEnd - oneStart ); </span><br><span class="line">CLOSE my_test ;</span><br><span class="line">SELECT count;</span><br><span class="line">END // </span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call test();</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>代码解析<ul><li>声明：declare<ul><li>declare data data_type。声明变量，declare使用时需要注意放在BEGIN …END 之间，并且是所有其他语句之前。</li></ul></li></ul></li><li>浮标：cursor<ul><li>创建浮标：<ul><li>declare cur cursor for select * from test;</li></ul></li><li>打开浮标<ul><li>open cur；</li></ul></li><li>获取浮标当前位置的值并赋值给变量，浮标位置前进一位<ul><li>fetch cur into data；</li></ul></li><li>开启浮标循环<ul><li>read_loop:loop;</li></ul></li><li>退出浮标循环<ul><li>leave read_loop;</li></ul></li><li>浮标循环实例  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> declare done int default false; --设置浮标控制变量</span><br><span class="line"> DECLARE</span><br><span class="line">     my_test CURSOR FOR ( SELECT START, END FROM ruizhi WHERE userid = 2 ORDER BY START ASC );--创建浮标</span><br><span class="line"> declare continue HANDLER for not found set done = true;--浮标查询结束后返回。</span><br><span class="line"> open my_test; --打开浮标</span><br><span class="line"> read_loop:loop;--开启浮标循环</span><br><span class="line">     fetch my_test into data;--获取浮标当前位置内容并前进一。</span><br><span class="line">     if done then</span><br><span class="line">         leave read_loop;--退出loop循环</span><br><span class="line">    end if；</span><br><span class="line">end loop；--使用loop，必须要关闭。</span><br><span class="line">close my_test;--关闭浮标</span><br></pre></td></tr></table></figure></li></ul></li><li>while 循环  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while boolean do</span><br><span class="line">    业务</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure></li><li>if 语句  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if <span class="type">boolean</span> <span class="keyword">then</span> </span><br><span class="line">业务，这里要注意写法和java相同，每行都要以&quot;;&quot;结尾</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">业务 同上</span><br><span class="line"><span class="keyword">end</span> if；</span><br></pre></td></tr></table></figure></li><li>存储过程<ul><li>CREATE PROCEDURE test()  begin end;</li><li>开始要进行结束符转化 delimiter //  – 设置结尾符为”//“</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msyql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 从0学起 （一）</title>
      <link href="/;categories/nginx/"/>
      <url>/;categories/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><h3 id="nginx-是什么"><a href="#nginx-是什么" class="headerlink" title="nginx 是什么"></a>nginx 是什么</h3><ul><li>nginx是一个高性能的Http和反向代理的服务器，具有占内存小、并发能力强的特点</li><li>nginx是专为性能优化而开发的，非常注重效率，能经受高负载的考验。有报告生命能支持高达50000个并发连接数。</li></ul></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><ul><li><p>正向代理</p><blockquote><p>​        如果把互联网比做一个巨大的资源库，而局域网内的客户端想要访问Internet，就需要通过代理服务器进行访问，这个过程就是正向代理。</p></blockquote><p>​        简单来说，就是我们的客户端（浏览器）配置代理服务器，通过代理服务器访问Internet就是正向代理。</p></li><li><p>反向代理</p></li></ul><blockquote><p>​        反向代理，客户端对代理是无感知的，客户端不知道服务器是否进行了代理。        客户端进行反向代理服务器，反向代理服务器选择目标服务器，获取到数据后，将数据返回给客户端，此时目标服务器和代理服务器暴露出来的就是代理服务器这一个服务器，隐藏了目标服务器的真实Ip地址。</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>​        单个服务器解决不了，就增加服务器数量，然后通过代理服务器反向代理多个目标服务器。</p><p>​        然后代理服务器将请求多个请求分发到目标服务器，这个过程也就是负载均衡。</p></blockquote><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><blockquote><p>​    为了加快网站的解析速度，把动态页面和静态页面由补同的服务器来解析，加快解析速度，降低单个服务器的压力</p></blockquote><h2 id="高可用的集群"><a href="#高可用的集群" class="headerlink" title="高可用的集群"></a>高可用的集群</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 日期转化器 （二）</title>
      <link href="/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/;categories/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="啊，依旧骚气的前言"><a href="#啊，依旧骚气的前言" class="headerlink" title="啊，依旧骚气的前言"></a>啊，依旧骚气的前言</h4><p> 咳咳，接长达一天间隔的上一篇，终于在我不懈的努力下，可以在使用RequestBody时不加注解的办法，被公司大佬完成了，嗯，完美。<br> <span id="more"></span></p><h4 id="全局配置（哎呀，怎么能有这么正经的标题）"><a href="#全局配置（哎呀，怎么能有这么正经的标题）" class="headerlink" title="全局配置（哎呀，怎么能有这么正经的标题）"></a>全局配置（哎呀，怎么能有这么正经的标题）</h4><p>  大部分代码其实和上一篇相同，只不过是在全局配置的时候需要对ObjectMapper进行部分值的修改，大体意思就是修改Jackson的对象映射，听起来是不是很简（懵）单（逼）。懵就对了，我也很懵。<br>  首先需要继承SimpleDateFormat，然后重写里面的方法，代码如下：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDateFormat</span> <span class="keyword">extends</span> <span class="title">SimpleDateFormat</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DateFormat FORMAT_DATE_TIME = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DateFormat FORMAT_DATE = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果都是数字则是long</span></span><br><span class="line">        <span class="keyword">if</span> (source.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(Long.parseLong(source));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是yyyy-MM-dd格式</span></span><br><span class="line">        <span class="keyword">if</span> (source.matches(<span class="string">&quot;^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;$&quot;</span>)) &#123;</span><br><span class="line">            Date date = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                date = FORMAT_DATE.parse(source);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> date;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        <span class="keyword">if</span> (source.matches(<span class="string">&quot;^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;$&quot;</span>)) &#123;</span><br><span class="line">            Date date = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                date = FORMAT_DATE_TIME.parse(source);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> date;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuffer <span class="title">format</span><span class="params">(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FORMAT_DATE_TIME.format(date, toAppendTo, fieldPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Date convert = convert(source);</span><br><span class="line">        <span class="keyword">return</span> convert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source, ParsePosition pos)</span> </span>&#123;</span><br><span class="line">        Date convert = convert(source);</span><br><span class="line">        <span class="keyword">return</span> convert;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>   然后在上篇博客提到的继承WebMvcConfigurationSupport的WebMvcCloudConfigure类中，重写extendMessageConverters()方法，就可以了：<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (HttpMessageConverter httpMessageConverter : converters) &#123;</span><br><span class="line">           <span class="keyword">if</span> (httpMessageConverter <span class="keyword">instanceof</span> MappingJackson2HttpMessageConverter) &#123;</span><br><span class="line">               MappingJackson2HttpMessageConverter conver = (MappingJackson2HttpMessageConverter) httpMessageConverter;</span><br><span class="line">               ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">               <span class="comment">// 统一返回数据的输出风格</span></span><br><span class="line">               objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">               objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">               objectMapper.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>));</span><br><span class="line">               objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">               objectMapper.setDateFormat(<span class="keyword">new</span> DefaultDateFormat());</span><br><span class="line">               conver.setObjectMapper(objectMapper);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>   在这里提一下，如果你觉得写两个类很麻烦，那么细心的你有没有发现上一篇的DateConverter类和这篇中的DefaultDateFormat类中有相似的地方呢，没错，这个类了面也写了convert()这个方法，虽然是自己写的，但是没关系，我们实现一下Converter接口，然后convert方法就变成重写啦，之后WebMvcCloudConfigure的addFormatters()方法稍作修改，两个类就可以合二为一，就可以只用这篇中的类啦，是不是有剩了好大的代码量呢。<br>     当然你也可以根据需要，依旧采用上篇的方式。改动如下：<br>    DefaultDateFormat类改动：<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDateFormat</span> <span class="keyword">extends</span> <span class="title">SimpleDateFormat</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>WebMvcCloudConfigure类改动：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addConverter(<span class="keyword">new</span> DefaultDateFormat());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>好的， 历经三天的远征，终于把坑填好了，哎，效率果然低了。没办法慢慢学吧，加油！<br>漫漫长夜，又水完一篇博客，舒服。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> DateConverter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/;categories/hello-world/"/>
      <url>/;categories/hello-world/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的天呢，终于弄好了，纪念一下</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
