<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>跑通SpingBoot+dubbo3+zookeeper</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/%E8%B7%91%E9%80%9ASpingBoot+dubbo3+zookeeper/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/%E8%B7%91%E9%80%9ASpingBoot+dubbo3+zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="跑通SpingBoot-dubbo3-zookeeper"><a href="#跑通SpingBoot-dubbo3-zookeeper" class="headerlink" title="跑通SpingBoot+dubbo3+zookeeper"></a>跑通SpingBoot+dubbo3+zookeeper</h1><h2 id="先安装并启动zookeeper"><a href="#先安装并启动zookeeper" class="headerlink" title="先安装并启动zookeeper"></a>先安装并启动zookeeper</h2><ol><li>去zookeeper下载网站进行下载<a href="https://archive.apache.org/dist/zookeeper/">https://archive.apache.org/dist/zookeeper/</a></li><li>博主下载的是3.4.9</li><li>解压并启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.4.9.bin.tar.gz </span><br><span class="line"> mv apache-zookeeper-3.4.9 zookeeper-3.4.9</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 启动</span></span><br><span class="line"> cd zookeeper-3.4.9/conf</span><br><span class="line"> ll</span><br></pre></td></tr></table></figure><img src="https://blog.excedy.top/images/imgs20220527183621.png"><br>进入conf目录下后, 可以看到zoo_sample.cfg, 需要先复制一份,不然启动会报错找不到zoo.cfg<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>然后修改一下zoo.cfg中的存储目录, 将默认的dataDir修改为zookeeper-3.4.9下面的data目录下, data需要新建<br><img src="https://blog.excedy.top/images/imgs20220527184023.png"></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 回到zookeeper-3.4.9目录, 因为在conf目录下,所以直接返回</span></span><br><span class="line">cd ..</span><br><span class="line">mkdir data</span><br><span class="line">cd bin</span><br></pre></td></tr></table></figure><p><strong>开始启动zookeeper服务端</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>启动成功后会直接后台启动, 如下即为启动成功<br><img src="https://blog.excedy.top/images/imgs20220527184455.png"></p><p><strong>测试是否成功</strong><br>启动zookeeper客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure><p>启动成功后输入, 看到zookeeper即为启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure><p><img src="https://blog.excedy.top/images/imgs20220527184720.png"></p><p><em>博主因为启动了后面的dubbo-admin,所以有dubbo的目录,这不重要, 初次启动只要有zookeeper就行</em></p><h2 id="安装dubbo-admin进行dubbo监控"><a href="#安装dubbo-admin进行dubbo监控" class="headerlink" title="安装dubbo-admin进行dubbo监控"></a>安装dubbo-admin进行dubbo监控</h2><p>安装dubbo-admin, 从github上clone<a href="https://github.com/apache/dubbo-admin.git">duboo-admin</a></p><ol><li>下载<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/dubbo-admin.git</span><br><span class="line">cd dubbo-admin</span><br></pre></td></tr></table></figure></li></ol><p><em>注意这里要先去ui里运行一下npm install</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd dubbo-admin-ui</span><br><span class="line">npm install </span><br><span class="line"><span class="meta">#</span><span class="bash"> mac 用户记得加sudo, 不然会报错</span></span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><ol start="2"><li>打包并启动<br>回到dubbo-admin目录, 使用maven打包一下, 记得要跳过测试, 不然会很慢<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>进入<code>dubbo-amdin/dubbo-admin-server/src/main/resources 修改</code>application.properties<code>, 新增</code>server.port=8081`<br>这里必须要改一下端口号, 因为zookeeper启动会占用8080<br>然后启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn --projects dubbo-admin-server spring-boot:run</span><br></pre></td></tr></table></figure>访问<code>localhost:8081</code><br><img src="https://blog.excedy.top/images/imgs20220529164717.png"><br>登录, 账户和密码都是root, dubbo-admin默认的密码,可以在application.properties中进行修改<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1>创建一个多模块的项目, 格式如下:<br>分别为:<br>接口模块<br>提供者模块<br>消费者模块<h2 id="创建统一接口"><a href="#创建统一接口" class="headerlink" title="创建统一接口"></a>创建统一接口</h2>新建一个模块, pom设置格式<code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>其他的什么jar都不需要引入,<br><img src="https://blog.excedy.top/images/imgs20220529213635.png"><br>新建接口类,代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHello</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 打招呼     * <span class="doctag">@param</span> name 名字  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 名字  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h2><h3 id="pom"><a href="#pom" class="headerlink" title="pom:"></a>pom:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>3.0.8<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-rpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-rpc-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-configcenter-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-metadata-report-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-config-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-remoting-netty4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-serialization-hessian2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件:"></a>yml配置文件:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span>  </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">  <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-test-provider</span>  </span><br><span class="line">  <span class="attr">protocol:</span>  </span><br><span class="line">  <span class="comment"># 协议 dubbo</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">20881</span>  </span><br><span class="line">  <span class="attr">registry:</span>  </span><br><span class="line">  <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span>  </span><br><span class="line">  <span class="attr">config-center:</span>  </span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span>  </span><br><span class="line">  <span class="attr">metadata-report:</span>  </span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span>  </span><br><span class="line">  <span class="attr">scan:</span>  </span><br><span class="line">  <span class="comment"># 需要扫描的包, 扫描的是接口模块的接口</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.exceedy.dubbotest.dubbotestinterface.service</span></span><br></pre></td></tr></table></figure></li></ol><p><em>消费者和提供者pom和配置文件(除服务名称外)均一致</em></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li>在启动类中增加<code>EnableDubbo</code>注解,然后让提供者进入等待状态<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableDubbo</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);  </span><br><span class="line">        System.out.println(<span class="string">&quot;dubbo provider start&quot;</span>);  </span><br><span class="line">        <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>).await();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现SayService<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// springBoot的注解</span></span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="comment">// 版本更新到3.0.8后, dubbo原本的@Service标记为了删除, 所以使用新注解</span></span><br><span class="line"><span class="comment">// DubboService 意味着暴露服务</span></span><br><span class="line"><span class="meta">@DubboService</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloImpl</span> <span class="keyword">implements</span> <span class="title">SayHello</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动后刷新dubbo-admin界面<br><img src="https://blog.excedy.top/images/imgs20220529214457.png"><br>看到服务已经注册,说明提供者已经完成</li></ol><h2 id="创建服务消费者"><a href="#创建服务消费者" class="headerlink" title="创建服务消费者"></a>创建服务消费者</h2><p>消费者的配置文件和pom直接copy即可, 将yml文件中的dubbo.application.name=dubbo-test-provider 改为dubbo.application.name=dubbo-test-consumers<br>直接修改启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumersApplication</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@DubboReference</span>  </span><br><span class="line">    SayHello sayHello;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(ConsumersApplication.class, args);  </span><br><span class="line">        ConsumersApplication bean = run.getBean(ConsumersApplication.class);  </span><br><span class="line">        String result = bean.doSayHi(<span class="string">&quot;张三&quot;</span>);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSayHi</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> sayHello.sayHello(name);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog.excedy.top/images/imgs20220529215232.png"><br>返回并打印 “Hello 张三”, 调用成功.<br>至此跑通了springboot + dubbo + zookeeper;</p><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><p>需要注意的是</p><ol><li>不知道是否是3.0.8版本的原因, 在注解<code>@EnableDubbo(scanBasePackages = &#123;&quot;com.exceedy.dubbotest.dubbotestinterface.service&quot;&#125;)</code> 中加入扫描包启动后一直注册不了,只要在配置文件中配置了才能注册到注册中心</li><li>3.0.8版的dubbo只支持zookeeper3.4.x系列版本, 所以安装时要注意, 并且zookeeper3.4.x系列版本只支持jdk8, 所以jdk也要注意不能太高<br>ps: 图片中用的是3.7.1版本,就是因为先安装的zookeeper, 不知道dubbo不支持,所以用成了3.7.1, 而想跑通就必须先安装zookeeper, 后面博主又换成了3.4.9, 唉,都是泪哇</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql在列一为空时返回列2</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mysql%E5%9C%A8%E5%88%97%E4%B8%80%E4%B8%BA%E7%A9%BA%E6%97%B6%E8%BF%94%E5%9B%9E%E5%88%972/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mysql%E5%9C%A8%E5%88%97%E4%B8%80%E4%B8%BA%E7%A9%BA%E6%97%B6%E8%BF%94%E5%9B%9E%E5%88%972/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>如果一个列的结果为空，那么就查询另一列（表）的数据<br>举例： 有两张表，表1（table1) 和 表2（table2），数据如下：<br>table1:<br>| id  | name |<br>| — | —- |<br>| 1   | 张三 |<br>| 2   |      |<br>table2:<br>| id  | name | table_id |<br>| — | —- | ——– |<br>| 1   | 王五 | 1        |<br>| 2   | 李四 | 2        |<br>要求查询结果如下：<br>| id  | name |<br>| — | —- |<br>| 1   | 张三 |<br>| 2    |   李四   |</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>使用IFNULL();<br>如果第一个参数为空，那么返回第二个参数</p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>思路： 将两个表关联起来， 通过函数判断，如果表一的name为空，那么返回表2的name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select t1.id as id, ifnull(t1.name, t2.name) as name from table1 as t1 left join table2 as t2 on t1.id = t2.table1.id;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用thumbor搭建CDN图片加载服务器</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E4%BD%BF%E7%94%A8thumbor%E6%90%AD%E5%BB%BACDN%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E4%BD%BF%E7%94%A8thumbor%E6%90%AD%E5%BB%BACDN%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="使用thumbor搭建CDN图片加载服务器"><a href="#使用thumbor搭建CDN图片加载服务器" class="headerlink" title="使用thumbor搭建CDN图片加载服务器"></a>使用thumbor搭建CDN图片加载服务器</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为云服务器的glibc版本普遍较低，最新版的Thumbor安装后需要升级glibc，而升级glibc时间久，危险性大，可能导致服务器直接无法登录，所以参用低版本的Thumbor，目前选用的版本为6.6</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h3><ol><li>先确认python版本，确保python版本为2.7<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220512120049.png"><br>再确保pip版本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220512120220.png"><br>如果 pip版本不对或未安装，那么使用下述方法进行安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure></li></ol><p><strong>正式安装thumbor</strong><br><code>pip install thumbor==6.7.0</code></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><strong>简单启动</strong><br><code>thumbor</code> 即可启动，默认端口8888，默认配置在python库中<br><strong>正式启动</strong><br>生成配置文件<br><code>thumbor-config -&gt; /etc/thumbor.conf</code><br>修改配置文件，避免其他人使用</p><ol><li>限制来源，只能过滤指定地址的图片<br><code>ALLOWED_SOURCES = [&#39;baidu.com&#39;,&#39;192.168.0.1&#39;] </code><br>这样便只有百度和192.168.0.1地址下的图片才能使用</li><li>加密<br>修改以下配置，即可进行加密<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SECURITY_KEY = &quot;123456&quot;</span><br><span class="line">ALLOW_UNSAFE_URL = False</span><br></pre></td></tr></table></figure>使用时需要使用 <code>thumbor -k 123456 https://baidu.com/test.img</code> 计算图片地址<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220512142331.png"><br>推荐使用方法1，既方便又确保图片来源</li></ol><p><strong>启动</strong><br><code>thumbor -p 8888 -c &#39;/etc/thumbor.conf&#39;</code></p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>一般云服务器不会大开端口的，而且直接使用端口不安全、不美观，所以使用nginx进行反向代理，并配置为https</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;                                    </span><br><span class="line">    <span class="attribute">server_name</span> your server;</span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>;                                                                      <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span>  /yourpath/fullchain.cer;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /yourpath/domain.key;  </span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;                             </span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;                                              </span><br><span class="line">    <span class="attribute">send_timeout</span> <span class="number">60s</span>; </span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>  http://127.0.0.1:8888;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">set</span> $fixed_destination $http_destination;</span><br><span class="line">            <span class="attribute">if</span> ( $http_destination <span class="regexp">~* ^https(.*)$</span> )&#123;</span><br><span class="line">                <span class="attribute">set</span> $fixed_destination http<span class="variable">$1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">### Set headers ####</span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host $http_host:$proxy_port;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For</span><br><span class="line">                $proxy_add_x_forwarded_for;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Destination $fixed_destination</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="进行图片裁剪"><a href="#进行图片裁剪" class="headerlink" title="进行图片裁剪"></a>进行图片裁剪</h3><ol><li>首先需要对图片地址进行处理，因为thumbor需要完全的url<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.encodeURIComponent(</span><br><span class="line">  &quot;https://github.com/thumbor/thumbor/raw/master/example.jpg&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>在浏览器控制台输出上述命令，就能得到编译后的url<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220510173713.png"><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">https%</span><span class="bash">3A%2F%2Fgithub.com%2Fthumbor%2Fthumbor%2Fraw%2Fmaster%2Fexample.jpg</span></span><br></pre></td></tr></table></figure></li><li>将得到的url与下面的地址进行拼接，即可得到裁剪后的图片，裁剪的大小由<code>w(宽)xh(高)</code>控制<br><code>http://localhost:8888/unsafe/wxh/</code><br>完整地址：<code>http://localhost:8888/unsafe/300x200/https%3A%2F%2Fgithub.com%2Fthumbor%2Fthumbor%2Fraw%2Fmaster%2Fexample.jpg</code><h3 id="图片反转"><a href="#图片反转" class="headerlink" title="图片反转"></a>图片反转</h3>将上面的像素大小改为负数，即可进行反转操作，w为负是左右反转，h为负是上下反转,都为负则是上下左右都反转<br><code>http://localhost:8888/unsafe/-300x-200/https%3A%2F%2Fgithub.com%2Fthumbor%2Fthumbor%2Fraw%2Fmaster%2Fexample.jpg</code><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3>使用filters过滤器进行图片压缩<br><code> max_bytes(number-of-bytes)</code><br><code>number-of-bytes</code>单位是字节</li></ol><p><code>http://localhost:8888/unsafe/-300x-200/filters:max_bytes(7500)/https%3A%2F%2Fgithub.com%2Fthumbor%2Fthumbor%2Fraw%2Fmaster%2Fexample.jpg</code><br>确实会进行压缩，但并不是压缩到指定大小，官方说的是指定大小，实际测试中并没有压缩到指定大小，测试使用的2M的图片，压缩到了500kb左右，效果已经很明显了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用htop查看内存</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">htop # 直观的看内存使用情况</span><br><span class="line">ps aux | grep name # 查看进程占用内存</span><br><span class="line">lsof -i : port # 查看端口使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>防火墙端口操作命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开端口号</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载</span></span><br><span class="line">firewall-cmd --reload  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有已开放的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports </span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭端口号</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式相关知识点</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/dubbo/" title="dubbo">dubbo</a></li><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/Zookeeper%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/" title="Zookeeper安装及启动">Zookeeper安装及启动</a></li><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/%E8%B7%91%E9%80%9ASpingBoot+dubbo3+zookeeper/" title="跑通SpingBoot+dubbo3+zookeeper">跑通SpingBoot+dubbo3+zookeeper</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE 安装、打包与运行</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Vue/VUE%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Vue/VUE%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装vue-cli, 以此进行打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构目录</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h2><ul><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashCode%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A831%E5%81%9A%E4%B9%98%E7%A7%AF/" title="HashCode为什么使用31做乘积">HashCode为什么使用31做乘积</a><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2></li><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap/" title="HashMap">HashMap</a></li><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%88%A0%E9%99%A4/" title="HashMap的插入、查询与删除">HashMap的插入、查询与删除</a><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2></li><li><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E4%B8%89%E6%A0%91/" title="二三树">二三树</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList数据结构学习</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ArrayList/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ArrayList/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p>ArrayList是什么? 正如其名, 是数组和列表. ArrayList底层是通过管理数组, 进行自动扩容和数据迁移.</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化的几种方式:</p><h3 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;test2&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">&quot;test1&quot;</span>,<span class="string">&quot;test2&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="特殊的有参数构造"><a href="#特殊的有参数构造" class="headerlink" title="特殊的有参数构造"></a>特殊的有参数构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Collections.nCopies(<span class="number">10</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line"><span class="comment">// [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">nCopies</span><span class="params">(<span class="keyword">int</span> n, T o)</span></span>&#123;...&#125;</span><br><span class="line">n: 是数组大小</span><br><span class="line">o: 是默认值是什么, 需要与范型对应</span><br></pre></td></tr></table></figure><h4 id="有参构造源码"><a href="#有参构造源码" class="headerlink" title="有参构造源码"></a>有参构造源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;  </span><br><span class="line">    elementData = c.toArray();  </span><br><span class="line"> <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)  </span></span><br><span class="line"> <span class="keyword">if</span> (elementData.getClass() != Object[].class)  </span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">// replace with empty array.  </span></span><br><span class="line"> <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bug-是什么"><a href="#bug-是什么" class="headerlink" title="bug 是什么?"></a>bug 是什么?</h4><p>因为Arrays.toList().toArray() 用的是: <code>Arrays.copyOf(elementData, size, (Class&lt;? extends T[]&gt;) a.getClass())</code><br>所以在构造方法中使用.toArray()时, 得到的可能不是Object[].class;<br>这个bug在jdk9之后被修复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jdk11</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;  </span><br><span class="line">    Object[] a = c.toArray();  </span><br><span class="line"> <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;  </span><br><span class="line">            elementData = a;  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            elementData = Arrays.copyOf(a, size, Object[].class);  </span><br><span class="line"> &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">// replace with empty array.  </span></span><br><span class="line"> elementData = EMPTY_ELEMENTDATA;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays.ArrayList.toArray(); 提供了Obejct[] 复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;  </span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOf(a, a.length, Object[].class);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList()"></a>Arrays.asList()</h3><p>Arrays.asList() 生成的ArrayList 为什么不可修改, 不可赋值给ArrayList,<br>因为Arrays.asList() 生成的是Arrays内部的类, 和ArrayList不同.</p><h3 id="普通插入"><a href="#普通插入" class="headerlink" title="普通插入"></a>普通插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e, Object[] elementData, <span class="keyword">int</span> s)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (s == elementData.length)  </span><br><span class="line">        elementData = grow();  </span><br><span class="line"> elementData[s] = e;  </span><br><span class="line"> size = s + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入是size自增 <code>size++</code><br>插入时判断容量, 是否需要扩容, 扩容时 oldLength + (oldLength &gt;&gt; 1)  就是 n + n / 2</p><h3 id="指定位置插入"><a href="#指定位置插入" class="headerlink" title="指定位置插入:"></a>指定位置插入:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;  </span><br><span class="line">    rangeCheckForAdd(index);  </span><br><span class="line"> modCount++;  </span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">int</span> s;  </span><br><span class="line"> Object[] elementData;  </span><br><span class="line"> <span class="keyword">if</span> ((s = size) == (elementData = <span class="keyword">this</span>.elementData).length)  </span><br><span class="line">        elementData = grow();  </span><br><span class="line"> System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,  s - index);  </span><br><span class="line"> elementData[index] = element;  </span><br><span class="line"> size = s + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入时判断index是否大于size<br>所以容量写10, size为1时, 在index为2的地方插入数据就会报错.<br>当小于size时, 会进行数据迁移, 然后将值插入到指定位置<br>删除, 也会数据迁移, 往回迁移</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(Object[] es, <span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">    modCount++;  </span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">int</span> newSize;  </span><br><span class="line"> <span class="keyword">if</span> ((newSize = size - <span class="number">1</span>) &gt; i)  </span><br><span class="line">        System.arraycopy(es, i + <span class="number">1</span>, es, i, newSize - i);  </span><br><span class="line"> es[size = newSize] = <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><ul><li><p>插入迁移<br>插入迁移, 是将插入的index位置向后挪一位, 使用System.arraycopy(), 将从当前index开始到末尾的数据copy到index + 1的位置, 即完成了数据迁移<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220328213123.png"></p></li><li><p>删除迁移<br>删除迁移正好相反, 将index + 1开始到末尾的数据copy到index位置, 然后将末尾的值赋空, 即完成了删除.</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2></li></ul><p><em>a,b,c,d,e,f,g</em>  插入到ArrayList中, 怎么让时间复杂度为O(1);</p><ul><li>思路<ul><li>使用扰动函数计算下标, 然后赋值</li></ul></li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Collections.nCopies(<span class="number">8</span>, <span class="string">&quot;0&quot;</span>));  </span><br><span class="line">String[] data = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>&#125;;  </span><br><span class="line"> <span class="keyword">for</span> (String s : data) &#123;  </span><br><span class="line">        list.set(s.hashCode() &amp; list.size() - <span class="number">1</span> , s);  </span><br><span class="line"> &#125;  </span><br><span class="line">    System.out.println(JSONArray.toJSONString(list));  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;0&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二三树</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E4%B8%89%E6%A0%91/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E4%B8%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二三树"><a href="#二三树" class="headerlink" title="二三树"></a>二三树</h1><h2 id="什么是二三树"><a href="#什么是二三树" class="headerlink" title="什么是二三树?"></a>什么是二三树?</h2><p>二三树是在二叉树树的基础上,允许一个节点可以有两个数据的树结构.</p><h2 id="二三树怎么来的"><a href="#二三树怎么来的" class="headerlink" title="二三树怎么来的?"></a>二三树怎么来的?</h2><p>因为使用链表的时间复杂度是线性增加的, 所以使用二叉树提高效率, 然而树会因为插入的数据一直是大于或小于根节点, 造成了节点一直增加在一个方向, 树便退化成了链表, 时间复杂度降低.</p><p>假设插入的值是<code>1,2,3,4,5,6,7</code>, 二叉树便会退化为链表</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220321224034.png"></p><p>而二三树怎么处理的呢?</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220321224001.png"></p><ul><li>  总结</li></ul><ol><li> 二三树的子节点都在同一层</li><li> 二三树可以有1-2个数, 当有第三个数的时候需要调整结构</li><li> 一个节点有1个数时, 可以有两个子节点</li><li> 一个节点有2个数时, 有三个子节点, 并且中间的子节点在节点两个数的范围内</li></ol><p>2- 节点, 一个数, 有两个子节点</p><p>3- 节点, 两个数, 有三个子节点</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除时, 当删除了一个数据, 会逆插入进行结构调整, 简单来时, 就是插入时结构怎么变化的, 删除时再变回去.</p><p>比如删除节点7</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220321224054.png"><br>怎么变过来, 就怎么变回去. 为什么第二步右侧的子节点变成了<code>5 6</code>. 还要继续变呢? 这就和二三树的上面描述的规律有关了: 二三树的子节点都在同一层, 所以第二步还需要继续改变结构</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引就比较简单了, 小于节点值的在左侧寻找, 大于的在右侧寻找, 在区间的在中间节点寻找</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的插入、查询与删除</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%88%A0%E9%99%A4/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods. * * <span class="doctag">@param</span> hash hash for key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none */</span><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,  </span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;  </span><br><span class="line">    <span class="comment">// 初始化, 为空就扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)  </span><br><span class="line">        n = (tab = resize()).length;  </span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)  </span><br><span class="line">        <span class="comment">// 计算下标, 下标位置值为空就新建</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);  </span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">        Node&lt;K,V&gt; e; K k;  </span><br><span class="line">        <span class="comment">// 当前节点的hash相同,key相同, 则记录</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;  </span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  </span><br><span class="line">            e = p;  </span><br><span class="line">            <span class="comment">// 如果当前节点是树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)  </span><br><span class="line">            <span class="comment">// 放到红黑树里</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);  </span><br><span class="line">        <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 放到链表中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;  </span><br><span class="line">                <span class="comment">// 下一个为空, 就记录并跳出</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);  </span><br><span class="line">                    <span class="comment">// 如果大于等于 7 就转化为树, 表容量如果小, 会扩容</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st  </span></span><br><span class="line">                        treeifyBin(tab, hash);  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">// 如果下一个和新加的相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;  </span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="comment">// 记录下一个, 继续循环</span></span><br><span class="line">                p = e;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key  </span></span><br><span class="line">             V oldValue = e.value;  </span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)  </span><br><span class="line">                e.value = value;  </span><br><span class="line">            afterNodeAccess(e);  </span><br><span class="line">            <span class="keyword">return</span> oldValue;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    ++modCount;  </span><br><span class="line">    <span class="comment">// 超过阈值就扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)  </span><br><span class="line">        resize();  </span><br><span class="line">    afterNodeInsertion(evict);  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入流程:</p><ol><li>先判断是否为空, 为空这扩容, 不为空, 则计算hash的下标就记录为p</li><li>如果p为空, 则直接插入</li><li>p不为空<ol><li>如果p与当前值相同, 则e指向p.</li><li>如果不相同且p为树节点, 则放入红黑树中</li><li>如果既不为空也不是树节点, 就循环放入链表中, 放入时判断链表长度, 超过8则转为红黑树, 转红黑树时, 如果集合大小没超过64则进行扩容.</li><li>更新值并返回</li></ol></li><li>计算容量是否超过阈值, 超过则扩容.</li></ol><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>扩容在上一节<a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap/" title="扩容机制">扩容机制</a>说过如何处理数据, 看一下源码怎么处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;  </span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;  </span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;  </span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="comment">// 超过最大上限, 阈值为最大int值</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;  </span><br><span class="line">            threshold = Integer.MAX_VALUE;  </span><br><span class="line">            <span class="keyword">return</span> oldTab;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 小于最大值, 则大小乘2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;  </span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)  </span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold  </span></span><br><span class="line"> &#125;  </span><br><span class="line">     <span class="comment">// 如果阈值大于0则记录</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold  </span></span><br><span class="line">         newCap = oldThr;  </span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults  </span></span><br><span class="line">         <span class="comment">// 初始化时用的默认值</span></span><br><span class="line">         newCap = DEFAULT_INITIAL_CAPACITY;  </span><br><span class="line">         newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 如果oldCap&lt;= 0 且 oldThr &gt; 0 时, 计算新的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;  </span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?  </span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 记录阈值</span></span><br><span class="line">    threshold = newThr;  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span>  </span><br><span class="line">    <span class="comment">// 初始化数组桶, 用来存key</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];  </span><br><span class="line">    table = newTab;  </span><br><span class="line">    <span class="comment">// 处理旧数组的数据</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;  </span><br><span class="line">            Node&lt;K,V&gt; e;  </span><br><span class="line">            <span class="comment">// 当前节点不为空</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="comment">//赋为空</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;  </span><br><span class="line">                <span class="comment">// 如果节点下个链值为空, 则计算当前节点的新位置</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)  </span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;  </span><br><span class="line">                    <span class="comment">// 如果当前节点为树节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)  </span><br><span class="line">                    <span class="comment">//拆分树节点</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);  </span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order  </span></span><br><span class="line">                    <span class="comment">// 链表有值</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;  </span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;  </span><br><span class="line">                    Node&lt;K,V&gt; next;  </span><br><span class="line">                    <span class="keyword">do</span> &#123;  </span><br><span class="line">                        <span class="comment">// 记录节点下个值</span></span><br><span class="line">                        next = e.next;  </span><br><span class="line">                        <span class="comment">// 如果 当前节点的hash&amp;旧长度 为0, 则位置不变</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; </span><br><span class="line">                            <span class="comment">// 为空则赋值 </span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)  </span><br><span class="line">                                loHead = e;  </span><br><span class="line">                            <span class="keyword">else</span>  </span><br><span class="line">                                <span class="comment">// 不为空则链接</span></span><br><span class="line">                                loTail.next = e;  </span><br><span class="line">                            loTail = e;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        <span class="keyword">else</span> &#123;  </span><br><span class="line">                        <span class="comment">// 放到新位置</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)  </span><br><span class="line">                                hiHead = e;  </span><br><span class="line">                            <span class="keyword">else</span>  </span><br><span class="line">                                hiTail.next = e;  </span><br><span class="line">                            hiTail = e;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);  </span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;  </span><br><span class="line">                        <span class="comment">// 原位置记录</span></span><br><span class="line">                        newTab[j] = loHead;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 新位置为 原位置+扩容量  </span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> newTab;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先判断大小是否超过最大值<ol><li>超过则不变, 阈值改为最大int值</li><li>没超过则大小与阈值 都乘2</li></ol></li><li>如果大小&lt;=0则阈值&gt;0 则将大小改为阈值</li><li>大小与阈值都&lt;=0, 使用默认值</li><li>新阈值没被赋值, 一般出现在2 , 则计算阈值</li><li>初始化数组</li><li>如果就数组为空, 则对就数组数据进行处理<ol><li>循环所有节点,<ol><li>如果当前节点不为空, 则将旧数组当前节点置空, 并判断节点下一个值是否存在<ol><li>如果不存在, 则直接计算当前节点的新坐标并赋值给新数组</li><li>如果当前节点是树节点, 则进行拆分</li><li>如果是链表, 则计算链表中所有值的位置<ol><li>如果当前值的hash&amp;旧大小 == 0 则新位置不变, 不等于0则计算新位置, 新位置有数据就链接.</li></ol></li></ol></li></ol></li></ol></li></ol><h3 id="链表转树"><a href="#链表转树" class="headerlink" title="链表转树"></a>链表转树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;  </span><br><span class="line">    <span class="comment">// 如果长度小于 64, 则扩容</span></span><br><span class="line"> <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)  </span><br><span class="line">        resize();  </span><br><span class="line">        <span class="comment">// 计算下标位置, 当前位置不为空</span></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">         <span class="comment">// 新建头树节点, 和尾树节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;  </span><br><span class="line"> <span class="keyword">do</span> &#123;  </span><br><span class="line">    <span class="comment">// 转化为树节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);  </span><br><span class="line">    <span class="comment">// 如果尾为空, 则赋值头</span></span><br><span class="line">    <span class="keyword">if</span> (tl == <span class="keyword">null</span>)  </span><br><span class="line">        hd = p;  </span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="comment">// 不为空, 则记录为下一个,并且记录到树节点中</span></span><br><span class="line">        p.prev = tl;  </span><br><span class="line">        tl.next = p;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="comment">// 尾部永远是上一个节点</span></span><br><span class="line">    tl = p;  </span><br><span class="line"> &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);  </span><br><span class="line">     <span class="comment">// 赋值</span></span><br><span class="line"> <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)  </span><br><span class="line">     <span class="comment">// 转化为红黑树</span></span><br><span class="line">        hd.treeify(tab);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果大小小于64 则扩容</li><li>如果节点不为空, 则新建头树节点和尾树节点, 用来记录顺序</li><li>当前节点转化为树节点, 如果尾为空, 则是头节点, 如果不为空, 则链接到尾节点, 并且记录到树节点中.</li><li>尾节点更新为当前节点</li><li>赋值, 如果不为空, 则转化为红黑树</li></ol><h3 id="树转链表"><a href="#树转链表" class="headerlink" title="树转链表"></a>树转链表</h3><p>因为链表转树的时候, 通过next记录了转化顺序, 因此, 只需要按照顺序替换为节点即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;  </span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;  </span><br><span class="line">    <span class="comment">// 替换为普通节点</span></span><br><span class="line">    Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);  </span><br><span class="line">    <span class="keyword">if</span> (tl == <span class="keyword">null</span>)  </span><br><span class="line">        hd = p;  </span><br><span class="line">    <span class="keyword">else</span> tl.next = p;  </span><br><span class="line">    tl = p;  </span><br><span class="line"> &#125;  </span><br><span class="line">    <span class="keyword">return</span> hd;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>遍历<ol><li>替换为普通节点</li><li>找到第一个</li><li>按照顺序链接</li></ol></li></ol><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">    Node&lt;K,V&gt; e;  </span><br><span class="line">    <span class="keyword">return</span> (e = getNode(key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Implements Map.get and related methods. * * <span class="doctag">@param</span> key the key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n, hash; K k;  </span><br><span class="line">    <span class="comment">// 判空及确认长度.</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;  </span><br><span class="line">        <span class="comment">// 通过扰动函数计算hash, 然后计算下标, 得到节点值</span></span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; (hash = hash(key))]) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 总是先判断第一个节点, 如果是, 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node  </span></span><br><span class="line">             ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  </span><br><span class="line">                <span class="keyword">return</span> first;  </span><br><span class="line">                <span class="comment">// 如果下一个不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="comment">// 第一个节点是否是树节点</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)  </span><br><span class="line">                <span class="comment">// 去树里找</span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);  </span><br><span class="line">            <span class="keyword">do</span> &#123;  </span><br><span class="line">                <span class="comment">//循环对比, 直到正确或最后一个</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;  </span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  </span><br><span class="line">                    <span class="keyword">return</span> e;  </span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);  </span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询比较简单:</p><ol><li>通过扰动函数计算hash, 然后hash&amp;长度计算下标</li><li>如果第一个是,直接返回, <ol><li>如果不是这看是否是树节点, 是就去红黑树就查询</li><li>不是, 就去查链表, 查到或直到最后</li></ol></li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">    Node&lt;K,V&gt; e;  </span><br><span class="line"> <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?  </span><br><span class="line">        <span class="keyword">null</span> : e.value;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Implements Map.remove and related methods. * * <span class="doctag">@param</span> hash hash for key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to match if matchValue, else ignored  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matchValue if true only remove if value is equal  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> movable if false do not move other nodes while removing  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,  </span></span></span><br><span class="line"><span class="params"><span class="function">     <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;  </span><br><span class="line">    <span class="comment">// 获取数组, 及长度, 计算下标</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;  </span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;  </span><br><span class="line">        <span class="comment">// 如果第一个就是, 则记录</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;  </span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  </span><br><span class="line">            node = p;  </span><br><span class="line">            <span class="comment">// 查询下一个</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="comment">//去树里找</span></span><br><span class="line">             <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)  </span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);  </span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">do</span> &#123;  </span><br><span class="line">                    <span class="comment">// 循环查询</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;  </span><br><span class="line">                        ((k = e.key) == key ||  </span><br><span class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;  </span><br><span class="line">                        node = e;  </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                    &#125;  </span><br><span class="line">                    p = e;  </span><br><span class="line">                 &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);  </span><br><span class="line">             &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||  </span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;  </span><br><span class="line">             <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)  </span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);  </span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (node == p)  </span><br><span class="line">                tab[index] = node.next;  </span><br><span class="line">             <span class="keyword">else</span> p.next = node.next;  </span><br><span class="line">             ++modCount;  </span><br><span class="line">             --size;  </span><br><span class="line">             afterNodeRemoval(node);  </span><br><span class="line">             <span class="keyword">return</span> node;  </span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除看起来比较简单:</p><ol><li>和查询一样的步骤, 查询到值, 然后记录要删除的节点及上一个节点</li><li>如果当前节点是树节点, 则去树中删除</li><li>如果当前节点等于上一个节点, 则说明是第一个节点, 直接将坐标指向下一个节点</li><li>如果都不是, 则将上一节点的下一节点指向当前节点的下一个节点.</li><li>之后调用删除数据</li></ol><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>遍历时, 是根据坐标排序的, 同时如果链表转为了红黑树, 会专门将根节点放在最前面, 然后树转为链表时, 根节点便成了第一个.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;(<span class="number">64</span>);</span><br><span class="line">    map.put(<span class="string">&quot;24&quot;</span>, <span class="string">&quot;Idx：2&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;46&quot;</span>, <span class="string">&quot;Idx：2&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;68&quot;</span>, <span class="string">&quot;Idx：2&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;29&quot;</span>, <span class="string">&quot;Idx：7&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;150&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;172&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;194&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;271&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;排序01：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">        System.out.print(key + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    map.put(<span class="string">&quot;293&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;370&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;392&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;491&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;590&quot;</span>, <span class="string">&quot;Idx：12&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\n\n排序02：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">        System.out.print(key + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    map.remove(<span class="string">&quot;293&quot;</span>);</span><br><span class="line">    map.remove(<span class="string">&quot;370&quot;</span>);</span><br><span class="line">    map.remove(<span class="string">&quot;392&quot;</span>);</span><br><span class="line">    map.remove(<span class="string">&quot;491&quot;</span>);</span><br><span class="line">    map.remove(<span class="string">&quot;590&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\n\n排序03：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">        System.out.print(key + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">排序<span class="number">01</span>：</span><br><span class="line"><span class="number">24</span> <span class="number">46</span> <span class="number">68</span> <span class="number">29</span> <span class="number">150</span> <span class="number">172</span> <span class="number">194</span> <span class="number">271</span> </span><br><span class="line"></span><br><span class="line">排序<span class="number">02</span>：</span><br><span class="line"><span class="number">24</span> <span class="number">46</span> <span class="number">68</span> <span class="number">29</span> <span class="number">271</span> <span class="number">150</span> <span class="number">172</span> <span class="number">194</span> <span class="number">293</span> <span class="number">370</span> <span class="number">392</span> <span class="number">491</span> <span class="number">590</span> </span><br><span class="line"></span><br><span class="line">排序<span class="number">03</span>：</span><br><span class="line"><span class="number">24</span> <span class="number">46</span> <span class="number">68</span> <span class="number">29</span> <span class="number">172</span> <span class="number">271</span> <span class="number">150</span> <span class="number">194</span> </span><br></pre></td></tr></table></figure>转红黑树的时候, 因为271是根节点, 所以被<code>moveRootToFront</code>放到了第一个<br>按照前面说的, 红黑树转链表, 会按顺序转, 为什么, 删除后顺序变了呢?不理解, 稍后学到再来更新</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>二分查找的重点在于: 缩小搜索范围.</p><p>在力扣刷了三个二分的题, 因为每次都是“抄”答案, 感觉并没有理解深刻, 看了一位大佬的题解, 茅塞顿开: 重点不在于模版, 而是解题思路, 二分查找的目的是缩小搜索范围, 那么看题确定思路至关重要!</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>   假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>   你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用left表示左坐标, right代表右坐标, mid代表每次查询的坐标<br>假设第一次查找得到的结果便是true, 那么就需要缩小rhgit的范围, 并且此次的结果可能是最终结果, 所以right 缩小为mid. 如果是false, 那么此次必定不是第一个错误版本, 因此left增加为 mid + 1.<br>那么, 怎么确定查到的一定是最终结果呢?  因为为false时, rhgit是固定不变的, 而left会一直靠近rhgit, 那么当他们相等时, 便是第一次错误版本.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> right = n;</span><br><span class="line"><span class="comment">// 相等时就是最终结果, 所以要小于</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">// 计算查询的坐标</span></span><br><span class="line"><span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line"><span class="keyword">boolean</span> bad = isBadVersion(mid);</span><br><span class="line"><span class="keyword">if</span> (bad) &#123;</span><br><span class="line"><span class="comment">// 是true right缩小为mid</span></span><br><span class="line">right = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此只要明白思路, 理清逻辑, 便成写出正确的算法, 而不是一味的套用模版, 力扣提供的模版只是提供了思路, 还是要对答案, 而不是抄答案.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap 数据结构-学习笔记</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>HashMap是线程不安全的, 不保证键值对的顺序, 允许null值和null键, 计算键的hash时 null键hash为0.</p><h2 id="简易的HashMap"><a href="#简易的HashMap" class="headerlink" title="简易的HashMap"></a>简易的HashMap</h2><p>散列存储：</p><blockquote><p>问题：将7个字符串存在数组中， 要求获取每个元素的时间复杂度是O(1)。 不能通过循环查询，而是通过数组ID（下标）获取</p></blockquote><p>解决思路：<br>通过计算字符串的<a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashCode%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A831%E5%81%9A%E4%B9%98%E7%A7%AF/" title="HashCode">HashCode</a>得到字符串的ID，但是HashCode计算结果太多、太大了，内存是没有这么大的空间的，也不会初始化这么大的数组，所以，将HashCode与数组长度做与运算，得到下标，下标重复的则连接起来<br>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; ss = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ss.add(<span class="string">&quot;lll&quot;</span>);</span><br><span class="line">ss.add(<span class="string">&quot;lll2&quot;</span>);</span><br><span class="line">ss.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">ss.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">ss.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">ss.add(<span class="string">&quot;javaScript&quot;</span>);</span><br><span class="line">ss.add(<span class="string">&quot;C#&quot;</span>);</span><br><span class="line"></span><br><span class="line">String[] tab = <span class="keyword">new</span> String[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String key :: ss) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = key.hashCode() &amp; (tab.length() - <span class="number">1</span>);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;key=%s, Idx=%d&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == tab[idx]) &#123;</span><br><span class="line">tab[idx] = key;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ss[idx] = ss[idx] + <span class="string">&quot;-&gt;&quot;</span> key;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(JSON.toJSONString(ss));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key: lll index: <span class="number">4</span></span><br><span class="line">key: lll2 index: <span class="number">6</span></span><br><span class="line">key: php index: <span class="number">0</span></span><br><span class="line">key: java index: <span class="number">2</span></span><br><span class="line">key: python index: <span class="number">4</span></span><br><span class="line">key: javaScript index: <span class="number">5</span></span><br><span class="line">key: C# index: <span class="number">0</span></span><br><span class="line">[<span class="string">&quot;php-&gt;C#&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;java&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;lll-&gt;python&quot;</span>,<span class="string">&quot;javaScript&quot;</span>,<span class="string">&quot;lll2&quot;</span>,<span class="keyword">null</span>]</span><br></pre></td></tr></table></figure><p>可以看出，已经完成了散列存储，下标重复的也连接起来了。<br>还有什么问题：</p><ol><li>碰撞过多</li><li>初始化是2的倍数，那么多少最为合适？</li><li>存储的数组越小碰撞越多，越大时间越久，时间和空间怎么取舍？</li><li>怎么扩容？扩容时旧数据怎么放到新数组中？copy？</li><li>链表越来越长怎么办？</li></ol><h2 id="怎么解决碰撞过多问题"><a href="#怎么解决碰撞过多问题" class="headerlink" title="怎么解决碰撞过多问题?"></a>怎么解决碰撞过多问题?</h2><h3 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h3><p>使用扰动函数，增加随机性，让碰撞减少<br>java8 HashMap使用的扰动函数</p><blockquote><p>static final int hash(Object key) {<br>    int h;<br>    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);<br>}</p></blockquote><p>怎么增加随机性：<br>让HashCode值右移16位，使高位与低位做[[运算符号#^5d87e1|异或]]运算，最后与数组长度做与运算</p><h3 id="实验扰动函数降低碰撞"><a href="#实验扰动函数降低碰撞" class="headerlink" title="实验扰动函数降低碰撞"></a>实验扰动函数降低碰撞</h3><blockquote><ol><li> 选取10万个单词词库</li><li> 定义128位长度的数组格子</li><li> 分别计算在扰动和不扰动下，10万单词的下标分配到128个格子的数量</li><li> 统计各个格子数量，生成波动曲线。如果扰动函数下的波动曲线相对更平稳，那么证明扰动函数有效果</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static int disturbanceHashIdx(String key, int size) &#123;  </span><br><span class="line">    int h;  </span><br><span class="line">    return ((h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)) &amp; (size -1);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void testDisturbance() &#123;  </span><br><span class="line">        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(16);  </span><br><span class="line">        for (String word : words) &#123;  </span><br><span class="line">            // 使用扰动函数  </span><br><span class="line">//            int idx = Disturbance.disturbanceHashIdx(word, 128);  </span><br><span class="line">// 不使用扰动函数</span><br><span class="line"> int idx = Disturbance.hashIdx(word, 128);  </span><br><span class="line">            if (map.containsKey(idx)) &#123;  </span><br><span class="line">                Integer count = map.get(idx);  </span><br><span class="line">                map.put(idx, ++count);  </span><br><span class="line">            &#125;else &#123;  </span><br><span class="line">                map.put(idx, 1);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(map.values());  </span><br><span class="line">        System.out.println(map.values().size());  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code>+ 结果    + 不使用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">819</span>, <span class="number">830</span>, <span class="number">767</span>, <span class="number">845</span>, <span class="number">822</span>, <span class="number">827</span>, <span class="number">807</span>, <span class="number">752</span>, <span class="number">843</span>, <span class="number">821</span>, <span class="number">828</span>, <span class="number">820</span>, <span class="number">836</span>, <span class="number">808</span>, <span class="number">784</span>, <span class="number">836</span>, <span class="number">815</span>, <span class="number">774</span>, <span class="number">823</span>, <span class="number">782</span>, <span class="number">820</span>, <span class="number">827</span>, <span class="number">856</span>, <span class="number">861</span>, <span class="number">796</span>, <span class="number">772</span>, <span class="number">832</span>, <span class="number">784</span>, <span class="number">783</span>, <span class="number">797</span>, <span class="number">798</span>, <span class="number">796</span>, <span class="number">818</span>, <span class="number">791</span>, <span class="number">811</span>, <span class="number">881</span>, <span class="number">801</span>, <span class="number">845</span>, <span class="number">819</span>, <span class="number">814</span>, <span class="number">813</span>, <span class="number">818</span>, <span class="number">822</span>, <span class="number">816</span>, <span class="number">805</span>, <span class="number">821</span>, <span class="number">798</span>, <span class="number">794</span>, <span class="number">792</span>, <span class="number">813</span>, <span class="number">839</span>, <span class="number">762</span>, <span class="number">827</span>, <span class="number">841</span>, <span class="number">820</span>, <span class="number">787</span>, <span class="number">839</span>, <span class="number">807</span>, <span class="number">841</span>, <span class="number">758</span>, <span class="number">757</span>, <span class="number">778</span>, <span class="number">802</span>, <span class="number">787</span>, <span class="number">778</span>, <span class="number">808</span>, <span class="number">823</span>, <span class="number">830</span>, <span class="number">832</span>, <span class="number">812</span>, <span class="number">810</span>, <span class="number">854</span>, <span class="number">803</span>, <span class="number">812</span>, <span class="number">780</span>, <span class="number">823</span>, <span class="number">818</span>, <span class="number">795</span>, <span class="number">773</span>, <span class="number">832</span>, <span class="number">785</span>, <span class="number">789</span>, <span class="number">822</span>, <span class="number">818</span>, <span class="number">765</span>, <span class="number">767</span>, <span class="number">826</span>, <span class="number">762</span>, <span class="number">793</span>, <span class="number">794</span>, <span class="number">809</span>, <span class="number">809</span>, <span class="number">842</span>, <span class="number">867</span>, <span class="number">815</span>, <span class="number">798</span>, <span class="number">776</span>, <span class="number">830</span>, <span class="number">817</span>, <span class="number">814</span>, <span class="number">817</span>, <span class="number">839</span>, <span class="number">797</span>, <span class="number">799</span>, <span class="number">843</span>, <span class="number">839</span>, <span class="number">818</span>, <span class="number">771</span>, <span class="number">840</span>, <span class="number">820</span>, <span class="number">859</span>, <span class="number">833</span>, <span class="number">803</span>, <span class="number">840</span>, <span class="number">821</span>, <span class="number">840</span>, <span class="number">825</span>, <span class="number">814</span>, <span class="number">821</span>, <span class="number">808</span>, <span class="number">860</span>, <span class="number">795</span>, <span class="number">782</span>, <span class="number">831</span>, <span class="number">840</span>, <span class="number">834</span>, <span class="number">789</span>, <span class="number">839</span>]</span><br><span class="line"><span class="number">128</span></span><br></pre></td></tr></table></figure><pre><code>    + 使用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">835</span>, <span class="number">825</span>, <span class="number">777</span>, <span class="number">783</span>, <span class="number">837</span>, <span class="number">850</span>, <span class="number">828</span>, <span class="number">800</span>, <span class="number">828</span>, <span class="number">825</span>, <span class="number">832</span>, <span class="number">832</span>, <span class="number">862</span>, <span class="number">792</span>, <span class="number">785</span>, <span class="number">817</span>, <span class="number">798</span>, <span class="number">809</span>, <span class="number">767</span>, <span class="number">851</span>, <span class="number">796</span>, <span class="number">760</span>, <span class="number">888</span>, <span class="number">804</span>, <span class="number">840</span>, <span class="number">815</span>, <span class="number">867</span>, <span class="number">813</span>, <span class="number">838</span>, <span class="number">803</span>, <span class="number">835</span>, <span class="number">813</span>, <span class="number">838</span>, <span class="number">797</span>, <span class="number">855</span>, <span class="number">852</span>, <span class="number">789</span>, <span class="number">810</span>, <span class="number">833</span>, <span class="number">841</span>, <span class="number">812</span>, <span class="number">881</span>, <span class="number">817</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">873</span>, <span class="number">778</span>, <span class="number">767</span>, <span class="number">814</span>, <span class="number">741</span>, <span class="number">756</span>, <span class="number">763</span>, <span class="number">839</span>, <span class="number">832</span>, <span class="number">799</span>, <span class="number">816</span>, <span class="number">728</span>, <span class="number">824</span>, <span class="number">803</span>, <span class="number">815</span>, <span class="number">749</span>, <span class="number">815</span>, <span class="number">748</span>, <span class="number">821</span>, <span class="number">798</span>, <span class="number">845</span>, <span class="number">796</span>, <span class="number">820</span>, <span class="number">817</span>, <span class="number">823</span>, <span class="number">803</span>, <span class="number">801</span>, <span class="number">784</span>, <span class="number">834</span>, <span class="number">793</span>, <span class="number">824</span>, <span class="number">823</span>, <span class="number">792</span>, <span class="number">832</span>, <span class="number">801</span>, <span class="number">822</span>, <span class="number">871</span>, <span class="number">765</span>, <span class="number">831</span>, <span class="number">803</span>, <span class="number">808</span>, <span class="number">792</span>, <span class="number">778</span>, <span class="number">766</span>, <span class="number">847</span>, <span class="number">837</span>, <span class="number">797</span>, <span class="number">775</span>, <span class="number">812</span>, <span class="number">858</span>, <span class="number">815</span>, <span class="number">798</span>, <span class="number">784</span>, <span class="number">811</span>, <span class="number">779</span>, <span class="number">793</span>, <span class="number">796</span>, <span class="number">791</span>, <span class="number">790</span>, <span class="number">797</span>, <span class="number">851</span>, <span class="number">836</span>, <span class="number">864</span>, <span class="number">847</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">807</span>, <span class="number">814</span>, <span class="number">794</span>, <span class="number">774</span>, <span class="number">839</span>, <span class="number">845</span>, <span class="number">778</span>, <span class="number">776</span>, <span class="number">841</span>, <span class="number">785</span>, <span class="number">857</span>, <span class="number">805</span>, <span class="number">792</span>, <span class="number">808</span>, <span class="number">849</span>, <span class="number">813</span>, <span class="number">812</span>]</span><br><span class="line"><span class="number">128</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220316172216.png"></p><p>使用扰动函数让数据散列的更均匀, 让存取和获取的效率更佳.</p><h2 id="初始化多少最为合适"><a href="#初始化多少最为合适" class="headerlink" title="初始化多少最为合适?"></a>初始化多少最为合适?</h2><p>初始值要是2的次方最小值, new HashMap() 时可以传入参数,  HashMap根据传参计算初始化容量<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220316214256.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">2</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">4</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">8</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">16</span>;  </span><br><span class="line"> <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK8 计算初始化值使用了上述算法, 意思是什么呢?<br>是将n右移后与n做或运算.<br>或运算即为: 有真(1)便是真(1)<br>因此, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以17 为例, n 是16 ,二进制: 0001 0000</span></span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// 便是0001 1000</span></span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">2</span>; <span class="comment">// 便是0001 1110</span></span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">4</span>; <span class="comment">// 便是0001 1111</span></span><br></pre></td></tr></table></figure><p>最终返回时+1 得到结果32, 因此这个算法的作用是将1补完右侧, 然后+1后得到2的倍数值. 是加法.<br>而JDK11时做了优化, 变成了减法, 先是计算出需要右移的位数, 然后-1右移对应的位数.源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// HD, Count leading 0&#x27;s  </span></span><br><span class="line"> <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">32</span> : <span class="number">0</span>;  </span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">31</span>;  </span><br><span class="line"> <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt; <span class="number">16</span>) &#123; n -= <span class="number">16</span>; i &gt;&gt;&gt;= <span class="number">16</span>; &#125;  </span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">8</span>) &#123; n -=  <span class="number">8</span>; i &gt;&gt;&gt;=  <span class="number">8</span>; &#125;  </span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">4</span>) &#123; n -=  <span class="number">4</span>; i &gt;&gt;&gt;=  <span class="number">4</span>; &#125;  </span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">2</span>) &#123; n -=  <span class="number">2</span>; i &gt;&gt;&gt;=  <span class="number">2</span>; &#125;  </span><br><span class="line">    <span class="keyword">return</span> n - (i &gt;&gt;&gt; <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算需要右移的位数, n是2的次方, 最大是31.<br>使用的应该是二分算法, 将i不断减半, 直到i不再是2的次方,  同样因为i右移了n次方, 那么最大次方n也要同步减去, 最终得到需要右移的位数.</p><ul><li>对比两个算法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="comment">//        new HashMap&lt;&gt;(17);  </span></span><br><span class="line"> Long start = System.currentTimeMillis();  </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">30</span>; i++) &#123;  </span><br><span class="line"><span class="comment">//            int n = -1 &gt;&gt;&gt; numberOfLeadingZeros(i - 1);  9ms</span></span><br><span class="line"> <span class="keyword">int</span> n = tableSizeFor(i);  <span class="comment">// 1230ms</span></span><br><span class="line">  </span><br><span class="line"> &#125;  </span><br><span class="line">        Long end = System.currentTimeMillis();  </span><br><span class="line"> System.out.println(end - start + <span class="string">&quot;ms&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// HD, Count leading 0&#x27;s  </span></span><br><span class="line"> <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">32</span> : <span class="number">0</span>;  </span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">31</span>;  </span><br><span class="line"> <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt; <span class="number">16</span>) &#123; n -= <span class="number">16</span>; i &gt;&gt;&gt;= <span class="number">16</span>; &#125;  </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">8</span>) &#123; n -=  <span class="number">8</span>; i &gt;&gt;&gt;=  <span class="number">8</span>; &#125;  </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">4</span>) &#123; n -=  <span class="number">4</span>; i &gt;&gt;&gt;=  <span class="number">4</span>; &#125;  </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">2</span>) &#123; n -=  <span class="number">2</span>; i &gt;&gt;&gt;=  <span class="number">2</span>; &#125;  </span><br><span class="line">        <span class="keyword">return</span> n - (i &gt;&gt;&gt; <span class="number">1</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">2</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">4</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">8</span>;  </span><br><span class="line"> n |= n &gt;&gt;&gt; <span class="number">16</span>;  </span><br><span class="line"> <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>结果<br>JDK11的算法, 计算 1&lt;&lt;30个数的时间只需要9ms, 而JDK8的算法需要1000多ms.</li></ul></li></ul><h2 id="时间和空间怎么取舍-什么时间扩容"><a href="#时间和空间怎么取舍-什么时间扩容" class="headerlink" title="时间和空间怎么取舍(什么时间扩容)?"></a>时间和空间怎么取舍(什么时间扩容)?</h2><p>设置了阈值,也可以自定义, 默认0.75, 也就是说, 当数据是容量的3/4是就会扩容.</p><h2 id="扩容时旧数据怎么办"><a href="#扩容时旧数据怎么办" class="headerlink" title="扩容时旧数据怎么办?"></a>扩容时旧数据怎么办?</h2><p>将hash与新增加的长度进行&amp;运算, 如果值为0,则位置不变, 如果不为0, 则位置变为原位置+新增长度. 假设原位置是2, 数组原长度是16, 扩容后的长度是 16 &lt;&lt; 1 == 32, 新增长度是16, 那么计算后的位置变更就是 2 + 16, 同理, 32扩容后新增长度32, 便是 18 + 32 ^d26f74</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_hashMap</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line"> list.add(<span class="string">&quot;jlkk&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;lopi&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;jmdw&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;e4we&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;io98&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;nmhg&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;vfg6&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;gfrt&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;alpo&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;vfbh&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;bnhj&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;zuio&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;iu8e&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;yhjk&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;plop&quot;</span>);  </span><br><span class="line"> list.add(<span class="string">&quot;dd0p&quot;</span>);  </span><br><span class="line"> <span class="keyword">for</span> (String key : list) &#123;  </span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode() ^ (key.hashCode() &gt;&gt;&gt; <span class="number">16</span>);  </span><br><span class="line"> System.out.println(<span class="string">&quot;字符串：&quot;</span> + key + <span class="string">&quot; \tIdx(16)：&quot;</span> + ((<span class="number">32</span> - <span class="number">1</span>) &amp; hash) + <span class="string">&quot; \tBit值：&quot;</span> + Integer.toBinaryString(hash) + <span class="string">&quot; - &quot;</span> + Integer.toBinaryString(hash &amp; <span class="number">32</span>) + <span class="string">&quot; \t\tIdx(32)：&quot;</span> + ((<span class="number">64</span> -<span class="number">1</span>)&amp; hash));  </span><br><span class="line"> System.out.println(Integer.toBinaryString(key.hashCode()) +<span class="string">&quot; &quot;</span>+ Integer.toBinaryString(hash) + <span class="string">&quot; &quot;</span> + Integer.toBinaryString((<span class="number">64</span> - <span class="number">1</span>) &amp; hash));  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">字符串：<span class="function">jlkk <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：19 Bit值：1100011101001000010011 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：19</span></span><br><span class="line"><span class="function">1100011101001000100010 1100011101001000010011 10011</span></span><br><span class="line"><span class="function">字符串：lopi <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：14 Bit值：1100101100011010001110 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：14</span></span><br><span class="line"><span class="function">1100101100011010111100 1100101100011010001110 1110</span></span><br><span class="line"><span class="function">字符串：jmdw <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：7 Bit值：1100011101010100100111 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：39</span></span><br><span class="line"><span class="function">1100011101010100010110 1100011101010100100111 100111</span></span><br><span class="line"><span class="function">字符串：e4we <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：19 Bit值：1011101011101101010011 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：19</span></span><br><span class="line"><span class="function">1011101011101101111101 1011101011101101010011 10011</span></span><br><span class="line"><span class="function">字符串：io98 <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：20 Bit值：1100010110001011110100 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：52</span></span><br><span class="line"><span class="function">1100010110001011000101 1100010110001011110100 110100</span></span><br><span class="line"><span class="function">字符串：nmhg <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：13 Bit值：1100111010011011001101 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：13</span></span><br><span class="line"><span class="function">1100111010011011111110 1100111010011011001101 1101</span></span><br><span class="line"><span class="function">字符串：vfg6 <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：8 Bit值：1101110010111101101000 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：40</span></span><br><span class="line"><span class="function">1101110010111101011111 1101110010111101101000 101000</span></span><br><span class="line"><span class="function">字符串：gfrt <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：17 Bit值：1100000101111101010001 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：17</span></span><br><span class="line"><span class="function">1100000101111101100001 1100000101111101010001 10001</span></span><br><span class="line"><span class="function">字符串：alpo <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：7 Bit值：1011011011101101000111 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：7</span></span><br><span class="line"><span class="function">1011011011101101101010 1011011011101101000111 111</span></span><br><span class="line"><span class="function">字符串：vfbh <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：1 Bit值：1101110010111011000001 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：1</span></span><br><span class="line"><span class="function">1101110010111011110110 1101110010111011000001 1</span></span><br><span class="line"><span class="function">字符串：bnhj <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：0 Bit值：1011100011011001100000 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：32</span></span><br><span class="line"><span class="function">1011100011011001001110 1011100011011001100000 100000</span></span><br><span class="line"><span class="function">字符串：zuio <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：24 Bit值：1110010011100110011000 - 0 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：24</span></span><br><span class="line"><span class="function">1110010011100110100001 1110010011100110011000 11000</span></span><br><span class="line"><span class="function">字符串：iu8e <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：8 Bit值：1100010111100101101000 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：40</span></span><br><span class="line"><span class="function">1100010111100101011001 1100010111100101101000 101000</span></span><br><span class="line"><span class="function">字符串：yhjk <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：8 Bit值：1110001001010010101000 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：40</span></span><br><span class="line"><span class="function">1110001001010010010000 1110001001010010101000 101000</span></span><br><span class="line"><span class="function">字符串：plop <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：9 Bit值：1101001000110011101001 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：41</span></span><br><span class="line"><span class="function">1101001000110011011101 1101001000110011101001 101001</span></span><br><span class="line"><span class="function">字符串：dd0p <span class="title">Idx</span><span class="params">(<span class="number">16</span>)</span>：14 Bit值：1011101111001011101110 - 100000 <span class="title">Idx</span><span class="params">(<span class="number">32</span>)</span>：46</span></span><br><span class="line"><span class="function">1011101111001011000000 1011101111001011101110 101110</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>下一节👉<a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%88%A0%E9%99%A4/" title="HashMap的插入、查询与删除">HashMap的插入、查询与删除</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/;categories/%E6%A8%A1%E6%9D%BF/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/"/>
      <url>/;categories/%E6%A8%A1%E6%9D%BF/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习《Java面试圣经》笔记</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/Java%E9%9D%A2%E8%AF%95%E5%9C%A3%E7%BB%8F--%E5%B0%8F%E5%82%85%E5%93%A5/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/Java%E9%9D%A2%E8%AF%95%E5%9C%A3%E7%BB%8F--%E5%B0%8F%E5%82%85%E5%93%A5/</url>
      
        <content type="html"><![CDATA[<a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" title="数据结构">数据结构</a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashCode为什么使用31做乘积</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashCode%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A831%E5%81%9A%E4%B9%98%E7%A7%AF/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashCode%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A831%E5%81%9A%E4%B9%98%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="HashCode-是什么？"><a href="#HashCode-是什么？" class="headerlink" title="HashCode 是什么？"></a>HashCode 是什么？</h2><p>是计算hash值的方法。</p><h2 id="HashCode-为什么计算使用31"><a href="#HashCode-为什么计算使用31" class="headerlink" title="HashCode 为什么计算使用31"></a>HashCode 为什么计算使用31</h2><p>下面是Java8 String计算hash的hashCode， 可以看到使用的是固定的值<em>31</em><br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220315211210.png"></p><p>因为31是一个[[奇质数]], 用偶数会导致乘积运算时数据溢出，同时使用31得到的值碰撞概率小, 基本稳定<br>验证31是否真的碰撞概率小。</p><ul><li>复现Hash计算函数 ^7ebf36<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hashCode</span><span class="params">(String str, Integer multiplier)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">hash = multiplier * hash + str.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>计算不同乘积的碰撞概率<br>选取十万个单词， 对每个单次计算hash值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过hash集合计算相同的hash数及最大最小hash值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateInfo <span class="title">collisianHashCode</span><span class="params">(List&lt;Integer&gt; hashCodeList, Integer multiplier)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> minHash = hashCodeList.stream().filter(Integer::compareTo).min().get();</span><br><span class="line"><span class="keyword">int</span> maxHash = hashCodeList.stream().filter(Integer::compareTo).max().get();</span><br><span class="line"><span class="keyword">int</span> collisionCount = hashCodeList.size() - (hashCodeList.stream().distinct().count()); <span class="comment">// 总数减去不重复的</span></span><br><span class="line"><span class="keyword">double</span> collisionRate = (collisionCount * <span class="number">1.0</span>) / hashCodeList.size(); <span class="comment">// 占比</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RateInfo(minHash, manHash, collisionCOunt, collisionRate, multiplier);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据乘积不同，计算十万个单词碰撞结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;RateInfo&gt; <span class="title">collisionRateList</span><span class="params">(Set&lt;String&gt; words, Integer... multipiers)</span> </span>&#123;</span><br><span class="line">List&lt;RateInfo&gt; rateInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Integer multipier:: multipiers) &#123;</span><br><span class="line">List&lt;Integer&gt; hashCodeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">hashCodeList.add(HashCode.hashCode(word, multipier));</span><br><span class="line">&#125;</span><br><span class="line">rateInfoList.add(HashCode.collisionHashCode(hashCodeList, multipier);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rateInfoList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>单元测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; words;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Before</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    words = FileUtils.readFile(<span class="string">&quot;/docs/103976个英语单词库.txt&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashCode</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    List&lt;RateInfo&gt; rateInfoList = HashCode.collisionRateList(words, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">199</span>);  </span><br><span class="line"> <span class="keyword">for</span> (RateInfo rate : rateInfoList) &#123;  </span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;乘数 = %4d, 最小 Hash = %11d, 最大 Hash = %10d, 碰撞数量 =%6d, 碰撞概 率 = %.4f%%&quot;</span>,  </span><br><span class="line"> rate.getMultiplier(), rate.getMinHash(), rate.getMaxHash(), rate.getCollisionCount(), rate.getCollisionRate() * <span class="number">100</span>));  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220315211821.png"></li></ul></li></ul><p>可以明显看出，31时碰撞概率趋于0，基本稳定。<br>那么如此计算hash是为了什么呢？为了能让数据散列分布</p><ul><li><p>将2^32次方按64个格子分布<br>为什么是2^32次方呢? 因为31的碰撞最大hash和最小hash所占的总量接近2^32次方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">2147461248l</span> + <span class="number">2147444544l</span>);  </span><br><span class="line">System.out.println(<span class="number">1l</span> &lt;&lt; <span class="number">32</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hashArea</span><span class="params">(List&lt;Integer&gt; hashCodeList)</span> </span>&#123;</span><br><span class="line">Map&lt;Integer, Integer&gt; staistics = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> average = （<span class="number">1</span> &lt;&lt; <span class="number">32</span>）/ <span class="number">64</span>; <span class="comment">// 67108864</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0x8000000</span>, i &lt;= <span class="number">0x7fffffff</span>, i += average) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="keyword">int</span> max = min + average;</span><br><span class="line"><span class="keyword">int</span> count = (<span class="keyword">int</span>) hashCodeList.parallelStream().filter(x -&gt; x &gt;= min &amp;&amp; x &lt;= max).count(); <span class="comment">// 计算在这个区间的总数</span></span><br><span class="line"> staistics.put(start++, count);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> staistics;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashAreaTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">     System.out.println(<span class="number">2</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">2</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">3</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">3</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">5</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">5</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">7</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">7</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">17</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">17</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">31</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">31</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">32</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">32</span>).values());  </span><br><span class="line"> System.out.println(<span class="number">199</span> + <span class="string">&quot;:&quot;</span> +HashCode.hashArea(words, <span class="number">199</span>).values());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>:[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">103910</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">3</span>:[<span class="number">117</span>, <span class="number">125</span>, <span class="number">137</span>, <span class="number">142</span>, <span class="number">113</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">14</span>, <span class="number">33</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">95629</span>, <span class="number">3909</span>, <span class="number">9</span>, <span class="number">1848</span>, <span class="number">392</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">282</span>, <span class="number">699</span>, <span class="number">203</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>]</span><br><span class="line"><span class="number">5</span>:[<span class="number">638</span>, <span class="number">451</span>, <span class="number">451</span>, <span class="number">299</span>, <span class="number">453</span>, <span class="number">703</span>, <span class="number">511</span>, <span class="number">324</span>, <span class="number">637</span>, <span class="number">343</span>, <span class="number">148</span>, <span class="number">121</span>, <span class="number">102</span>, <span class="number">145</span>, <span class="number">122</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">116</span>, <span class="number">91</span>, <span class="number">64</span>, <span class="number">115</span>, <span class="number">142</span>, <span class="number">106</span>, <span class="number">140</span>, <span class="number">108</span>, <span class="number">131</span>, <span class="number">162</span>, <span class="number">153</span>, <span class="number">196</span>, <span class="number">216</span>, <span class="number">201</span>, <span class="number">172</span>, <span class="number">68123</span>, <span class="number">158</span>, <span class="number">152</span>, <span class="number">7694</span>, <span class="number">4926</span>, <span class="number">167</span>, <span class="number">160</span>, <span class="number">138</span>, <span class="number">163</span>, <span class="number">186</span>, <span class="number">190</span>, <span class="number">260</span>, <span class="number">329</span>, <span class="number">238</span>, <span class="number">127</span>, <span class="number">74</span>, <span class="number">102</span>, <span class="number">430</span>, <span class="number">3430</span>, <span class="number">2113</span>, <span class="number">3132</span>, <span class="number">558</span>, <span class="number">113</span>, <span class="number">79</span>, <span class="number">146</span>, <span class="number">244</span>, <span class="number">539</span>, <span class="number">623</span>, <span class="number">668</span>, <span class="number">391</span>, <span class="number">382</span>, <span class="number">221</span>]</span><br><span class="line"><span class="number">7</span>:[<span class="number">310</span>, <span class="number">364</span>, <span class="number">284</span>, <span class="number">292</span>, <span class="number">393</span>, <span class="number">506</span>, <span class="number">656</span>, <span class="number">460</span>, <span class="number">451</span>, <span class="number">410</span>, <span class="number">441</span>, <span class="number">522</span>, <span class="number">485</span>, <span class="number">458</span>, <span class="number">725</span>, <span class="number">559</span>, <span class="number">391</span>, <span class="number">493</span>, <span class="number">319</span>, <span class="number">308</span>, <span class="number">479</span>, <span class="number">469</span>, <span class="number">454</span>, <span class="number">354</span>, <span class="number">491</span>, <span class="number">486</span>, <span class="number">361</span>, <span class="number">425</span>, <span class="number">347</span>, <span class="number">442</span>, <span class="number">245</span>, <span class="number">317</span>, <span class="number">38397</span>, <span class="number">15253</span>, <span class="number">286</span>, <span class="number">371</span>, <span class="number">869</span>, <span class="number">1509</span>, <span class="number">2012</span>, <span class="number">1049</span>, <span class="number">1186</span>, <span class="number">2890</span>, <span class="number">7992</span>, <span class="number">6821</span>, <span class="number">975</span>, <span class="number">1061</span>, <span class="number">1467</span>, <span class="number">1130</span>, <span class="number">1350</span>, <span class="number">1200</span>, <span class="number">482</span>, <span class="number">291</span>, <span class="number">319</span>, <span class="number">301</span>, <span class="number">241</span>, <span class="number">245</span>, <span class="number">324</span>, <span class="number">239</span>, <span class="number">260</span>, <span class="number">272</span>, <span class="number">433</span>, <span class="number">317</span>, <span class="number">266</span>, <span class="number">471</span>]</span><br><span class="line"><span class="number">17</span>:[<span class="number">913</span>, <span class="number">991</span>, <span class="number">905</span>, <span class="number">849</span>, <span class="number">906</span>, <span class="number">3381</span>, <span class="number">3022</span>, <span class="number">2523</span>, <span class="number">1772</span>, <span class="number">2715</span>, <span class="number">2536</span>, <span class="number">3521</span>, <span class="number">2349</span>, <span class="number">1477</span>, <span class="number">984</span>, <span class="number">1262</span>, <span class="number">950</span>, <span class="number">752</span>, <span class="number">771</span>, <span class="number">776</span>, <span class="number">742</span>, <span class="number">1004</span>, <span class="number">952</span>, <span class="number">1013</span>, <span class="number">905</span>, <span class="number">1146</span>, <span class="number">1034</span>, <span class="number">971</span>, <span class="number">1387</span>, <span class="number">1077</span>, <span class="number">1042</span>, <span class="number">1297</span>, <span class="number">14982</span>, <span class="number">1073</span>, <span class="number">12418</span>, <span class="number">1061</span>, <span class="number">1158</span>, <span class="number">1153</span>, <span class="number">983</span>, <span class="number">1308</span>, <span class="number">1177</span>, <span class="number">960</span>, <span class="number">1197</span>, <span class="number">1051</span>, <span class="number">821</span>, <span class="number">954</span>, <span class="number">869</span>, <span class="number">889</span>, <span class="number">825</span>, <span class="number">778</span>, <span class="number">1164</span>, <span class="number">1229</span>, <span class="number">1039</span>, <span class="number">1204</span>, <span class="number">964</span>, <span class="number">1238</span>, <span class="number">959</span>, <span class="number">957</span>, <span class="number">1034</span>, <span class="number">831</span>, <span class="number">808</span>, <span class="number">831</span>, <span class="number">870</span>, <span class="number">1266</span>]</span><br><span class="line"><span class="number">31</span>:[<span class="number">1292</span>, <span class="number">1065</span>, <span class="number">1197</span>, <span class="number">1148</span>, <span class="number">1217</span>, <span class="number">978</span>, <span class="number">1157</span>, <span class="number">1157</span>, <span class="number">1203</span>, <span class="number">1099</span>, <span class="number">1737</span>, <span class="number">3011</span>, <span class="number">2235</span>, <span class="number">2160</span>, <span class="number">1612</span>, <span class="number">2443</span>, <span class="number">2004</span>, <span class="number">1941</span>, <span class="number">3268</span>, <span class="number">2047</span>, <span class="number">1792</span>, <span class="number">1615</span>, <span class="number">1257</span>, <span class="number">1316</span>, <span class="number">1350</span>, <span class="number">1297</span>, <span class="number">1234</span>, <span class="number">1698</span>, <span class="number">1318</span>, <span class="number">1137</span>, <span class="number">1217</span>, <span class="number">1385</span>, <span class="number">8237</span>, <span class="number">8404</span>, <span class="number">1214</span>, <span class="number">1205</span>, <span class="number">1199</span>, <span class="number">1174</span>, <span class="number">1092</span>, <span class="number">1203</span>, <span class="number">1472</span>, <span class="number">1047</span>, <span class="number">1125</span>, <span class="number">1264</span>, <span class="number">1317</span>, <span class="number">1075</span>, <span class="number">1527</span>, <span class="number">1231</span>, <span class="number">1552</span>, <span class="number">1041</span>, <span class="number">1201</span>, <span class="number">1085</span>, <span class="number">1258</span>, <span class="number">1153</span>, <span class="number">1255</span>, <span class="number">1223</span>, <span class="number">1289</span>, <span class="number">1084</span>, <span class="number">1008</span>, <span class="number">1440</span>, <span class="number">1230</span>, <span class="number">1400</span>, <span class="number">1107</span>, <span class="number">1277</span>]</span><br><span class="line"><span class="number">32</span>:[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1607</span>, <span class="number">1044</span>, <span class="number">1614</span>, <span class="number">1559</span>, <span class="number">1135</span>, <span class="number">1575</span>, <span class="number">1664</span>, <span class="number">2360</span>, <span class="number">1733</span>, <span class="number">2642</span>, <span class="number">1305</span>, <span class="number">301</span>, <span class="number">195</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3653</span>, <span class="number">1745</span>, <span class="number">3973</span>, <span class="number">2144</span>, <span class="number">2987</span>, <span class="number">1750</span>, <span class="number">1090</span>, <span class="number">3674</span>, <span class="number">2153</span>, <span class="number">2471</span>, <span class="number">1390</span>, <span class="number">391</span>, <span class="number">579</span>, <span class="number">0</span>, <span class="number">6948</span>, <span class="number">7109</span>, <span class="number">2489</span>, <span class="number">2931</span>, <span class="number">1340</span>, <span class="number">980</span>, <span class="number">1016</span>, <span class="number">2407</span>, <span class="number">5064</span>, <span class="number">2291</span>, <span class="number">3314</span>, <span class="number">4285</span>, <span class="number">1138</span>, <span class="number">351</span>, <span class="number">658</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2142</span>, <span class="number">988</span>, <span class="number">2709</span>, <span class="number">485</span>, <span class="number">1919</span>, <span class="number">587</span>, <span class="number">547</span>, <span class="number">2290</span>, <span class="number">612</span>, <span class="number">1555</span>, <span class="number">870</span>, <span class="number">57</span>, <span class="number">160</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">199</span>:[<span class="number">1415</span>, <span class="number">1455</span>, <span class="number">1617</span>, <span class="number">1642</span>, <span class="number">1491</span>, <span class="number">1418</span>, <span class="number">1506</span>, <span class="number">1663</span>, <span class="number">1694</span>, <span class="number">1594</span>, <span class="number">1450</span>, <span class="number">1428</span>, <span class="number">1462</span>, <span class="number">1545</span>, <span class="number">1693</span>, <span class="number">1566</span>, <span class="number">1354</span>, <span class="number">1413</span>, <span class="number">1495</span>, <span class="number">1720</span>, <span class="number">1648</span>, <span class="number">1641</span>, <span class="number">1473</span>, <span class="number">1386</span>, <span class="number">1401</span>, <span class="number">1468</span>, <span class="number">1548</span>, <span class="number">1518</span>, <span class="number">1342</span>, <span class="number">1409</span>, <span class="number">1561</span>, <span class="number">1656</span>, <span class="number">4110</span>, <span class="number">1423</span>, <span class="number">1319</span>, <span class="number">1327</span>, <span class="number">1404</span>, <span class="number">1639</span>, <span class="number">1579</span>, <span class="number">1389</span>, <span class="number">1406</span>, <span class="number">1452</span>, <span class="number">1613</span>, <span class="number">3019</span>, <span class="number">3373</span>, <span class="number">3030</span>, <span class="number">1748</span>, <span class="number">1471</span>, <span class="number">1490</span>, <span class="number">1469</span>, <span class="number">1457</span>, <span class="number">1396</span>, <span class="number">1457</span>, <span class="number">1644</span>, <span class="number">1754</span>, <span class="number">1624</span>, <span class="number">1503</span>, <span class="number">1498</span>, <span class="number">1304</span>, <span class="number">1507</span>, <span class="number">1458</span>, <span class="number">1501</span>, <span class="number">1486</span>, <span class="number">1454</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>可以看出， 31的分布是较为平均的，而为什么要散列分布呢？因为只要知道了他的hash，便可以快速锁定值的存储位置，比从0开始查要迅速的多。<a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HashMap/" title="HashMap">HashMap</a>1.2上线的时候便是基于散列分布实现的。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引</title>
      <link href="/;categories/%E7%B4%A2%E5%BC%95/%E6%88%91%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
      <url>/;categories/%E7%B4%A2%E5%BC%95/%E6%88%91%E7%9A%84%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/Java%E9%9D%A2%E8%AF%95%E5%9C%A3%E7%BB%8F--%E5%B0%8F%E5%82%85%E5%93%A5/" title="Java面试圣经--小傅哥">Java面试圣经--小傅哥</a><h2 id=""><a href="#" class="headerlink" title=""></a><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F/" title="分布式">分布式</a></h2><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" title="数据结构">数据结构</a><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h1 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h1><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Vue/VUE%E6%89%93%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C/" title="VUE打包与运行">VUE打包与运行</a>]]></content>
      
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obsidian 插件共享</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/obsidian/obsidian%20%E6%8F%92%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/obsidian/obsidian%20%E6%8F%92%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Obsidian-插件共享"><a href="#Obsidian-插件共享" class="headerlink" title="Obsidian 插件共享"></a>Obsidian 插件共享</h1><p>obsidian独特的库机制, 让每个库的第三方插件都可以独立配置, 然而这样有好有坏, 好处就是每个库都有独立的个性, 然而每次新建库都会面临重新下载插件的坏处, 如果插件多, 还可能造成存储占用过大的问题, 那么如何扬长避短呢?</p><span id="more"></span><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><p>   软连接你值得拥有, 首先, 我们新建一个库, 取名A<br>    <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220222103137.png"><br>    随便找个文件夹放即可, 也可以用已有的库.<br>    然后我们进入到该库下的<code>.obsidian</code>文件夹下, 如果没有<code>plugins</code>文件夹则新建,然后记录A库的插件路径<br>    <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220222103628.png"><br>    然后建立B库, B库不需要创建<code>plugins</code>文件夹, 其他操作如上, 不在赘述.<br>    然后在B库<strong>建立软连接</strong>连接A库的plugins文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s A/.obsidian/plugins B/.obsidian/plugins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果在B库的.obsidian文件夹下使用如下命令</span></span><br><span class="line">ln -s A/.obsidian/plugins plugins</span><br><span class="line"><span class="meta">#</span><span class="bash"> win 使用:</span></span><br><span class="line">mklink /j D:\B\.obsidian\plugins C:\Users\A\.obsidian\plugins</span><br></pre></td></tr></table></figure><p>完成后,在B库可以看到如下文件列表:<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220222104310.png"><br>至此大功告成</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先在A库, 安装插件:<br><code>Sliding Panes</code><br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220222105003.png"><br>可以看到A库已经安装完毕, 那么我们打开,看看效果<br>打开并重启后, 新建文件, 可以看到A库已经生效<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220222105134.png"><br>再来看看我们的B库:<br><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220222105248.png"><br>也有了这个插件, 并且, 我们成功利用了obsidian的库独立个性的机制, 不同的库哪怕使用的是同一个文件夹下的插件, 依旧可以独立设置, 此时, 我们的A库是打开插件的, 而B库是没有的.<br>ps: 如果新安装插件确不显示, 记得重启该库哦, 打开不生效同理</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql在不知道哪条数据重复的情况下,查询重复的数据</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/Mysql%E5%9C%A8%E4%B8%8D%E7%9F%A5%E9%81%93%E5%93%AA%E6%9D%A1%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B,%E6%9F%A5%E8%AF%A2%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/Mysql%E5%9C%A8%E4%B8%8D%E7%9F%A5%E9%81%93%E5%93%AA%E6%9D%A1%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B,%E6%9F%A5%E8%AF%A2%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="在不知道哪条数据重复的情况下-查询重复的数据"><a href="#在不知道哪条数据重复的情况下-查询重复的数据" class="headerlink" title="在不知道哪条数据重复的情况下,查询重复的数据"></a>在不知道哪条数据重复的情况下,查询重复的数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `table_name` where `id` in (select `id` from `table_name`  GROUP BY `hash` HAVING COUNT(`hash`) &gt; 1) ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 在不知道哪条数据重复的情况下,查询重复的数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用python查询mysql数据库--当同一数据出现n次时, 记录最新的数据</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/python/%E4%BD%BF%E7%94%A8python%E6%9F%A5%E8%AF%A2mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/python/%E4%BD%BF%E7%94%A8python%E6%9F%A5%E8%AF%A2mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>当同一数据出现5次时,  记录最新的数据</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模块</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建链接</span></span><br><span class="line">db = pymysql.connect(user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;123456&quot;</span>, host=<span class="string">&quot;localhost&quot;</span>, database=<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浮标</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># sql 语句</span></span><br><span class="line">sql = <span class="string">&quot;select * from user limit %d&quot;</span> %(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取全部数据(元组)</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建集合, 元组数据不能删除,只能全部删除</span></span><br><span class="line">re = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环对比</span></span><br><span class="line"><span class="keyword">for</span> data1 <span class="keyword">in</span> result:</span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> data2 <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> data1[<span class="number">1</span>] = data2[<span class="number">1</span>]:</span><br><span class="line">      i+=<span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> i==<span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(data1)</span><br><span class="line">        re.add(data2)</span><br><span class="line"><span class="built_in">print</span>(re)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java发展史</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/Java%E5%8E%86%E5%8F%B2/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/Java%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>91年 由James Gosling启动的. Oak  橡树</p><p>95年 更名为Java, 从SunWorld大会正式发布JDK1.0</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RequestBody使用时问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/@RequestBody%E4%BD%BF%E7%94%A8%E6%97%B6%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/@RequestBody%E4%BD%BF%E7%94%A8%E6%97%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>SpringBoot, 当参数需要同时接受文件与普通数据时, 不能使用<code>@RequestBody</code>.</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>前端传数据时, 使用的<code>context- type</code>为<code>multipart/form-data</code>,因此普通数据类型无法使用JSON格式, RequestBody因此不可用</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux设置定时脚本</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E8%84%9A%E6%9C%AC/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>安装cron</p><p>service crond  start</p><p>crontab -e : 新增当前用户定时任务</p><p>crontab -r: 删除当前用户定时任务 <font color = "red">谨慎使用, 会全部删除!! </font></p><p>任务格式</p><p><code>* * * * * user command</code></p><p>分 时 天 月 周 用户名  执行的命令行</p><blockquote><p># Example of job definition:</p><p># .—————- minute (0 - 59)</p><p># | .————- hour (0 - 23)</p><p># | | .———- day of month (1 - 31)</p><p># | | | .——- month (1 - 12) OR jan,feb,mar,apr …</p><p># | | | | .—- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</p><p># | | | | |</p><p># * * * * * user-name command to be executed</p></blockquote><p>*: 所有</p><p>*/5: 每5(分|时|…|周)</p><p>-: 几到几</p><p>,: 分割数字</p><p>crontab -l  查看列表</p><p>/var/log/cron 日志文件</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小bug记录, 有时间输出成文章</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/%E5%B0%8Fbug%E8%AE%B0%E5%BD%95/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/%E5%B0%8Fbug%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ul><li>空集合使用<code>CollectionUtils.isEmpty</code> 判断</li><li>POST 接受参数List需要封装到对象里</li><li><code>null == 数组</code> 如果数组是<code>[] </code>是false哦  ps: 还是要理解一下<code>==</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 查询非交集</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E6%9F%A5%E8%AF%A2%E9%9D%9E%E4%BA%A4%E9%9B%86/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E6%9F%A5%E8%AF%A2%E9%9D%9E%E4%BA%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="查询非交集"><a href="#查询非交集" class="headerlink" title="查询非交集"></a>查询非交集</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from digital_collection where  id = 8 and not exists (select id from category_digital_relation where digital_collection.id = category_digital_relation.digital_id) ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220115155301.png" alt="截屏2022-01-15 下午3.52.47"></p><p><a href="https://hg.openjdk.java.net/jdk/jdk12/file/06222165c35f">jdk下载地址</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisJSON 学习笔记</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/redis/RedisJSON%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/redis/RedisJSON%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Docker快速启动"><a href="#使用Docker快速启动" class="headerlink" title="使用Docker快速启动"></a>使用Docker快速启动</h2><p><strong>获取镜像并后台启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull redislabs/rejson:latest</span><br><span class="line">docker run -itd --name redisjson -p 6380:6379 redislabs/rejson:latest </span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入镜像</span></span><br><span class="line">docker exec -it redisjson /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis客户端</span></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220112123459.png" alt="image-20220112123459392"></p><h2 id="加载模块到现有的Redis-V"><a href="#加载模块到现有的Redis-V" class="headerlink" title="加载模块到现有的Redis V"></a>加载模块到现有的Redis V</h2><blockquote><h3 id="将模块加载到-Redis-¶"><a href="#将模块加载到-Redis-¶" class="headerlink" title="将模块加载到 Redis ¶"></a>将模块加载到 Redis <a href="https://oss.redis.com/redisjson/#loading-the-module-to-redis">¶</a></h3><p>要求：</p><ul><li><a href="http://redis.io/download">Redis v5.0 或以上</a></li></ul><p>我们建议您通过将以下内容添加到 <code>redis.conf </code>文件中来让 Redis 在启动期间加载模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;loadmodule /path/to/module/target/release/librejson.so</span><br></pre></td></tr></table></figure><p>在 Mac OS 上，如果此模块已构建为动态库，请使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;loadmodule /path/to/module/target/release/librejson.dylib</span><br></pre></td></tr></table></figure><p>在上面的行中替换 <code>/path/to/module/ </code>为模块库的实际路径。</p><p>或者，您可以让 Redis 使用以下命令行参数语法加载模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;~/$ redis-server --loadmodule ./target/release/librejson.so</span><br></pre></td></tr></table></figure><p>最后，您还可以使用该 命令。但是请注意，这 是一个 <strong>危险的命令</strong> ，出于安全考虑，将来可能会被阻止/弃用。 <a href="http://redis.io/commands/module-load"><code>MODULE LOAD </code></a><code>MODULE LOAD</code></p><p>成功加载模块后，Redis 日志应包含类似于以下内容的行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;...</span><br><span class="line"></span><br><span class="line">&gt;1877:M 23 Dec 02:02:59.725 # &lt;RedisJSON&gt; JSON data type for Redis - v1.0.0 [encver 0]</span><br><span class="line">&gt;1877:M 23 Dec 02:02:59.725 * Module &#x27;RedisJSON&#x27; loaded from &lt;redacted&gt;/src/rejson.so</span><br><span class="line">&gt;...</span><br></pre></td></tr></table></figure></blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="String-类型的数据操作"><a href="#String-类型的数据操作" class="headerlink" title="String 类型的数据操作"></a>String 类型的数据操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 新增 </span><br><span class="line">127.0.0.1:6379&gt; json.set str . &#x27;&quot;bar&quot;&#x27;</span><br><span class="line">OK</span><br><span class="line"># 查询</span><br><span class="line">127.0.0.1:6379&gt; json.get str</span><br><span class="line">&quot;\&quot;bar\&quot;&quot;</span><br><span class="line"># 数据类型</span><br><span class="line">127.0.0.1:6379&gt; json.type str</span><br><span class="line">&quot;string&quot;</span><br></pre></td></tr></table></figure><h3 id="String类型的扩展操作"><a href="#String类型的扩展操作" class="headerlink" title="String类型的扩展操作"></a>String类型的扩展操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 字符串长度</span><br><span class="line">127.0.0.1:6379&gt; JSON.STRLEN str</span><br><span class="line">(integer) 3</span><br><span class="line"># 拼接字符串</span><br><span class="line">127.0.0.1:6379&gt; JSON.STRAPPEND str . &#x27;&quot;baz&quot;&#x27;</span><br><span class="line">(integer) 6</span><br><span class="line"># 查询</span><br><span class="line">127.0.0.1:6379&gt; JSON.get str</span><br><span class="line">&quot;\&quot;barbaz\&quot;&quot;</span><br></pre></td></tr></table></figure><p>这里其实有规律的, 或者说万变不离其宗. STRLEN = String.length  明显是缩写, 同理拼接也是 STRAPPEND=StringBuffer.append.  多说一句append的翻译是追加, 所以这个方法的作用一目了然吧, 所以呢, 英语真的很重要的.</p><h3 id="Number类型的数据操作"><a href="#Number类型的数据操作" class="headerlink" title="Number类型的数据操作"></a>Number类型的数据操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; json.set num . 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; json.get num</span><br><span class="line">&quot;0&quot;</span><br><span class="line"># 增加</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMINCRBY num . 1</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMINCRBY num . 1.5</span><br><span class="line">&quot;2.5&quot;</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMINCRBY num . -0.75</span><br><span class="line">&quot;1.75&quot;</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMINCRBY num . 24</span><br><span class="line">&quot;25.75&quot;</span><br><span class="line"> # 乘, 然而下个版本就删除了</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMMULTBY num . 24</span><br><span class="line">&quot;618&quot;</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMMULTBY num . 2</span><br><span class="line">&quot;1236&quot;</span><br><span class="line">127.0.0.1:6379&gt; JSON.NUMMULTBY num . 3</span><br><span class="line">&quot;3708&quot;</span><br></pre></td></tr></table></figure><p><em>没找到除, 难怪要把乘删了, 挺离谱的</em></p><p><code>json.set or set key:key1:key2 value</code> 可以进行分组, 同一个key的会被放到同一组中,</p><h2 id="集成Jedis"><a href="#集成Jedis" class="headerlink" title="集成Jedis"></a>集成Jedis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建链接池</span></span><br><span class="line">JedisPool pool = <span class="keyword">new</span> JedisPool(Protocol.DEFAULT_HOST, <span class="number">6380</span>);</span><br><span class="line"><span class="comment">// 数据</span></span><br><span class="line">     Student maya = <span class="keyword">new</span> Student(<span class="string">&quot;maya&quot;</span>, <span class="string">&quot;Jayavant&quot;</span>);</span><br><span class="line"><span class="comment">// 获取链接</span></span><br><span class="line">     Jedis jedis = pool.getResource();</span><br><span class="line"><span class="comment">// 设置值  这里`:`是进行分组 和redisjosn的路径是两种格式</span></span><br><span class="line">     jedis.set(<span class="string">&quot;student:111:1&quot;</span>, JSON.toJSONString(maya));</span><br><span class="line"><span class="comment">// redisjson的链接创建方法</span></span><br><span class="line">     UnifiedJedis client = <span class="keyword">new</span> JedisPooled(Protocol.DEFAULT_HOST, <span class="number">6380</span>);</span><br><span class="line">     client.jsonSet(<span class="string">&quot;student:111&quot;</span>, maya);</span><br><span class="line"></span><br><span class="line">     Student oliwia = <span class="keyword">new</span> Student(<span class="string">&quot;Oliwia&quot;</span>, <span class="string">&quot;Jagoda&quot;</span>);</span><br><span class="line">     client.jsonSet(<span class="string">&quot;student:112&quot;</span>, oliwia);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     Schema schema = <span class="keyword">new</span> Schema().addTextField(<span class="string">&quot;$.firstName&quot;</span>, <span class="number">1.0</span>).addTextField(<span class="string">&quot;$&quot;</span> +</span><br><span class="line">             <span class="string">&quot;.lastName&quot;</span>, <span class="number">1.0</span>);</span><br><span class="line">     IndexDefinition rule = <span class="keyword">new</span> IndexDefinition(IndexDefinition.Type.JSON)</span><br><span class="line">             .setPrefixes(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;student:&quot;</span>&#125;);</span><br><span class="line">     client.ftCreate(<span class="string">&quot;student-index&quot;</span>,</span><br><span class="line">             IndexOptions.defaultOptions().setDefinition(rule),</span><br><span class="line">             schema);</span><br><span class="line">     Query q = <span class="keyword">new</span> Query(<span class="string">&quot;@\\$\\&quot;</span> + <span class="string">&quot;.firstName:oli*&quot;</span>);</span><br><span class="line">     SearchResult mayaSearch = client.ftSearch(<span class="string">&quot;student-index&quot;</span>, q);</span><br><span class="line"></span><br><span class="line">     List&lt;Document&gt; docs = mayaSearch.getDocuments();</span><br><span class="line">     <span class="keyword">for</span> (Document doc : docs) &#123;</span><br><span class="line">         System.out.println(JSON.toJSONString(doc));</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>循环添加</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Sql将相同的数据添加1000次"><a href="#使用Sql将相同的数据添加1000次" class="headerlink" title="使用Sql将相同的数据添加1000次"></a>使用Sql将相同的数据添加1000次</h2><p>众所周知, </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 请求慢问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/GitLab%20%E5%8D%87%E7%BA%A7/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/GitLab%20%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="是否安装rsync"><a href="#是否安装rsync" class="headerlink" title="是否安装rsync"></a>是否安装<code>rsync</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install rsync</span><br></pre></td></tr></table></figure><h3 id="备份时间戳"><a href="#备份时间戳" class="headerlink" title="备份时间戳"></a>备份时间戳</h3><p>保存在<code>config/gitlab.yml</code> 配置的<code>backup_path</code>中, 文件名是<code>[TIMESTAMP]_gitlab_backup.tar</code>. <code>TIMESTAMP</code> 是时间+版本</p><h3 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 12.2 以上</span></span><br><span class="line">sudo gitlab-backup create</span><br><span class="line"><span class="meta">#</span><span class="bash"> 12.2 以下</span></span><br><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p><code>12.0--&gt; 12.1 --&gt;  12.10 -&gt; 13.0 -&gt; 13.1-&gt; 13.8 -&gt; 13.12 -&gt; 14.0 -&gt; 14.1 -&gt; 14.2</code></p><p>详细版本: </p><p><code>12.1.17-ce.0.el7 -&gt; 12.10.17 -&gt; 13.0.14 -&gt; 13.1.11 -&gt; 13.8.8 -&gt; 13.12.12 -&gt; 14.0.11 -&gt; 14.1.8 -&gt; 14.2.6</code></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5介绍及下载</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/Spring%E4%BB%8E0%E5%AD%A6%E4%B9%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/Spring%E4%BB%8E0%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载地址: <a href="https://repo.spring.io/ui/native/release/org/springframework/spring/5.3.14">https://repo.spring.io/ui/native/release/org/springframework/spring/5.3.14</a></p></li><li><p>新建普通Java工程, 导入Spring中的beans、context、core、expression四个jar包以及commons-logging-1.1.1.jar</p></li><li><p>使用Spring的方式新建对象及调用方法</p></li><li><p>新增xml</p><ol><li>配置<bean></li></ol></li><li><p>测试</p><ol><li><pre><code class="java">ApplicationContext context = new ClassPathXml...context.getBean();</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付-合单支付</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E6%94%AF%E4%BB%98/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E7%94%B5%E5%AD%90%E5%8F%91%E7%A5%A8/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E6%94%AF%E4%BB%98/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E7%94%B5%E5%AD%90%E5%8F%91%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="微信开电子发票的一些流程"><a href="#微信开电子发票的一些流程" class="headerlink" title="微信开电子发票的一些流程"></a>微信开电子发票的一些流程</h2><ol><li>获取access_token : <a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</a></li></ol><p>​    <em>全局凭证, 小程序绑定公众号后可以直接拿小程序的AppID及AppSecret获取</em></p><span id="more"></span><p>​    <code>GET https://api.weixin.qq.com/cgi-bin/token?    grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</code></p><ol start="2"><li><ul><li>获取自身开票码及建立自己的开票平台: <a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Invoicing_Platform_API_List.html*%E6%8F%90%E5%89%8D%E8%8E%B7%E5%BE%97">https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Invoicing_Platform_API_List.html*提前获得</a>, 不会变*</li><li> 第三方会收费: </li><li><a href="https://developers.weixin.qq.com/community/develop/doc/0000eaef0fca486a68485b6e256000">https://developers.weixin.qq.com/community/develop/doc/0000eaef0fca486a68485b6e256000</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000e8c585c402065d3794afbe5bc09?_at=1640577066140">https://developers.weixin.qq.com/community/develop/doc/000e8c585c402065d3794afbe5bc09?_at=1640577066140</a></li></ul></li></ol><ol start="3"><li>正式开始开票: <a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List.html">https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List.html</a></li></ol><ol start="3"><li><ol><li>先绑定与开票平台的关系:<a href="https://api.weixin.qq.com/card/invoice/setbizattr?action=set_pay_mch&amp;access_token=%7Baccess_token%7D">https://api.weixin.qq.com/card/invoice/setbizattr?action=set_pay_mch&amp;access_token={access_token}</a></li><li>前端调用: <a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=wx_card%E6%89%93%E5%BC%80%E6%8E%88%E6%9D%83%E7%95%8C%E9%9D%A2">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=wx_card打开授权界面</a></li><li>同上: <a href="https://api.weixin.qq.com/card/invoice/getauthurl?access_token=%7Baccess_token%7D">https://api.weixin.qq.com/card/invoice/getauthurl?access_token={access_token}</a> 将信息传递给微信</li><li>去公众号下载电子发票, 将电子发票上传到开票平台, 然后发送到用户卡包</li></ol></li></ol><blockquote><p>小程序开具电子发票的步骤如下：<br>1 提前获取开票平台标识s_pappid，因为同一个开票平台的s_pappid都相同，所以获取s_pappid的操作只需要进行一次。不同接入模式获取s_pappid的方法略有不同：</p><p><strong>如果商户接入模式为“自建平台模式”：s_pappid通过调用调用<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Invoicing_Platform_API_List">开票平台接口列表</a>接口获得</strong></p><p>2 商户获取获取access_token。调用方法见获取<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token">获取Access token</a>；<br>3 设置商户联系方式。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List">商户接口列表</a>。注意，本步骤不能忽略，否则将造成下一步获取授权页报错；<br>4 商户获取授权页ticket。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List">商户接口列表</a>；<br>5 商户获取授权页url，上一步获取的授权页ticket将作为参数传入。另外，本环节里面作为参数传入的order_id要注意保留，传递给开票平台作为向用户提供电子发票的依据。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List">商户接口列表</a>；<br>6 在小程序开票按钮的点击事件上部署跳转到小程序授权页的逻辑。上一步获得的auth_url和开票小程序appid要作为参数传入。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List">商户接口列表</a>；<br>7 商户在后台等待接收用户的授权完成事件，获取授权事件方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Vendor_API_List">商户接口列表</a>；<br>8 创建发票卡券模板。发票卡券模板应和背后的开票主体构成一一对应关系，便于后续若开票主体发生变化时，可以便捷修改。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Invoicing_Platform_API_List">开票平台接口列表</a>；<br>9 在自建发票平台开具电子发票；<br>10 上传发票PDF文件。此步骤获得的s_media_id起到关联PDF和发票卡券的作用，将作为参数在下一步的插卡接口中传入。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Invoicing_Platform_API_List">开票平台接口列表</a>；<br>11 将电子发票添加到用户微信卡包。调用方法见<a href="https://developers.weixin.qq.com/doc/offiaccount/WeChat_Invoice/E_Invoice/Invoicing_Platform_API_List">开票平台接口列表</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用RestTemplate上传文件</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/%E4%BD%BF%E7%94%A8RestTemplate/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/%E4%BD%BF%E7%94%A8RestTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="Post上传文件"><a href="#Post上传文件" class="headerlink" title="Post上传文件"></a>Post上传文件</h2><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">doPostRest</span><span class="params">(String url, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">  RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">  HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">          headers.setContentType(MediaType.parseMediaType(ContentType.MULTIPART_FORM_DATA.getMimeType()));</span><br><span class="line">  MultiValueMap&lt;String, Object&gt; from = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">      <span class="comment">// 如果是MultipartFile, 那么就需要进行转化</span></span><br><span class="line">      <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> MultipartFile) &#123;</span><br><span class="line">        MultipartFile file = (MultipartFile) entry.getValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ByteArrayResource resource = <span class="keyword">new</span> ByteArrayResource(file.getBytes()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          from.add(entry.getKey(), resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        from.add(entry.getKey(), entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; entity = <span class="keyword">new</span> HttpEntity&lt;&gt;(from, headers);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> restTemplate.postForObject(url, entity, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="被请求接口"><a href="#被请求接口" class="headerlink" title="被请求接口"></a>被请求接口</h2><p>一个普通的post的接口, 同时接受数据及文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">uploadAssets</span><span class="params">(AssetsInfo assetsInfo, <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile multipartFile)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> assetsService.uploadAssets(assetsInfo, multipartFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重点代码"><a href="#重点代码" class="headerlink" title="重点代码"></a>重点代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayResource resource = <span class="keyword">new</span> ByteArrayResource(file.getBytes()) &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将文件转化为字节数组,然后传递给Spring提供的ByteArrayResource, 同时重载获取文件名称的方法,将文件名传递.</p><p>这里是必须将文件转化的, 不转化会报错!</p><p><strong>如果是FIle</strong> : 处理成MultipartFile, 或修改接口</p><ul><li><strong>将File转化为MultiparFile</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MultipartFile multipartFile = <span class="keyword">new</span> MockMultipartFile(</span><br><span class="line">  filePath,</span><br><span class="line">fileName,</span><br><span class="line">  ContentType.TEXT_PLAIN.getMimeType(),</span><br><span class="line">  <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filePath))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>修改方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">fileInputStream.read(bytes);</span><br><span class="line">ByteArrayResource resource = <span class="keyword">new</span> ByteArrayResource(bytes) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>上面两个方法不是很推荐, 一般来说,使用场景大多是: 前端传文件过来, 后端提交给第三方接口, 如果没有前端那么上面的第二个方法最好自己优化下, 其实转化是比较好的, 因为Spring已经帮我们优化好了.</p><p><strong>如果是前端传的</strong>:那么接受时直接用MultiparFile即可</p><h2 id="小扩展"><a href="#小扩展" class="headerlink" title="小扩展"></a>小扩展</h2><p>Spring 将输入流转化字节数组的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MockMultipartFile</span><span class="params">(String name, <span class="meta">@Nullable</span> String originalFilename, <span class="meta">@Nullable</span> String contentType, InputStream contentStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, originalFilename, contentType, FileCopyUtils.copyToByteArray(contentStream));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] copyToByteArray(<span class="meta">@Nullable</span> InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">4096</span>);</span><br><span class="line">            copy((InputStream)in, (OutputStream)out);</span><br><span class="line">            <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实用到的是ByteArrayOutputStream, 再往下看到的代码可读性就不高了, 等什么时间搞一搞源码再继续扩展吧</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RestTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷开发之使用jenkins及github自动化部署spingboot项目</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E4%BD%BF%E7%94%A8jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E4%BD%BF%E7%94%A8jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>​         </p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Jenkins 和 Hodson 同源, 09年甲骨文收购sun, 11年甲骨文和开源决裂</p><p>原开发团队建立了Jenkins</p><p>甲骨文保持Hodson</p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>推送–&gt; git , 钩子程序 –通知–&gt; jenkins –&gt; git 源码 –&gt; maven 打包 –&gt; 服务器部署</p><h2 id="集成环境"><a href="#集成环境" class="headerlink" title="集成环境"></a>集成环境</h2><p>三个虚拟机:</p><ul><li>项目管理系统</li><li>应用部署系统</li><li>jenkins</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接运行war包即可</p><h2 id="Jenkins集成插件"><a href="#Jenkins集成插件" class="headerlink" title="Jenkins集成插件"></a>Jenkins集成插件</h2><p>进入主界面, 点击<code>Manage Jenkis</code>, 然后点击 <code>Global Tool Configuration</code>, 进行 maven, jdk, git的配置</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20220105093653.png" alt="image-20220105093653093"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>GIT 插件自带</p><p>安装SSH插件<a href="https://plugins.jenkins.io/publish-over-ssh">Publish Over SSH</a></p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><hr><p>先记录一个重点: </p><p>使用ssh插件上传并部署jar包时, 需要注意Jenkis在ssh结束时会杀死所有jenkis开启的子进程, 自然也就包含了我们使用脚本启动的项目, 所以需要在脚本里面加下面两行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">// 这里是停止等命令</span><br><span class="line">....</span><br><span class="line">// 不要杀我</span><br><span class="line">BUILD_ID=dontKillMe</span><br><span class="line">// 启动</span><br><span class="line">nohup java jar **** </span><br></pre></td></tr></table></figure><p>需要注意的是: 不能只加<code>BUILD_ID=dontKillMe</code>,很多博客都是写的加这一行就行, 我试了很多次,就是不行,因为必须要加<code>source /etc/profile</code></p><hr><p>重点二</p><p>自定义参数:</p><p>name:value形式, 设置完成后会变成环境变量,使用时通过${name}方式调用, win使用%name%形式调用 </p><hr><p> brunch git的分支，作为部署时的可修改参数</p><p>　　target_host 部署的目标机器，可以是ip，也可以在hosts里面添加代理（后面补充）</p><p>　　war_path 项目打包完成之后的包所在路径</p><p>　　deploy_path 部署在目标服务器上面的路径</p><p>　　app_name 部署的应用的名称</p><p>　　tar_name　打包完成之后的压缩包的名字（这里不是达成jar，而是压缩包）</p>]]></content>
      
      
      <categories>
          
          <category> 快捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Shadowsocks 搭建VPN</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/VPN/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/VPN/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>首先购买一台香港服务器, 不用太大,1核4G就可以了.</p><p><a href="https://www.ucloud.cn/site/active/kuaijie.html?utm_source=bdsem&utm_medium=search&utm_campaign=D03&utm_term=%E9%A6%99%E6%B8%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8&ytag=%E9%A6%99%E6%B8%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8_D03_bdsem_search#xianggang">服务器购买地址</a></p><p>合理的薅羊毛</p><span id="more"></span><h2 id="一些大坑"><a href="#一些大坑" class="headerlink" title="一些大坑"></a>一些大坑</h2><p><strong>服务器系统选择</strong></p><p>服务器系统如果选<strong>centos</strong> 一定要选 <strong>centos7.2</strong>,  官方推荐使用<strong>ubtubu</strong>,但是博主是先百度的,所以,,,,, 就一脚踩进了centos的坑, 等看到官网推荐时已经晚了. 大哭.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211215165753.png" alt="image-20211215165753314"></p><p><strong>为什么选centos7.2?</strong></p><p>因为<strong>centos8.</strong>* 没有python!!!!  具体是系统原因还是服务商搞的鬼就不太清楚了.</p><p><strong>下载pip</strong></p><p>不先下这个会很糟心的, 官方下载需要用pip,然而,Shadownsocks官方使用的下载方式,下载不下来pip, 神不神奇?就是这么神奇!!!</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211215161945.png" alt="image-20211215161945484"></p><p>这么去下载, 会提示库里没有 python-setuptools 和 pip</p><p>所以要这么下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载python 2.7版本的pip</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 setuptools  好像不用? 忘记了呢</span></span><br><span class="line">pip install setuptools </span><br></pre></td></tr></table></figure><h2 id="安装及升级"><a href="#安装及升级" class="headerlink" title="安装及升级"></a>安装及升级</h2><p>直接使用pip 安装 , 安装的是2.8.2版本,所以可以先安装后升级, 也可以直接安装3.0.0版本的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载的是2.8.2 不支持 AEAD</span></span><br><span class="line">pip install shadowsocks</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级到3.0.0</span></span><br><span class="line"> pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>直接启动</p><p><code>ssserver -p 443 -k password -m aes-256-gcm</code> </p><ul><li>aes-256-gcm 2.8.2建议使用rc4-md5</li><li>shadowsocks 最新版已经不再支持<strong>流加密</strong>, 所以推荐升级</li></ul><p>后台启动</p><p><code>sudo ssserver -p 443 -k password -m aes-256-gcm --user nobody -d start</code></p><p>关闭</p><p><code>sudo ssserver -d stop</code></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.9.4/ShadowsocksX-NG.1.9.4.zip">mac 下载</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.4.0.0/Shadowsocks-4.4.0.185.zip">windows 下载</a></p><h2 id="连接VPN"><a href="#连接VPN" class="headerlink" title="连接VPN"></a>连接VPN</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211215172758.png" alt="image-20211215172758883"></p><p>配置服务启动时设置的端口号、加密方式、和密码以及服务器的IP地址,即可使用</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211215172902.png" alt="image-20211215172902240"></p><p>大功告成!!!</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构之路----二叉树</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%20/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%20/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p><strong>树</strong>是<strong>非线形</strong>的数据结构, 它是由n(n&gt;=0)个有限节点组成的具有层次关系的集合.  因为像倒立的树,所以被称为 <strong>树</strong>.<strong>树的根在上方,叶在下方</strong>.</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/b6407bf0c4514cb5877233a256bab977.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd3d6enp6enp6enp6enp6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><blockquote><p><strong>节点的度</strong>：一个节点含有的子树的个数称为该节点的度； 如上图：A的为6<br><strong>树的度</strong>：一棵树中，最大的节点的度称为树的度； 如上图：树的度为6<br><strong>叶子节点或终端节点</strong>：度为0的节点称为叶节点； 如上图：B、C、H、I…等节点为叶节点<br><strong>双亲节点或父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点； 如上图：A是B的父节点孩<br>子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点； 如上图：B是A的孩子节点<br><strong>根结点</strong>：一棵树中，没有双亲结点的结点；如上图：A<br><strong>节点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；<br>树的高度或深度：树中节点的最大层次； 如上图：树的高度为4<br><strong>非终端节点或分支节点</strong>：度不为0的节点； 如上图：D、E、F、G…等节点为分支节点<br><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点； 如上图：B、C是兄弟节点<br><strong>堂兄弟节点</strong>：双亲在同一层的节点互为堂兄弟；如上图：H、I互为兄弟节点<br><strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点；如上图：A是所有节点的祖先<br><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是A的子孙<br><strong>森林</strong>：由m（m&gt;=0）棵互不相交的树的集合称为森林</p></blockquote><p>协助记忆:</p><blockquote><p>​    树可以看作父系族谱,  只有父亲没有母亲那种.</p><p>​    那么最开始的节点,就是<strong>根</strong>节点,也就是所谓的<strong>祖先</strong>节点.  从祖先节点分下来的当然就是<strong>子孙</strong>节点了.</p><p>​    有的子孙有孩子,有的没有, <strong>有孩子的就是父节点</strong>,没有的就是<strong>叶子节点或终端节点</strong>,毕竟他这一脉就到头了,所以是叶子,大树的叶子可不会分叉.</p><p>​    有多少孩子,就有多少话语权,生的越多越厉害,而这个话语权就是<strong>度</strong> . 整个家族的<strong>度</strong>是以孩子最多的节点算的, 就像是世界纪录一样, 孩子最多的就是世界纪录,  只有另一个打破了记录,那么世界纪录就变成新的了. <strong>度也是如此</strong></p><p>​    族谱一代就是树的一层, 树有多少层, 就看最新出生的孩子是多少代.  比如上图,就是3层.</p><p>​    兄弟节点就是 一个父亲.  堂兄弟节点就是父亲兄弟们的孩子  </p></blockquote><p>​    </p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>顾名思义, 就是只有两个分叉的树, 正是如此, 二叉树的定义就是:</p><blockquote><p>二叉树是n个有限的元素集合, 它只有两个子树,分为左子树和右子树,并且顺序不能颠倒,是有序树</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211213164933.png" alt="image-20211213164933389"></p><ul><li><strong>满二叉树</strong>: 一个二叉树,每一层的结点都达到最大值, 那么它就是满二叉树. 上图表示的就是满二叉树. 算式: 如果一个二叉树,层数是k, 节点总数是 <code>(2ˆk)-1</code> 那么它就是满二叉树</li><li><strong>完全二叉树</strong> : 一个二叉树,是根据满二叉树得来的, 一个二叉树的节点n-1层都是最大节点树,并且n层节点, 连续集中在最左边就是完全二叉树.  满二叉树也是完全二叉树, 是特殊的. 上图既是满二叉树又是完全二叉树, 并且从右下角往左依次减少的,都是完全二叉树,比如这样:<img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211213174642.png" alt="image-20211213174642068"></li></ul><p>这样: <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211213174656.png" alt="image-20211213174656023"></p><p>但这样就不是了, 因为n层没有连续排序: <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211213174739.png" alt="image-20211213174739141"></p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>如果N代表根节点，L代表根节点的左子树，R代表根节点的右子树，则根据遍历根节点的先后次序有以下遍历方式：</p><ul><li>NLR：前序遍历(Preorder Traversal 亦称先序遍历)——访问根结点—&gt;根的左子树—&gt;根的右子树。</li><li>LNR：中序遍历(Inorder Traversal)——根的左子树—&gt;根节点—&gt;根的右子树。</li><li>LRN：后序遍历(Postorder Traversal)——根的左子树—&gt;根的右子树—&gt;根节点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件压缩</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/%5BIO%5D%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/%5BIO%5D%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><p>运用ZipOutputStream进行文件压缩</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipFile</span><span class="params">(String sourcePath, String fromat)</span> throw Exception</span>&#123;</span><br><span class="line">  File file = <span class="keyword">new</span> File(sourcePath);</span><br><span class="line">  <span class="keyword">if</span> (!file.exist()) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;目标&quot;</span> + sourcePath + <span class="string">&quot;没有文件, 无法压缩&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 压缩在同级目录下</span></span><br><span class="line">  File parent = <span class="keyword">new</span> File(file.getParent());</span><br><span class="line">String targetName = parent.getAbsolutePath() + File.separator + file.getName() + <span class="string">&quot;.&quot;</span> + suffix;</span><br><span class="line">  FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(targetName);</span><br><span class="line">  ZipOutputStream zipOutputStream = <span class="keyword">new</span> ZipOutputStream(outputStream);</span><br><span class="line">  <span class="comment">// 去压缩</span></span><br><span class="line">generateFile(zipOutputStream, file, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  zipOutputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateFile</span><span class="params">(ZipOutputStream out, File file, String dir)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">    File[] flieList = file.listFiles();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建立上级目录的压缩条目</span></span><br><span class="line">    out.putNextEntry(<span class="keyword">new</span> ZipEntry(dir));</span><br><span class="line">    dir = dir.length == <span class="number">0</span> : <span class="string">&quot;&quot;</span> ? dir + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (File sonFile : fileList)&#123;</span><br><span class="line">      generateFile(out, sonFile, dir + sonFile.getName())</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 是文件, 那么压缩写入</span></span><br><span class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="comment">// 标记当前文件的条目</span></span><br><span class="line">    out.putNextEntry(<span class="keyword">new</span> ZipEntry(dir));</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 进行写操作</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] temp = <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>((len = input.read(<span class="keyword">byte</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      out.write(temp, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭输入流</span></span><br><span class="line">    input.close();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus 手写sql时一直报</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mybatis/Mybatis-plus%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E8%A6%81%E6%96%B0%E5%BB%BAxml/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mybatis/Mybatis-plus%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E8%A6%81%E6%96%B0%E5%BB%BAxml/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p><code>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</code></p><p>就像血常规一样常规的问题, 明显的是没扫描到<code>xml</code>文件嘛, 简单</p><span id="more"></span><h2 id="抽风一样的解决"><a href="#抽风一样的解决" class="headerlink" title="抽风一样的解决"></a>抽风一样的解决</h2><p>然后灾难就开始了</p><p>首先配置<strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">mapper-locations:</span> <span class="string">classpath:/com/XXX/**/*.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其次配置<strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- xml放在java目录下--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--指定资源的位置（xml放在resources下，可以不用指定）--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自信满满,启动, 好嘛, 同样的错误, 去查官方文档:</p><p>一模一样的解决方法:</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211209182010.png" alt="image-20211209182010520"></p><p>这怎么有错呢? 不应该吖, 然后陷入抽风状态, 开始各种搜索, 修改,但是百变不离其中, 还是这几个地方.</p><h2 id="冷静解决"><a href="#冷静解决" class="headerlink" title="冷静解决"></a>冷静解决</h2><p>​    仔细想想, 哪里不对呢? 和官方哪里有差别呢?</p><p>​    然后发现<strong>application.yml</strong> 好像没有完全一致, 那么一切以官方为主, 不一样的就改成一样的.</p><p>​    <em>最终发现, 是因为用的办法不伦不类造成的, 博主是直接在*<em>mybatis-plus</em></em> 提供的xml文件下直接增加的sql, 然后就造成了怎么都解决不掉报错问题*</p><p>那么问题锁定, 开始解决, 将方法、sql提取, 放到一个新的类里, sql放到<code>resources/mapper</code> 下, 将<strong>application.yml</strong>改成官方配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><p>再次启动, 成功!!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基础很重要, 基础不牢就要踩坑!!</p><p>mybatis-plus 与mybatis使用方式略有不同, 不要混用</p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/git%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><strong>新增分支</strong>:  <code>git branch test</code></p><span id="more"></span><p><strong>删除分支</strong>:<code>git brnach -d test</code></p><p><strong>强制删除</strong>:<code>git branch -D test</code></p><p><strong>删除远程分支</strong>:<code>git push orgin --delete test</code></p><p><strong>查询所有分支</strong> : <code>git branch -a</code></p><p><strong>同步远程分支并在本地新建</strong>:<code>git checkout -b name origin/name</code></p><p><strong>切换并新建</strong>:<code>git checkout -b name</code></p><p><strong>撤销多次暂存</strong>：<code>git rest --soft HEAD~n</code> n是数字，几便代表几次commit</p><h2 id="贮藏"><a href="#贮藏" class="headerlink" title="贮藏"></a>贮藏</h2><p><strong>贮藏</strong>:<code>git stash</code>or <code>git stash push</code></p><p><strong>查询贮藏列表</strong>:<code>git stash list</code></p><p><strong>应用贮藏</strong>:<code>git stash apply</code> or <code>git stash apply stash@&#123;2&#125;</code></p><p><strong>删除</strong>:<code>git stash drop stash@&#123;&#125;</code></p><p><strong>推出(应用并删除)</strong>: <code>git stash pop</code></p><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p><strong>撤销未add的代码</strong>:<code>git checkout .</code> </p><p><strong>撤销指定文件未add的代码</strong>:<code>git checkout -- file</code></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p><strong>修改上次提交</strong>:<code>git commit --amend</code><br><strong>分段提交</strong>:<code>git add -p</code><br><strong>撤销提交到上次暂存</strong>:<code>git reset --soft HEAD^</code> </p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据特定顺序查询</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E7%89%B9%E5%AE%9A%E9%A1%BA%E5%BA%8F%E6%9F%A5%E8%AF%A2/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E7%89%B9%E5%AE%9A%E9%A1%BA%E5%BA%8F%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="根据特定顺序查询"><a href="#根据特定顺序查询" class="headerlink" title="根据特定顺序查询"></a>根据特定顺序查询</h3><p>有这个一个需求, 根据User.status进行查询, 并且按2,1,0,4,3 进行查询.</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,`status`,name order by field(`status`, 2, 1, 0, 4, 3);</span><br></pre></td></tr></table></figure><p>查询完成:</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211208153619.png" alt="image-20211208153619434"></p><p>哦, 灾难来了, status居然有null,  那么null 放到最后应该怎么做呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `id`,`name`, `status` from test_user order by  `status` is null, field(`status`, 2,1,0,4,3);</span><br></pre></td></tr></table></figure><p>查询得到了我们想要的结果:</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211208154040.png" alt="image-20211208154040567"></p><p>那么好玩的来了, 将null也参与到排序中, 完成2,1,0,null,4,3 的排序应该怎么做呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `id`,`name`, `status` from test_user order by field(`status`,4,3), `status` is null, field(`status`, 2,1,0) ;</span><br></pre></td></tr></table></figure><p> 查询完成:</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211208154258.png" alt="image-20211208154258093"></p><p>值得一提的是: 当需要排在最前面的, 在order by 中 要放到最后. 依此类推.</p><p>ps: 仅限于同参数特殊排序, 不同列排序依旧是谁在前谁的权重高,以谁为主</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expect 命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/expect/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/expect/</url>
      
        <content type="html"><![CDATA[<h3 id="发文件到服务器"><a href="#发文件到服务器" class="headerlink" title="发文件到服务器"></a>发文件到服务器</h3><p>​    先搞个实例, 省的忘记写</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"># 配置延迟时间</span><br><span class="line">set timeout 2</span><br><span class="line"># 获取第1个传参</span><br><span class="line">set name [lrange $argv 0 0]</span><br><span class="line">set user [lrange $argv 1 1]</span><br><span class="line"># spawn 传递交互命令</span><br><span class="line"># $name 使用变量</span><br><span class="line">spawn scp /home/$name $user@ip:path</span><br><span class="line"></span><br><span class="line">expect &quot;password:&quot;</span><br><span class="line">send &quot;password\r&quot;</span><br><span class="line"></span><br><span class="line"># 保持在远端, 传完文件后会自动关闭</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>使用:</p><p><code>expect test.exp name user</code></p>]]></content>
      
      
      <categories>
          
          <category> 快捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> expect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷开发</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/%E6%A3%80%E9%AA%8C%E6%98%AF%E5%90%A6%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8idea/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/%E6%A3%80%E9%AA%8C%E6%98%AF%E5%90%A6%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8idea/</url>
      
        <content type="html"><![CDATA[<ul><li><p><input checked="" disabled="" type="checkbox">  当编辑文本时，以字符、单词、行、段落为单位移动光标及进行选择。 </p><ul><li><p><input checked="" disabled="" type="checkbox">  以列为单位:<code> shfit + command + 8</code></p></li><li><p><input checked="" disabled="" type="checkbox">  单词 : <code>option + 左右键</code> </p></li><li><p><input checked="" disabled="" type="checkbox">  行 <code>command + 左右键</code></p><span id="more"></span></li></ul></li><li><p><input checked="" disabled="" type="checkbox">  当编辑代码时，在各种语法单元（配对的分隔符、函数、模块……）之间移动。 </p><ul><li><input checked="" disabled="" type="checkbox"> <code>option+command+[]</code> 移动到花括号启止</li><li><input checked="" disabled="" type="checkbox"> <code>shift  + option + command + []</code>选中花括号内 的内容</li></ul></li><li><p><input disabled="" type="checkbox">  做完修改后，重新缩进代码。 <code>command + shift + L</code> </p></li><li><p><input checked="" disabled="" type="checkbox">  用单个指令完成代码块的注释或取消注释。 <code>ctrl + /</code></p></li><li><p><input checked="" disabled="" type="checkbox">  Undo 并 Redo变更。 ctrl + z  | shift + ctrl + z</p></li><li><p><input checked="" disabled="" type="checkbox">  把编辑窗口切割成多个面板，然后在它们之间跳转。</p><ul><li><input checked="" disabled="" type="checkbox"> <code>shift + 回车</code>切割成多个面板, 选中类时才能切割</li><li><input checked="" disabled="" type="checkbox"> <code>option + tab</code> 跳转面板</li><li><input checked="" disabled="" type="checkbox"> <code>shift + option + tab</code> 跳转前一个面板</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  跳转到特定的行号。 <code>command + L</code></p></li><li><p><input disabled="" type="checkbox">  对选出的多行进行排序。</p></li></ul><ul><li><input disabled="" type="checkbox"> 搜索普通字符串，或用正则表达式搜索，然后重复上一次的搜索。</li></ul><ul><li><input disabled="" type="checkbox"> 基于框选或某个模式匹配的结果，临时创建多个光标，并行地在多个光标处编辑文本。</li><li><input disabled="" type="checkbox"> 显示当前项目的编译错误。</li></ul><ul><li><input disabled="" type="checkbox"> 跑一下当前项目的测试</li></ul>]]></content>
      
      
      <categories>
          
          <category> 快捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/shell%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/shell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>新建文件 <code>vim name.sh</code></p><span id="more"></span><p>格式: 每个sh文件中开头都需要有这一行代码 <code>#!/bin/bash</code>,  这是用来标识使用的语言是什么. </p><blockquote><p><code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>test=&quot;hello world&quot;</code></p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线 **_**。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>​    <em>需要注意的是: 如果使用命令行赋值以及直接运行命令行,都需要将命令行封装在<code>$()</code>中, 不然命令行不会生效哦,具体例子,用到的时候写</em></p><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><blockquote><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p></blockquote><p>脚本: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;传递参数&quot;;</span><br><span class="line">echo &quot;执行文件名: $0&quot;;</span><br><span class="line">echo &quot;第一个参数: $1&quot;;</span><br><span class="line">echo &quot;第二个参数: $2&quot;;</span><br><span class="line">echo &quot;第三个参数: $3&quot;;</span><br></pre></td></tr></table></figure><p>执行:  因为没有给全局权限, 所以要加sh (大概?)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh ./test.sh 1 2 3</span></span><br><span class="line">传递参数</span><br><span class="line">执行文件名: ./test.sh</span><br><span class="line">第一个参数: 1</span><br><span class="line">第二个参数: 2</span><br><span class="line">第三个参数: 3</span><br></pre></td></tr></table></figure><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><p><code>ps [options]</code></p><hr><p>待续</p><hr>]]></content>
      
      
      <categories>
          
          <category> 快捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 快捷命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IDEA%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IDEA%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA-快捷命令"><a href="#IDEA-快捷命令" class="headerlink" title="IDEA 快捷命令"></a>IDEA 快捷命令</h2><h3 id="工作台-终端"><a href="#工作台-终端" class="headerlink" title="工作台(终端)"></a>工作台(终端)</h3><p>打开工作台: <code>option + F12</code></p><span id="more"></span><p>切换工作台: </p><ul><li>左移 <code>shift + command + [</code></li><li>右移 <code>shift +  command +  ]</code></li></ul><p>移动工作台: </p><ul><li>左移: <code>shift + option + command + &lt;</code></li><li>右移: <code>shift + option + command + &gt;</code></li></ul><h3 id="设置中的"><a href="#设置中的" class="headerlink" title="设置中的"></a>设置中的</h3><ul><li>查找用法: option + F7   查找使用的地方</li><li><code>option + command + F7</code> 显示使用</li><li><code>command + F7</code>  在文件中查询 ==<code>ctrl + f </code>并输入选中的字符</li><li><code>shfit + command + F7</code> 突显查询结果</li><li><code>ctrl + tab</code> 展示所有已打开的tab, 并选择打开</li><li><code>shift + command + []</code> 可以切换tab页, 使用左右的快捷键可以左右移动</li><li><code>option + ⬆️</code> 选择单词, 再按选择更多</li><li><code>option + ⬇️</code> 选择单词, 再按选择更少, 最少为不选择</li><li><code>option + shift + ⬅️</code>向左选择一个单词, 再按选择更多</li><li><code>option + shift + ➡️</code>向右选择一个单词, 再按选择更多</li><li><code>command + D</code> 向下复制选择的内容</li><li><code>option + shift + ⬆️</code> 将选中的行或段落上移一行</li><li><code>option + shift + ⬇️</code> 将选中的行或段落下移一行</li><li><code>option+command+[]</code> 移动到花括号启止</li><li><code>shift  + option + command + []</code>选中花括号内 的内容</li><li><code>option + space</code> 查看类源码或变量被初始化的地方,  英文模式下才好用</li><li><code>command + L </code> 跳转到指定行与列</li><li><code>command + 9</code> 当前版本中的文件变更</li><li><code>command + F12</code> 查看当前类的接口</li><li><code>option + command + ⬅️➡️</code> 返回上一个(⬅️)|下一个(➡️)光标停留的地方</li><li><code>ctrl + O</code> 查看能重写的方法</li><li><code>ctrl +I</code>查看实现方法</li><li><code>command + O</code> 搜索并打开文件</li><li><code>command + 7</code> 左下角打开当前类接口</li><li><code>option + command + v</code> 自动生成返回值</li></ul><h3 id="多个编辑面板"><a href="#多个编辑面板" class="headerlink" title="多个编辑面板"></a>多个编辑面板</h3><ul><li><code>shift + 回车</code>切割成多个面板, 选中类时才能切割</li><li><code>option + tab</code> 跳转面板</li><li><code>shift + option + tab</code> 跳转前一个面板</li></ul><h2 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h2><ul><li><p><code>command + F8</code>加DEBUG</p></li><li><p><code>shift + command + F8</code> DEBUG界面</p></li></ul><h3 id="批量更改变量名"><a href="#批量更改变量名" class="headerlink" title="批量更改变量名"></a>批量更改变量名</h3><p><code>ctrl + f6</code>  mac: <code>fn + command + f6</code></p><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><p><code>ctrl + e</code> 去行末</p><p><code>ctrl + a</code> 去行首</p><h2 id="重构代码块"><a href="#重构代码块" class="headerlink" title="重构代码块"></a>重构代码块</h2><p><code>option + command + m</code> 重构代码</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command + option + ` 跳转到下一个项目(window)</span><br><span class="line">command + option + shift + ` 跳转到下一个项目(window)</span><br></pre></td></tr></table></figure><p><code>command + E</code> 打开过的文件视图<br><code>command + shift + E</code> 修改过的文件视图<br><code>shift + command + delete</code> 跳转到上次修改过的位置<br><code>ctrl + shift + delete </code> 跳转回下一次修改过的位置, 自定义快捷键, (Next Edit Location)<br><code>command + U</code> 跳转到父类对应方法<br><code>command + option + U</code> 展示继承关系<br><code>command + B</code> 查询哪里调用及被调用<br><code>option + command + B</code> 调转到实现方法<br><code>shift + command + H</code> 查看父类<br><code>command + 1</code> 跳转到文件区<br><code>esc</code> 返回编辑区</p><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p><code>option + F3</code> 定制书签<br><code>ctrl + shift + 0/1/2../9</code> 定制书签0-9<br><code>ctrl + 0/.../9</code> 跳转到书签<br><code>command + F3</code> 展示所有书签</p><h2 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h2><p><code>option + shift + F</code> 收藏类或函数<br><code>command + 2</code> 打开收藏</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><code>option + command + shift + U</code> 创建类图</p><h2 id="已经打开的类tab"><a href="#已经打开的类tab" class="headerlink" title="已经打开的类tab"></a>已经打开的类tab</h2><p><code>command + E</code></p><h2 id="列操作"><a href="#列操作" class="headerlink" title="列操作"></a>列操作</h2><p><code>ctrl + command + G</code>  在选中的相同内容处增加光标<br><code>↖︎ | Home | fn + 右方向键</code> 移动到行头<br><code>↘︎ | End  | fn + 左方向键</code> 移动到行尾<br><code>shift + command + U</code> 大小写转化</p><p><code>command + shift + L</code> 自动调整格式<br><code>F2</code> 跳转到编译异常处</p>]]></content>
      
      
      <categories>
          
          <category> 快捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对比时间差</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/%E5%AF%B9%E6%AF%94%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/%E5%AF%B9%E6%AF%94%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ChronoUnit.MILLIS.between(oldTime, newTime);</span><br><span class="line"><span class="comment">// oldTime &gt; newTime 则返回-n毫秒 反之 返回 n毫秒</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数类型enum</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8Benum/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8Benum/</url>
      
        <content type="html"><![CDATA[<h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><span id="more"></span><p>​    MySql enum类型和java enum类作用相同,都是指定固定的类型.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table `user` add cloumn test enum(&#x27;STUDENT&#x27;,&#x27;TEACHER&#x27;) not null comment &#x27;类型&#x27;;</span><br></pre></td></tr></table></figure><p>那么入库时,该参数就只能保存<code>STUDENT</code> or <code>TEACHER</code>.同时要注意,如果不传的话,默认是第一个枚举即<code>STUDENT</code></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合理利用Git进行项目管理</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/git%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/git%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="git管理方式"><a href="#git管理方式" class="headerlink" title="git管理方式:"></a>git管理方式:</h2><ol><li>每次开发新功能拉取新的分支,分支命名方式如下:<br><code>feature-姓名全拼-分支说明-日期 / feature-分支说明-日期</code></li></ol>  <span id="more"></span><ol start="2"><li><p>新功能开发完成后先单元测试,不着急合并,确认可以进入联调后,将功能合并到dev-2.0.0分支,进行联调测试,联调测试期间出现的bug,从dev分支派生出新的分支进行bug修复,命名规则如下:<br><code>release-版本号</code></p></li><li><p>测试无误后,将release-* 分支合并到dev分支, 确认正式上线时,将dev分支合并到master分支,切换至master分支打包部署.</p></li><li><p>如果master出现bug, 从master分支派生出hotfixes分支,命名规则如下:<br><code>hotfixes-姓名全拼-分支说明-日期</code><br>测试完成后合并至dev及master,重复3中的打包部署操作</p></li><li><p>以上分支除master分支及dev分支外的其他分支,合并结束后即可删除</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql5.7之后 group by 报错问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/Mysql5.7%E4%B9%8B%E5%90%8E%20group%20by%20%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/Mysql5.7%E4%B9%8B%E5%90%8E%20group%20by%20%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>重点哦，所以放前面</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure><span id="more"></span><p>mysql8.0 版本，使用group by 查询所有行数据时会报错，报错信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;transfer.transfer_histroy.id&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.028000s</span><br></pre></td></tr></table></figure><h2 id="bug复现"><a href="#bug复现" class="headerlink" title="bug复现"></a>bug复现</h2><p>sql 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,`to` from transfer_histroy GROUP BY `to`;</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>正确的使用方式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `to` from transfer_history GROUP BY `to`;</span><br></pre></td></tr></table></figure><p>正如报错信息所说 GROUP BY 后跟的行要和 查询的行一致，不能多也不能少。不然就会报错。</p><p>虽然这样可以解决sql报错，但明显不是我们想要的,我们需要的是所有行数据，那么怎么解决呢？</p><p>找到罪魁祸首，没错就是<code>sql_mode=only_full_group_by</code> 因为<code>sql_mode</code> 里面有 <code>only_full_group_by</code> 所以会报错，那么去掉它试试。</p><p>首先查看<code>sql_mode</code> 都有什么，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@global.sql_mode;</span><br><span class="line">结果：</span><br><span class="line">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><p>果不其然，有ONLY_FULL_GROUP_BY，抓到狗了，那么干掉它，copy除<code>NOLY_FULL_GROUP_BY</code>以为的参数，修改<code>sql_mode</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set GLOBAL sql_mode = &quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&quot;</span><br></pre></td></tr></table></figure><p>需要注意的是：可能不是马上生效的，所以要等一会，并且呢，如果是项目使用的需要重启，不然项目还是会报错……</p><p>再次查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,`from` from transfer_record GROUP BY `to`;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211105155059.png" alt="image-20211105155059797"></p><p>拿到结果，问题解决。</p><p>ps: 这种办法不用永久性的，mysql重启就需要重新配置的</p>]]></content>
      
      
      <categories>
          
          <category> bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shrio 302问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Shrio%E9%80%A0%E6%88%90302%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Shrio%E9%80%A0%E6%88%90302%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>​            使用shrio没有在接口上配置权限，所以该接口需要匿名访问，但是配置拦截时配置了该接口路径，就有可能造成302请求。</p><span id="more"></span><ul><li><p>配置了验证：        <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211103112619.png" alt="image-20211103112619362"></p></li><li><p>接口没配置权限</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211103112729.png" alt="image-20211103112729219"></p></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将上述红框的配置注释是最有效的方法，但也要说下为什么：</p><p>​     <code>authc</code> 是开启验证，所以注释掉，或该成<code>anon</code> 都可以，同时要注意不要有<code>filterChainDefinitionMap.put(&quot;**&quot;,authc)</code>因为这样代表所有接口都需要验证。</p>]]></content>
      
      
      <categories>
          
          <category> bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shrio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IText7 入门</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IText7%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IText7%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kb.itextpdf.com/home/it7kb/examples/encrypting-decrypting-pdfs#Encrypting/DecryptingPDFs-encryptpdf">官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> IText </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机查询</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E9%9A%8F%E6%9C%BA%E6%9F%A5%E8%AF%A2/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E9%9A%8F%E6%9C%BA%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="随机查询"><a href="#随机查询" class="headerlink" title="随机查询"></a>随机查询</h2><p>随机查询一个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user order by rand() limit 1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url传Base64解码失败问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/url%E4%BC%A0Base64%E8%A7%A3%E7%A0%81%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E5%9F%BA%E7%A1%80/url%E4%BC%A0Base64%E8%A7%A3%E7%A0%81%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>​    java 使用Http请求接口时，传如了Base64编码的参数，但是解码时失败。</p><span id="more"></span><p>​    造成解码失败的原因是因为 “+” 被http 解析为了空格，因此需要将空格转回“+”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String param = param.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;+&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表情无法入库</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/Mysql%E8%A1%A8%E6%83%85%E6%97%A0%E6%B3%95%E5%85%A5%E5%BA%93%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/Mysql%E8%A1%A8%E6%83%85%E6%97%A0%E6%B3%95%E5%85%A5%E5%BA%93%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="对接微信将微信表情入库时报错字符串超长"><a href="#对接微信将微信表情入库时报错字符串超长" class="headerlink" title="对接微信将微信表情入库时报错字符串超长"></a>对接微信将微信表情入库时报错字符串超长</h2><p>解决： 将对应cloumn的字符格式修改为 utf8mb4</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20211025183224.png" alt="image-20211025183224325"></p><ul><li><p>Character Set 改为utf8mb4</p></li><li><p>Collation改为utf8mb4_bin</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot 无法读取jar 中的文件</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96jar%20%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96jar%20%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class path resource [dataSource/dataSource.txt] cannot be resolved to absolute file path because it does not reside in the file system: </span><br><span class="line">jar:file:/app/web/ydb-drug-server/ydb-drug-0.0.1-SNAPSHOT.jar!/BOOT</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;dataSource/dataSource.txt&quot;</span>);</span><br><span class="line">InputStream inputStream = resource.getInputStream();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 语言</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/shell%E8%AF%AD%E8%A8%80/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/shell%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p><code>#!</code> 是一个约定标记，它告诉系统这个脚本用什么解释器来执行。</p><p><code>echo</code> 命令用于向窗口输出文本</p><span id="more"></span><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>可以直接命名不需要$符合，但是赋值时不能有空格，同时变量不能有空格，不能有除_以外的特殊符号。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;小明&quot;</span><br><span class="line">test=&quot;hello&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用</span></span><br><span class="line">echo $your_name</span><br><span class="line">echo &quot;&#123;&#125;可有可无，用来做边界使用，如：$&#123;test&#125;s 和 $tests 是不一样的哦&quot;</span><br></pre></td></tr></table></figure><hr><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小明</span><br><span class="line">&#123;&#125;可有可无，用来做边界使用，如：hellos和  是不一样的哦</span><br></pre></td></tr></table></figure><hr><p>如果不使用{}作为边界，那么系统会将 $tests当成一个变量，其值为空。所以就出现了上述的空现象</p><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">test=&quot;1&quot;</span><br><span class="line">readonly test</span><br><span class="line">test=&quot;2&quot;</span><br></pre></td></tr></table></figure><p>运行会提示</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210923150235.png" alt="image-20210923150235809"></p><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">test=&quot;1&quot;</span><br><span class="line">unset test</span><br><span class="line">echo $test</span><br></pre></td></tr></table></figure><p>没有任何输出</p>]]></content>
      
      
      <categories>
          
          <category> 解释型语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO 学习--</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/NIO%E5%AD%A6%E4%B9%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/NIO%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是IO"><a href="#什么是IO" class="headerlink" title="什么是IO"></a><strong>什么是IO</strong></h1><p>​        IO流用来处理设备之间的数据传输的，在Java中，对于数据的输入与传输都是以“流”的方式进行的，java.io 包下提供了各种“流‘类的接口，用以获取不同的种类的数据，并通过标准的方法输入或输出数据。</p><span id="more"></span>        <p>java把这些不同来源和目标的数据的统一抽象为数据流。</p><p>​        流根据不同的流向分为 </p><p>​                输入流： 程序读取的</p><p>​                输出流： 程序写入的</p><p>​        同时根据不同的类型分为：</p><p>​                字节流：以 字节为单位，</p><p>​                        对应的读\写方法为：InputStream\ OutputStream.</p><p>​                字符流：以字符为单位，</p><p>​                        对应的读\写方法为：Reader \ Writer</p><p>​        java.io 里面的类都分别继承了上述抽象类。</p><h1 id="什么是NIO"><a href="#什么是NIO" class="headerlink" title="什么是NIO"></a><strong>什么是NIO</strong></h1><p>​    上述提到的IO表述了 IO流是什么，而IO流在进行读写时是阻塞的，也就是，来一条处理一条，而后来的只能等先来的处理完，就像是去某行窗口办业务一样，后来的要排队等着，这就是传统的阻塞IO。</p><p>​    而为了提高效率，那么就引入了线程池，而线程池的好处就是避免重复打开关闭，做到线程的复用。但是常驻线程和最大线程数以及阻塞 线程数 也达到了最大数，那么此时在 进入时就会被拒绝。</p><p>​        线程池就像是新增窗口，窗口不会被反复打开关闭，但是新增的窗口是有 上限的，当窗口被占满就需要排队，进入阻塞 队列，而到整个大厅都满了以后，就只能 禁止进入，也就是拒绝。</p><p>​    那么NIO是什么呢？ 我也不知道，咳咳，开个玩笑，快去学。</p><blockquote><p>NIO中非阻塞IO采用了基于reactor模式的工作方式，I/O调用不会被阻塞，相反是注册感兴趣的特定I/O事件，如：可读数据到达，新的套接字链接等等，在发生特定事件时，系统再通知我们。NIO中实现非阻塞I/O的核心对象就是Selector；</p></blockquote><p>​    那么Selector是什么呢？</p><p>​    在提Selector之前，就需要介绍下NIO的组成部分了。NIO分为三个部分组成：</p><ul><li>Selector</li><li>Reactor</li></ul><p>​    </p><blockquote><p>Selector就是注册各种I/O事件的地方，当我们感兴趣的事件发生时，它就会告诉我们所发生的事件。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210915112813.png"></p><blockquote><p>当有读或血等任何注册的事件发生时，可以从Selector中获得相应的SelectionKey，同时从SelectionKey中可以找到发生事件及该事件所发生（或者绑定更好？）的SelectableChannel，</p></blockquote><p>​    NIO的本质是<strong>延迟IO操作到真正发生IO的时候</strong> ，而不是以前的只要IO流打开了就一直等待IO操作。</p><h1 id="区别是什么？"><a href="#区别是什么？" class="headerlink" title="区别是什么？"></a><b>区别是什么？</b></h1><h1 id="优缺点？"><a href="#优缺点？" class="headerlink" title="优缺点？"></a><strong>优缺点？</strong></h1><h1 id="NIO应用场景"><a href="#NIO应用场景" class="headerlink" title="NIO应用场景"></a><strong>NIO应用场景</strong></h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 语法</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/obsidian/markdown%20%E8%AF%AD%E6%B3%95/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/obsidian/markdown%20%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>​        笔者用的是typora进行 编辑的，typora和csdn都内嵌了html，所以，写文章就像写html一样就好了，而且还是可以实时反馈的。</p><span id="more"></span><p>​        那么接下来先介绍：</p><h3 id="字体修改"><a href="#字体修改" class="headerlink" title="字体修改"></a>字体修改</h3><ul><li><p>color 颜色</p></li><li><p>size 字体大小</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>2<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">1</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一样大哦"><a href="#一样大哦" class="headerlink" title="一样大哦"></a>一样大哦</h1><h1>真的嘛?</h1><h3 id="业内跳转"><a href="#业内跳转" class="headerlink" title="业内跳转"></a>业内跳转</h3><ol><li><p>去1<a href="#test1"><sup>1</sup></a>号位置</p></li><li><p>去字体修改<a href="#%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9"><sup>1</sup></a>号位置</p></li><li><p><a href="#test1">超链接版再去1号</a></p></li><li><p><a href="#sss">去标题</a></p></li></ol><h1 name="sss">标题在这</h1><div name="test1">1号在这里</div><p>三个版本的页内但是很神奇的只有一个可以通用，其他两个只能在typora编辑器里使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 3. 编辑器好用</span><br><span class="line">2. 通用，但是不实用</span><br><span class="line"></span><br><span class="line">1. 使用 跳转标签name的方式</span><br><span class="line">[1](#name)</span><br><span class="line">&lt;div name=&quot;name&quot;&gt;1&lt;/div&gt;</span><br><span class="line">当使用这种方式时，就可以做到点1 跳转到div 1 的位置</span><br><span class="line">3. 使用的方式大同小异，区别在于3使用的是纯h5，也就是超链接</span><br><span class="line">&lt;a href=&quot;#test1&quot;&gt;超链接版再去1号&lt;/a&gt;</span><br><span class="line">这样也可以完成跳转。但遗憾的事，这两种办法只能在cdsn或编译器用。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ngrok.cc/user.html">https://www.ngrok.cc/user.html</a></p><ul><li><input disabled="" type="checkbox"> 这样才行</li></ul>]]></content>
      
      
      <categories>
          
          <category> ssl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云备份（快照）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/ali/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%87%E4%BB%BD%EF%BC%88%E5%BF%AB%E7%85%A7%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/ali/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%87%E4%BB%BD%EF%BC%88%E5%BF%AB%E7%85%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210810105706.png" alt="自动快照策略"></p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210810105813.png" alt="配置云盘"></p><p>快照链机制：</p><ul><li>快照存储机制：<ul><li>阿里云将快照分为多个存储块，比如A、B、C、D。</li></ul></li></ul><p>如果用户的云盘是500GiB，但是只有了50GIB，那么第一次生成的快照(S1)就是50GIB。</p><p>而第二次快照(S2)是基于第一次进行备份的，如果B更新了那么此时S2记录的就是B更新后的数据，记为B1，同理C也是，记为C1</p><p>当第三次快照(S3)备份时，B1更新，那么记录并记录为B2，其他存储块引用上一快照(S2)的备份。</p><p>那么删除时会发生什么呢？比如此时删除S2快照，那么只有B1被删除，C1因为S3引用被保留，那么此时S3的数据依旧是A、B2、C1、D。不影响恢复。</p><blockquote><h2 id="删除快照的原理"><a href="#删除快照的原理" class="headerlink" title="删除快照的原理"></a>删除快照的原理</h2><p>当您不再需要某份快照或者快照个数超出额度时，您需要删除一部分快照释放空间。由于快照采用增量原理，假设您需要删除快照链中的某一份快照S1，则流程示意图和逻辑概览如下所示。 <a href="https://gw.alipayobjects.com/zos/onekb/GEmePRxTvdRaZPCgtUhF.png"><img src="https://gw.alipayobjects.com/zos/onekb/GEmePRxTvdRaZPCgtUhF.png" alt="删除快照原理"></a></p><ol><li>阿里云离线分析已删除快照S1的所有数据块（Block），删除未被快照链中其他快照引用的数据块。</li><li>添加快照S1数据块到快照S2。剩下的快照一共记录了10个Block的信息：<ul><li>快照S0的6个。</li><li>快照S1的2个数据块。</li><li>快照S2的2个。</li></ul></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> aliyun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aliyun </tag>
            
            <tag> 快照 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装宋体</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%20%E4%B8%AD%E5%8D%88%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%20%E4%B8%AD%E5%8D%88%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下安装宋体"><a href="#linux下安装宋体" class="headerlink" title="linux下安装宋体"></a><a href="https://www.cnblogs.com/yangjianbo/articles/10825178.html">linux下安装宋体</a></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.到windows环境下将所需字体拷贝到linux下。(simsun.ttc(宋体),msyf.ttf（微软雅黑）)</span><br><span class="line">2.到linux环境下创建目录</span><br><span class="line">mkdir -pv /usr/share/fonts/chinese/TrueType</span><br><span class="line">将字体放入目录下</span><br><span class="line">cd /usr/share/fonts/chinese/TrueType</span><br><span class="line">chmod 755 * 为字体赋予可执行权限</span><br><span class="line">3.建立字体缓存</span><br><span class="line"># mkfontscale （如果提示 mkfontscale: command not found，需自行安装 # yum install mkfontscale ）</span><br><span class="line"># mkfontdir</span><br><span class="line"># fc-cache -fv （如果提示 fc-cache: command not found，则需要安装# yum install fontconfig</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Box_clf/article/details/85224413">https://blog.csdn.net/Box_clf/article/details/85224413</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sendEmail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 返回LocalDateTime转为String</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%BF%94%E5%9B%9ELocalDateTime%E8%BD%AC%E4%B8%BAString/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%BF%94%E5%9B%9ELocalDateTime%E8%BD%AC%E4%B8%BAString/</url>
      
        <content type="html"><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>老规矩，直接解决方法</p><span id="more"></span><p>在需要的参数上加下列注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using = LocalDateTimeSerializer.class)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="将对象转成alibaba-fastjson-JSONObejct-时也会带T"><a href="#将对象转成alibaba-fastjson-JSONObejct-时也会带T" class="headerlink" title="将对象转成alibaba .fastjson.JSONObejct 时也会带T"></a>将对象转成alibaba .fastjson.JSONObejct 时也会带T</h2><p>造成这个的原因和jackson 是一样的，都需要对LocalDateTime进行转化配置。fastjson的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> result </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库查询时，得到的时间不对问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mybatis/Mybatis%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%97%B6%EF%BC%8C%E5%BE%97%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mybatis/Mybatis%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%97%B6%EF%BC%8C%E5%BE%97%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>数据库时间与实际时间不符问题</p><span id="more"></span><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>逐步解决：</p><ol><li>首先查看数据库时区</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%time_zone%&quot;; </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210805111806.png" alt="image-20210805111806768"></p><p>时区明显不对，居然是CST时区，如果得到的时区不对，那么大概率就是这个造成的，所以修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global time_zone=&quot;+8:00&quot;;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>等一会，再次查询，如下图所示即为修改成功</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210805111528.png" alt="image-20210805111528788"></p><ol start="2"><li>一般情况下修改数据库就会成功，（ps: 可能不会立即生效，可以先重启项目试试）如果一直不成功，那么排查服务器时区是否正确。</li></ol><ol start="3"><li>服务器时区正确，还不行，那么就在项目的配置文件的链接数据库的url中增加时区</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://47.97.154.202:3306/glosselephant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf-8&amp;serverTimeZone=GMT+8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> type </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next 主题 功能测试</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/hexo/%E6%B5%8B%E8%AF%95next%20%E6%A0%87%E7%AD%BE/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/hexo/%E6%B5%8B%E8%AF%95next%20%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://theme-next.js.org/docs/tag-plugins/tabs.html">next 主题文档</a> </p><span id="more"></span><div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#unique-name-1">1</button></li><li class="tab"><button type="button" data-href="#unique-name-2">2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p>Any content (support inline tags too).</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-2"><p>哈哈哈</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql创建用户并授权</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql创建用户并授权"><a href="#Mysql创建用户并授权" class="headerlink" title="Mysql创建用户并授权"></a>Mysql创建用户并授权</h1><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"># % 所有地址都可用</span><br><span class="line">create user &#x27;userName&#x27;@&#x27;%&#x27; identified by ‘password&#x27;;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># all : 所有权限  # test.* 所有表</span><br><span class="line">grant all on database.table to &#x27;username&#x27; identified by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费ssl证书</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.laozuo.org/tag/lets-encrypt">Let’s Encrypt</a>作为一个公共且免费SSL的项目逐渐被广大用户传播和使用，是由Mozilla、Cisco、Akamai、IdenTrust、EFF等组织人员发起，主要的目的也是为了推进网站从HTTP向HTTPS过度的进程，目前已经有越来越多的商家加入和赞助支持。</p><p><a href="http://www.laozuo.org/tag/lets-encrypt%E5%85%8D%E8%B4%B9ssl">Let’s Encrypt免费SSL</a>证书的出现，也会对传统提供付费SSL证书服务的商家有不小的打击。到目前为止，<a href="http://www.laozuo.org/tag/lets-encrypt">Let’s Encrypt</a>获得IdenTrust交叉签名，这就是说可以应用且支持包括FireFox、Chrome在内的主流浏览器的兼容和支持，虽然目前是公测阶段，但是也有不少的用户在自有网站项目中正式使用起来。</p><p>虽然目前Let’s Encrypt免费SSL证书默认是90天有效期，但是我们也可以到期自动续约，不影响我们的尝试和使用。</p><span id="more"></span><p><strong>第一、安装Let’s Encrypt前的准备工作</strong></p><p>根据官方的要求，我们在VPS、服务器上部署Let’s Encrypt免费SSL证书之前，需要系统支持Python2.7以上版本以及支持GIT工具。这个需要根据我们不同的系统版本进行安装和升级，因为有些服务商提供的版本兼容是完善的，尤其是debian环境兼容性比CentOS好一些。</p><p><strong>第二、快速获取Let’s Encrypt免费SSL证书</strong></p><p>PS：在获取某个站点证书文件的时候，我们需要在安装PYTHON2.7以及GIT，更需要将域名解析到当前主机IP中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:``//github``.com``/letsencrypt/letsencrypt``cd` `letsencrypt``.``/letsencrypt-auto` `certonly --standalone --email admin@laozuo.org -d laozuo.org -d www.laozuo.org</span><br></pre></td></tr></table></figure><p>然后执行上面的脚本，我们需要根据自己的实际站点情况将域名更换成自己需要的。</p><p>**第三、Let’s Encrypt免费SSL证书获取与应用<br>**</p><p>在完成Let’s Encrypt证书的生成之后，我们会在”/etc/letsencrypt/live/laozuo.org/“域名目录下有4个文件就是生成的密钥证书文件。</p><p>cert.pem - Apache服务器端证书<br>chain.pem - Apache根证书和中继证书<br>fullchain.pem - Nginx所需要ssl_certificate文件<br>privkey.pem - 安全证书KEY文件</p><p>如果我们使用的Nginx环境，那就需要用到fullchain.pem和privkey.pem两个证书文件，在部署Nginx的时候需要用到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate ``/etc/letsencrypt/live/laozuo``.org``/fullchain``.pem;``ssl_certificate_key ``/etc/letsencrypt/live/laozuo``.org``/privkey``.pem;</span><br></pre></td></tr></table></figure><p>比如我们在Nginx环境中，只要将对应的ssl_certificate和ssl_certificate_key路径设置成我们生成的2个文件就可以，最好不要移动和复制文件，因为续期的时候直接续期生成的目录文件就可以，不需要再手工复制。</p><p><strong>第四、解决Let’s Encrypt免费SSL证书有效期问题</strong></p><p>我们从生成的文件中可以看到，Let’s Encrypt证书是有效期90天的，需要我们自己手工更新续期才可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.``/letsencrypt-auto` `certonly --renew-by-default --email admin@laozuo.org -d laozuo.org -d www.laozuo.org</span><br></pre></td></tr></table></figure><p>这样我们在90天内再去执行一次就可以解决续期问题，这样又可以继续使用90天。如果我们怕忘记的话也可以制作成定时执行任务，比如每个月执行一次。</p><p><strong>第五、关于Let’s Encrypt免费SSL证书总结</strong></p><p>通过以上几个步骤的学习和应用，我们肯定学会了利用Let’s Encrypt免费生成和获取SSL证书文件，随着Let’s Encrypt的应用普及，SSL以后直接免费不需要购买，因为大部分主流浏览器都支持且有更多的主流商家的支持和赞助，HTTPS以后看来也是趋势。在Let’s Encrypt执行过程在中我们需要解决几个问题。</p><p>A - 域名DNS和解析问题。在配置Let’s Encrypt免费SSL证书的时候域名一定要解析到当前VPS服务器，而且DNS必须用到海外域名DNS，如果用国内免费DNS可能会导致获取不到错误。</p><p>B - 安装Let’s Encrypt部署之前需要服务器支持PYTHON2.7以及GIT环境，要不无法部署。</p><p>C - Let’s Encrypt默认是90天免费，需要手工或者自动续期才可以继续使用。</p><p>Let’s Encrypt 发布的 ACME v2 现已正式支持通配符证书，接下来将为大家介绍怎样申请</p><h1 id="一、acme-sh的方式"><a href="#一、acme-sh的方式" class="headerlink" title="一、acme.sh的方式"></a>一、<code>acme.sh</code>的方式</h1><h3 id="1-获取acme-sh"><a href="#1-获取acme-sh" class="headerlink" title="1.获取acme.sh"></a>1.获取<code>acme.sh</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>如下所示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs15205059_CCQX.png" alt="img"></p><p>注：我在centos 7上遇到问题，安装完后执行<code>acme.sh</code>，提示命令没找到，如果遇到跟我一样的问题，请关掉终端然后再登陆，或者执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="2-开始获取证书"><a href="#2-开始获取证书" class="headerlink" title="2.开始获取证书"></a>2.开始获取证书</h3><p><code>acme.sh</code>强大之处在于，可以自动配置DNS，不用去域名后台操作解析记录了，我的域名是在阿里注册的，下面给出阿里云解析的例子，其他地方注册的请参考这里自行修改：<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert">传送门</a></p><p>请先前往阿里云后台获取<code>App_Key</code>跟<code>App_Secret</code> <a href="https://ak-console.aliyun.com/#/accesskey">传送门</a>，然后执行以下脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 替换成从阿里云后台获取的密钥</span><br><span class="line">export Ali_Key=sdfsdfsdfljlbjkljlkjsdfoiwje</span><br><span class="line">export Ali_Secret=jlsdflanljkljlfdsaklkjflsa</span><br><span class="line"># 更新3.0后更改为了zeroSSL, 需要先注册</span><br><span class="line">acme.sh --register-account -m myemail@example.com --server zerossl</span><br><span class="line"># 换成自己的域名</span><br><span class="line">acme.sh --issue --dns dns_ali -d zhuziyu.cn -d *.zhuziyu.cn</span><br></pre></td></tr></table></figure><p>这里是通过线程休眠120秒等待DNS生效的方式，所以至少需要等待两分钟</p><p>到了这一步大功告成，撒花</p><p>生成的证书放在该目录下: <code>~/acme.sh/domain/</code></p><p>下面是一个Nginx应用该证书的例子:</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># domain自行替换成自己的域名</span><br><span class="line">server &#123;</span><br><span class="line">    server_name xx.domain.com;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    ssl_certificate /path/.acme.sh/domain/fullchain.cer;</span><br><span class="line">    ssl_certificate_key /path/.acme.sh/domain/domain.key;</span><br><span class="line">    ssl_trusted_certificate  /path/.acme.sh/domain/ca.cer;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_pass http://127.0.0.1:10086;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p><code>acme.sh</code>比<code>certbot</code>的方式更加自动化，省去了手动去域名后台改DNS记录的步骤，而且不用依赖Python，墙裂推荐</p><p>第一次成功之后，<code>acme.sh</code>会记录下App_Key跟App_Secret，并且生成一个定时任务，每天凌晨0：00自动检测过期域名并且自动续期。对这种方式有顾虑的，请慎重，不过也可以自行删掉用户级的定时任务，并且清理掉~/.acme.sh文件夹就行</p><h1 id="二、-docker-镜像获取"><a href="#二、-docker-镜像获取" class="headerlink" title="二、 docker 镜像获取"></a>二、 docker 镜像获取</h1><p>如果装有docker环境的话，也可以用docker镜像来获取证书，只需一行命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm  -it  \</span><br><span class="line">  -v &quot;$(pwd)/out&quot;:/acme.sh  \</span><br><span class="line">  -e Ali_Key=&quot;xxxxxx&quot; \</span><br><span class="line">  -e Ali_Secret=&quot;xxxx&quot; \</span><br><span class="line">  neilpang/acme.sh  --issue --dns dns_ali -d domain.cn -d *.domain.cn</span><br></pre></td></tr></table></figure><p>成功之后，证书会保存在当前目录下的out文件夹，也可以指定路径，修改上面第一行 <code>&quot;$(pwd)/out&quot;</code>，改为你想要保存的路径即可。</p><p>详细用法，可以参考：<a href="https://github.com/Neilpang/acme.sh/wiki/Run-acme.sh-in-docker">传送门</a></p><p>获取下来的证书跟方式一 获取的一模一样，其他信息请参考方式一。</p><h1 id="三、-certbot方式获取证书-不推荐"><a href="#三、-certbot方式获取证书-不推荐" class="headerlink" title="三、 certbot方式获取证书[不推荐]"></a>三、 <code>certbot</code>方式获取证书<code>[不推荐]</code></h1><h3 id="1-获取certbot-auto"><a href="#1-获取certbot-auto" class="headerlink" title="1.获取certbot-auto"></a>1.获取<code>certbot-auto</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line"></span><br><span class="line"># 设为可执行权限</span><br><span class="line">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure><h3 id="2-开始申请证书"><a href="#2-开始申请证书" class="headerlink" title="2.开始申请证书"></a>2.开始申请证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注xxx.com请根据自己的域名自行更改</span><br><span class="line">./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d &quot;*.xxx.com&quot; --manual --preferred-challenges dns-01 certonly</span><br></pre></td></tr></table></figure><p>执行完这一步之后，会下载一些需要的依赖，稍等片刻之后，会提示输入邮箱，随便输入都行【该邮箱用于安全提醒以及续期提醒】</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs14144603_4ezr.png" alt="img"></p><p>注意，申请通配符证书是要经过DNS认证的，按照提示，前往域名后台添加对应的DNS TXT记录。添加之后，不要心急着按回车，先执行<code>dig xxxx.xxx.com txt</code>确认解析记录是否生效，生效之后再回去按回车确认</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs14144824_vKdF.png" alt="img"></p><p>到了这一步后，大功告成！！！ 证书存放在/etc/letsencrypt/live/xxx.com/里面</p><p>要续期的话，执行<code>certbot-auto renew</code>就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs14144952_1Soy.png" alt="img"></p><p>注：经评论区 ddatsh 的指点，这样的证书无法应用到主域名<code>xxx.com</code>上，如需把主域名也增加到证书的覆盖范围，请在开始申请证书步骤的那个指令把主域名也加上，如下： 需要注意的是，这样的话需要修改两次解析记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d &quot;*.xxx.com&quot; -d &quot;xxx.com&quot; --manual --preferred-challenges dns-01 certonly</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs15095409_uiHL.png" alt="img"></p><p>下面是一个nginx应用该证书的一个例子</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name xxx.com;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/cert/xxx.cn/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/cert/xxx.cn/privkey.pem;</span><br><span class="line">    ssl_trusted_certificate  /etc/cert/xxx.cn/chain.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:6666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> ssl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用screen新开通一个会话后台运行一些不支持后台的程序</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/screen/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/screen/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y screen</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动一个screen窗口</span></span><br><span class="line">screen -S seesion_test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个screen窗口，但不进入</span></span><br><span class="line">screen -dmS session_test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的 screen 会输出一个id</span></span><br><span class="line">screen -ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入screen</span></span><br><span class="line">screen -x seesionId</span><br><span class="line"><span class="meta">#</span><span class="bash">接入(attach)一个名为<span class="built_in">test</span>会话</span></span><br><span class="line">screen -r test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">远程脱离(detach) <span class="built_in">test</span> 会话</span></span><br><span class="line">screen -d test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">脱离(detach)当前会话，将目前的 screen session (可能含有多个 windows) 丢到后台执行</span></span><br><span class="line">CTRL+a然后d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 screen 版本号</span></span><br><span class="line">screen -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：</span></span><br><span class="line">screen -wipe</span><br><span class="line"><span class="meta">#</span><span class="bash"> 分离和注销</span></span><br><span class="line">screen -D</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信支付-合单支付</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E6%94%AF%E4%BB%98/%E5%90%88%E5%8D%95%E6%94%AF%E4%BB%98/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E6%94%AF%E4%BB%98/%E5%90%88%E5%8D%95%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3_partner/open/pay/chapter2_9_2.shtml">合单支付</a></p><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter4_1_1.shtml">商户支付</a></p><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3_partner/open/pay/chapter7_1_1.shtml">服务商支付</a></p><span id="more"></span><p>再次调研服务商和商户支付分账</p><h3 id="服务商"><a href="#服务商" class="headerlink" title="服务商"></a>服务商</h3>]]></content>
      
      
      <categories>
          
          <category> 微信支付 </category>
          
          <category> 合单支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs 安装</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/web/nodejs%20%E5%AE%89%E8%A3%85/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/web/nodejs%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="http://nodejs.cn/">官网</a>：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p><a href="https://cdn.npm.taobao.org/dist/node/v14.16.1/node-v14.16.1.tar.gz">下载地址</a>：<a href="https://cdn.npm.taobao.org/dist/node/v14.16.1/node-v14.16.1.tar.gz">https://cdn.npm.taobao.org/dist/node/v14.16.1/node-v14.16.1.tar.gz</a></p><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><em>Linux的下载百变不离其中，首先还是下载解压包</em></p><p>​        ps: 之所以经常用下载源码的方式安装，是因为使用yum安装的指定版本比较麻烦，当然不需要指定版本使用yum是比较方便，但是，yum嘛，懂的都懂，经常性没有你想要的，所以首推还是下载源码压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir nodejs</span><br><span class="line">cd nodejs</span><br><span class="line">curl &lt;下载地址&gt; &gt; nodejs-v14.16.1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nodejs-v14.16.1</span><br><span class="line">make </span><br></pre></td></tr></table></figure><p><strong>如果报错，大概率是没有gcc造成的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装gcc gcc-c++</span></span><br><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure><p>安装完成后，再次运行make</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 项目 引入后jdk版本问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%98jdk1.5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8F%98jdk1.5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>​        引入的项目无视配置，自动变成jdk1.5. </p><p>无论是修改model的Language Level 还是修改设置中的Java Compiler都无效，会生效一小会，然后又自动变成了jdk1.5.</p><span id="more"></span><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>直接在父pom文件中加入下述插件，指定版本即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="问题中提到的解决方法"><a href="#问题中提到的解决方法" class="headerlink" title="问题中提到的解决方法"></a>问题中提到的解决方法</h2><p>​        问题中提到的方法遇到一般状况是有效的，那么也说一下解决步骤吧。</p><ol><li><p>修改 Language Level</p><p>File -&gt;Project Structure -&gt; Modules -&gt; Language Level 选择8-***.</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsfiArV5eXUwMI78d.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210406170813935.png" alt="image-20210406170813935"></p></li><li><p>修改设置中的Java Compiler</p><p>IntellJ IDEA-&gt; Preferences -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler -&gt;Module 修改Target byte code version 为8</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sails 系列</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/web/sails%20%E7%B3%BB%E5%88%97/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/web/sails%20%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>@<a href="Sails">TOC</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Sails.js 是一个Web框架，可轻松构建自定义的企业级Node.js应用程序。它的设计类似于Ruby On Rails一类的框架中的MVC架构，但支持Web应用程序和API开发的更现代，面向数据的样式。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="事先准备"><a href="#事先准备" class="headerlink" title="事先准备"></a>事先准备</h2><p>​    需要先安装node.js，直接进入<a href="https://nodejs.org/en/download/">node官网</a>进行下载安装，这里赘述。</p><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>​    使用命令行下载sails</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> sails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sails </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo 进阶</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mongo/%5BNosql%5DMongo%20%E8%BF%9B%E9%98%B6/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mongo/%5BNosql%5DMongo%20%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo 安装</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mongo/%5BNoSql%5DMongo%20%E5%AE%89%E8%A3%85/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mongo/%5BNoSql%5DMongo%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>​        首先进入<a href="https://www.mongodb.com/">mongoDB官网</a>，点击 Tre Free -&gt; On-premises -&gt; MongoDB Community Server。 选择对应的操作系统及版本，进行下载。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210331105703016.png" alt="image-20210331105703016"></p><p>mac 及 linux推荐使用链接下载，因此进行上图5. 的操作copy link。</p><p><a href="https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.4.tgz">mongo 下载mac 4.4.4</a></p><ul><li><p>本文以mac 为例</p><p>打开终端，进行如下命令下载：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过链接下载,sudo是必须的，需要获取root权限</span></span><br><span class="line">sudo curl -0 https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.4.tgz --output mongodb.tgz</span><br></pre></td></tr></table></figure><p>​        下载完成后看到mongodb.tgz 文件，移动到 /usr/local/ 目录下解压并重命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移动</span></span><br><span class="line">mv mongodb.tgz /usr/local/</span><br><span class="line">cd /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf mongodb.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv mongodb-macos-x86_64-4.4.4  mongodb64</span><br></pre></td></tr></table></figure><p>下载完毕（下载并解压完后，其实就相当于安装了）</p><hr><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>​        接下来是对环境变量的配置以及mongodb的启动。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>​        打开全局环境配置文件，然后将mongodb地址配置到环境变量中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开配置文件，没有则创建</span></span><br><span class="line">cd</span><br><span class="line">vim ./.bash_profile</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimgsimage-20210331115651202.png" alt="image-20210331115651202"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进行配置在文件中输入如下信息</span></span><br><span class="line">MONGODB_HOME=/usr/loacl/mongodb64</span><br><span class="line">export PATH=$MONGODB_HOME/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出并保存</span></span><br><span class="line">: wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使环境变量生效</span></span><br><span class="line">source ./.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证, 输入mongo 并回车，如果不是报找不到的错误，那么环境变量便生效了。</span></span><br><span class="line">mongo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里必然报错，因为服务还没启动，只是验证环境是否搭建成功</span></span><br></pre></td></tr></table></figure><p>​    下面便是启动准备工作，首先创建 数据存放文件夹及日志文件夹，然后启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建数据存储文件</span></span><br><span class="line">sudo mkdir -p /usr/local/var/mongodb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建日志文件</span></span><br><span class="line">sudo mkdir -p /usr/local/var/log/mongodb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权，确保当前用户有文件权限</span></span><br><span class="line">sudo chown &#x27;userName&#x27; /usr/local/var/mongodb</span><br><span class="line">sudo chown &#x27;userName&#x27; /usr/local/var/log/mongodb</span><br></pre></td></tr></table></figure><p> mongodb启动，直接使用mongod命令进行启动，启动时需要注意一下参数：</p><ul><li>–dbpath: 指定数据存储文件位置</li><li>–logpath: 指定日志输出文件位置</li><li>–fork 后台启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动mongo服务</span></span><br><span class="line">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongodb.log --fork</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入服务</span></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimgsmongo%E5%AE%89%E8%A3%85-3.png" alt="image-20210331151707009"></p><hr><p>至此，mongodb 下载安装及启动完成。</p>]]></content>
      
      
      <categories>
          
          <category> Mongo </category>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 安装</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/redis/Redis%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/redis/Redis%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先肯定是要安装了</p><p><a href="https://redis.io/">官网</a>：<a href="https://redis.io/">https://redis.io/</a></p><p><a href="https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783">6.0.12下载地址</a>：<a href="https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783">https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783</a></p><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行如下命令</span></span><br><span class="line">cd /usr/local/</span><br><span class="line">mkdir redis</span><br><span class="line">cd redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下述命令2选一</span></span><br><span class="line">curl https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783 &gt; redis-6.0.12.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> wget 需要安装 curl 一般自带</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.0.12.tar.gz?_ga=2.40131746.1694221018.1619491783-80594339.1619491783</span><br></pre></td></tr></table></figure><h2 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd redis-6.0.12</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改conf</span></span><br><span class="line">vim redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 daemonize 改为yes 这个参数的作用是 redisserver是否以后台形式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出并保存</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">src/redis-server redis.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据实体类创建数据库</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mybatis/Mybatis%E6%A0%B9%E6%8D%AE%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mybatis/Mybatis%E6%A0%B9%E6%8D%AE%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93">TOC</a></p><p>​        首先说一下，研究这个的契机是什么，今天刚从github上clone下来一个项目，想跑一下，结果发现没有sql，而这个开源项目又已经很久没更新了，也不太好找维护者，所以，没有办法，只能想办法自己创建数据库，而当我看到成堆的实体类时，，emmm，算了，找个简单的办法吧。</p><span id="more"></span><p>​        因此，就找到了这个jar包 <code> mybatis-enhance-actable</code></p><p>​        那么就开始实战吧。</p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-enhance-actable<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><p>​    首先是配置sql信息的配置类<code>MySqlConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yeafel.evaluation.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.PropertiesFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">/** 包位置是固定不变的*/</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.gitee.sunchenbin.mybatis.actable.manager.*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTableConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// mysql所有的配置来自第二章，配置文件</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"><span class="comment">//数据库连接</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"><span class="comment">//数据库账号</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">//数据库密码</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 配置数据源</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setMaxActive(<span class="number">30</span>);</span><br><span class="line">        dataSource.setInitialSize(<span class="number">10</span>);</span><br><span class="line">        dataSource.setValidationQuery(<span class="string">&quot;SELECT 1&quot;</span>);</span><br><span class="line">        dataSource.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 数据源</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());</span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml&quot;</span>));</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.yeafel.evaluation.dataobject.entity.*&quot;</span>);</span><br><span class="line">        <span class="comment">//上述classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml固定的包路径</span></span><br><span class="line">        <span class="comment">//com.xxx.xxx.entity.*替换成你的实体类地址</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(MyTableConfig.class)</span><span class="comment">//上面第一点配置文件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">            mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.yeafel.evaluation.dataobjet.mapper.*;com.gitee.sunchenbin.mybatis.actable.dao.*&quot;</span>);</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactory&quot;</span>);</span><br><span class="line">        <span class="comment">//com.xxx.xxx.mapper.*替换成你的mapper地址</span></span><br><span class="line">        <span class="comment">//com.gitee.sunchenbin.mybatis.actable.dao.*固定的包</span></span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置类中，主要注意的就是两个类中的entity和mapper地址，尤其是mapper地址，只传*mapper.java的位置就可以。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置类中用到的配置，直接放在默认的<code>application.yml</code>中即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3307/eval_teac?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="comment"># mybatis 生成数据库配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">table:</span></span><br><span class="line"><span class="attr">auto:</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">pack:</span> <span class="string">com.**.**.entity</span> <span class="string">//</span> <span class="string">你的实体类路径</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>mysql的配置是普通的mysql标准配置，不做解释，那么详细说一下mybatis的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```yml</span><br><span class="line">update: 每次加载hibernate时根据实体类生成数据库，并且参数属性更新时，表中的属性会同步更新，但是不会覆盖表（不会删除原数据）</span><br><span class="line">create: 每次加载hibernate时根据实体类生成数据库，并且会删除原表重建新表</span><br><span class="line">none: 不做任何操作</span><br><span class="line">add: 只对新增做处理，不会更新原有数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```mybatis.database.type=mysql``` 表明要创建的是什么类型的数据库，还有很多可以选择，这里简单说一下，毕竟是以mysql为主的文章。 </span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">oracle</span><br><span class="line">sqlserver</span><br><span class="line">postgresql</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>实体类主要是注解的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(name = &quot;test&quot;)</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta">@Column(name=&quot;action_id&quot;,type=MySqlTypeConstant.BIGINT, length = 11, isKey = true, isAutoIncrement = true,isNull = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long actionRoleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 角色id */</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 功能id */</span></span><br><span class="line">    <span class="keyword">private</span> Long actionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是第一种使用方式，是比较直观的。那么说一下配置的含义。</p><ul><li><p>@Table 表明这是需要扫描的类，并生成name中的表，如name=”test”，那么就会生成test的数据库表。</p></li><li><p>@Column 显而易见这是列，其中的参数有很多，就不一一列举，只说一下文中用到。</p><ul><li>name 列名</li><li>type 参数类型</li><li>length 参数长度，默认255</li><li>isKey 是否是主键，默认false</li><li>isAutoIncrement 是否自增，默认false</li><li>isNull 是否为空，默认true</li></ul></li></ul><p>还有第二种方式，注解拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.ColumnType;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.command.BaseModel;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种定义方式，使用<span class="doctag">@Table</span>和<span class="doctag">@Column</span>定义字段，具体内容用具体注解定义</span></span><br><span class="line"><span class="comment"> * 例如<span class="doctag">@Id</span>，<span class="doctag">@IsNotNull</span>，<span class="doctag">@isAutoIncrement</span>等等</span></span><br><span class="line"><span class="comment"> * 如果没有设置name，会直接把变量名按照驼峰规则转换，如果没有设置类型也会自动转换Java的类型到SQL类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@IsAutoIncrement</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Integer    id;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="meta">@ColumnType(value = MySqlTypeConstant.VARCHAR, length=11)</span></span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Column 表明是列</li><li>@ColumnType 表明参数类型，不使用后自动加载，<ul><li>value 类型</li><li>length 长度，默认255</li></ul></li></ul><p>第三种方式，是最简单的方式，全部交给自动加载，自动加载会更佳驼峰规则转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsKey;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三种定义方式，懒人定义，按照驼峰规则转换</span></span><br><span class="line"><span class="comment"> * 不需要对每个字段设置<span class="doctag">@Column</span></span></span><br><span class="line"><span class="comment"> * 这里没有继承BaseModel，因为BaseModel离有OrderBy等参数，也会对其进行构建字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 徐森威</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(isSimple = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLogin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@IsKey</span></span><br><span class="line">   <span class="meta">@IsAutoIncrement</span></span><br><span class="line">   <span class="keyword">private</span> Integer    id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>日志打印如下，即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimgsimage-20210406225103372.png" alt="image-20210406225103372"></p><p>同时观察数据库</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210406225248538.png" alt="image-20210406225248538"></p><p>至此，实体类转化为数据库成功！</p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/mac%20%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/mac%20%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="全局变量配置"><a href="#全局变量配置" class="headerlink" title="全局变量配置"></a>全局变量配置</h3><ul><li>首先打开终端</li></ul><span id="more"></span><ul><li>输入ls -a 命令找到 .bash_profile 文件，如果没有则创建：<code>mkdir .bash_profile</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210330153431430.png" alt="image-20210330153431430"></p><ul><li>输入 <code>vim ./.bash_profile </code> 或者输入     <code>vi ./.bash_profile</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210330153935600.png" alt="image-20210330153935600"></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210330160934673.png" alt="image-20210330160934673"></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 常用命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/mac%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/mac%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="根据连接下载"><a href="#根据连接下载" class="headerlink" title="根据连接下载"></a>根据连接下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过curl -0 进行下载 通过--output 确认输出文件</span></span><br><span class="line">curl -0 链接 --output file</span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">curl -0 https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-4.4.4.tgz --output mongob.tgz</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新配置文件</span></span><br><span class="line">source ./.bash_profice</span><br></pre></td></tr></table></figure><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接创建文件夹</span></span><br><span class="line">mkdir &lt;fileName&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 父文件夹不存在时，同时创建父文件夹</span></span><br><span class="line">mkdir -p /parent/fileName</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不加-p 并且 父文件夹不存在时，会报错。</span></span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tar 系列 备份文件指 压缩后的文件</span></span><br><span class="line">tar -zxvf name.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> -z: 通过 gzip指令处理备份文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -x: 从备份中还原文件（解压）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v: 显示执行过程</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> -f: 指定备份文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c：备份文件</span></span><br></pre></td></tr></table></figure><h3 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -i:port</span></span><br><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主要是linux</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看系统日期</span></span><br><span class="line">date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看硬件日期</span></span><br><span class="line">hwclock --show</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将系统日期同步到硬件时间</span></span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步网络时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 ntpdate工具</span></span><br><span class="line">yum -y install ntp ntpdate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步时间</span></span><br><span class="line">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/75e90aa8f07e">https://www.jianshu.com/p/75e90aa8f07e</a></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> cli </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sftp</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/sftp/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/sftp/</url>
      
        <content type="html"><![CDATA[<h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sftp -P port user@ip</span><br><span class="line">password</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务器路径</span></span><br><span class="line">pwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本季路径</span></span><br><span class="line">lpwd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载到本地</span></span><br><span class="line">get -r file</span><br><span class="line">get file</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传文件</span></span><br><span class="line">put -r file</span><br><span class="line">put file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> sftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCv</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/python/%E5%AE%89%E8%A3%85OpenCV/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/python/%E5%AE%89%E8%A3%85OpenCV/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://docs.opencv.org/master/d0/db2/tutorial_macos_install.html"> 官方网址</a></p><p>linux 安装及 win安装都需要特定的安装，在上方的安装文档中有，这里只记录mac</p><span id="more"></span><h2 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h2><p><a href="https://github-releases.githubusercontent.com/537699/7a398280-985a-11eb-8ed9-61b0ef22bd88?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20210415/us-east-1/s3/aws4_request&X-Amz-Date=20210415T073241Z&X-Amz-Expires=300&X-Amz-Signature=920bef45acbd330e8ae1afc13d711cdd8a409fad9c2933357d128927196f37ef&X-Amz-SignedHeaders=host&actor_id=30826199&key_id=0&repo_id=537699&response-content-disposition=attachment;%20filename=cmake-3.20.1-macos-universal.dmg&response-content-type=application/octet-stream">下载cmake</a></p><ul><li>首先进入下载界面下载cmake，然后安装</li><li>根据 tools-&gt; how to install for Command line Use。 将cmake设置为命令行可用<ul><li>根据第一种方式，将 /Application/cmake.app/bin 配置到 /root/.bash_profile 中即可</li></ul></li><li><code>cmake --version</code> 测试是否成功</li></ul><h2 id="下载OpenCV"><a href="#下载OpenCV" class="headerlink" title="下载OpenCV"></a>下载OpenCV</h2><p><a href="https://opencv.org/releases/">zip下载</a></p><p>最好通过git下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir opencv</span><br><span class="line">cd opencv</span><br><span class="line">git clone https://github.com/opencv/opencv.git</span><br><span class="line">git clone https://github.com/opencv/opencv_contrib.git</span><br></pre></td></tr></table></figure><h2 id="使用CMake-build-OpenCV"><a href="#使用CMake-build-OpenCV" class="headerlink" title="使用CMake build OpenCV"></a>使用CMake build OpenCV</h2><p>为了防止源码污染，因此建立 opencv同级目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build_opencv</span><br><span class="line">cd build_opencv</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMOLES=ON ../opencv</span><br><span class="line">make -j7</span><br></pre></td></tr></table></figure><h2 id="将openCV引入到项目"><a href="#将openCV引入到项目" class="headerlink" title="将openCV引入到项目"></a>将openCV引入到项目</h2><p>-DCMAKE_USE_OPENSSL</p><h2 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h2><p><a href="https://opencv.org/links/">https://opencv.org/links/</a></p><p><a href="https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html">https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html</a></p><p>但是，是opencv3.x，没安装完，还不太清楚是不是</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/git%20%E5%91%BD%E4%BB%A4/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/git%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="合并其他分支指定提交到本分支"><a href="#合并其他分支指定提交到本分支" class="headerlink" title="合并其他分支指定提交到本分支"></a>合并其他分支指定提交到本分支</h2><p>当1.1分支的某个提交 需要提前放到1.0分支时，那么可以单独将该提交放到1.0分支。</p><p>首先切换到1.1分支，使用<code>git log </code> 查看commitId。 然后切换回1.0分支，执行下列命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commitId</span><br></pre></td></tr></table></figure><p>此时提交是提交在了本地，因此需要 <code>git push</code> 才能上传到 远程。</p><p>ps: 目标提交必须在本地!</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 请求慢问题</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/github%E8%AF%B7%E6%B1%82%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/github%E8%AF%B7%E6%B1%82%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>最简单的办法，做映射</p><span id="more"></span><p>​    先查询github的ip地址，然后在本地做映射，可以有效提升github访问速度</p><p>​    <a href="http://tool.chinaz.com/">ip查询</a> : <a href="http://tool.chinaz.com/">http://tool.chinaz.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsft8Xr2QLO7kegjw.png" alt="ip查询结果"></p><p>​    </p><p>如上图所示，13.229.188.59 搭载在新加坡，并且ttl只有8，所以我们就映射这个ip。</p><p>找到hosts文件，如mac 在/etc/ 文件夹下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开hosts</span></span><br><span class="line">sudo vim hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将本行代码加入到hosts中</span></span><br><span class="line">13.229.188.59 github.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置生效</span></span><br><span class="line">source hosts</span><br></pre></td></tr></table></figure><p> 然后本地请求github.com 时 其实是请求了ip地址，而这个ip地址的延迟是很低的，因此可以有效的提高访问速度。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器配置环境变量重启时失效</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/docker/docker%20%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%A4%B1%E6%95%88/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/docker/docker%20%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-容器配置的环境变量重启时失效问题解决"><a href="#Docker-容器配置的环境变量重启时失效问题解决" class="headerlink" title="Docker 容器配置的环境变量重启时失效问题解决"></a>Docker 容器配置的环境变量重启时失效问题解决</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>在/etc/profile 配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/opt/java/jdk-15.0.2</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后在/etc/bashrc 中增加环境刷新命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>可以保证重启时环境变量依旧有效</p><span id="more"></span><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>容器加载时会先从/root/.bashrc 中加载环境变量，而/root/.bashrc 实际调用的是/etc/bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .bashrc</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>因此在/etc/bashrc 文件中加入刷新命令，可以使容器每次加载时都会自动刷新环境变量，因此解决重启环境变量失效的问题。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> dockre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DJL</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/python/DJL%E5%AD%A6%E4%B9%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/python/DJL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>@<a href="DJL">DJL</a></p><p>学习DJL之前先了解一下什么是深度学习</p><hr><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="什么是深度学习"><a href="#什么是深度学习" class="headerlink" title="什么是深度学习"></a>什么是深度学习</h2><p>深度学习是机器学习中监督学习的分支，是根据神经网络对模型进行训练的任务过程。</p><p>机器学习包含：</p><ul><li>监督学习</li><li>非监督学习</li></ul><p> 在上层是 人工智能。</p><ul><li>一开始是传统专家系统，根据判断（数据、规则）得出答案。</li><li>进一步发展：数据+答案通过机器学习训练模型得到规则</li></ul><span id="more"></span><h2 id="什么是神经网络"><a href="#什么是神经网络" class="headerlink" title="什么是神经网络"></a>什么是神经网络</h2><p>神经网络是由大量简单元件相互链接而成的网络，具有以下特征：</p><ul><li><p>非线性</p></li><li><p>分层特征学习</p><ul><li>输入层：输入数据、答案</li><li>隐藏层：进行训练</li><li>输出层：输出规则</li></ul></li><li><p>可扩展结构</p><ul><li>隐藏层可以根据不同的业务进行扩展</li></ul></li><li><p>高算力要求</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210408105026467.png" alt="神经网络"></p></li></ul><h3 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h3><p>包含了两个很重要的步骤：</p><ul><li><p>前向传播</p></li><li><p>反向传播</p></li><li><p>epochs：输入数据—&gt; 神经网络-&gt;输出数据-&gt;损失-&gt;根据损失反向求导-&gt;得到一个梯队，然后更新权重，再重新输入数据。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210408105649963.png" alt="image-20210408105649963"></p></li></ul><h1 id="DJL"><a href="#DJL" class="headerlink" title="DJL"></a>DJL</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DJL 是什么？DJL 为Java量身定制的机器学习平台。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>为Java量身定制的方法<ul><li>多线程支持和内存管理</li></ul></li><li>全引擎支持<ul><li>一次构建，轻松运行</li></ul></li><li>预训练模型库<ul><li>70多个预训练模型</li></ul></li><li>为开源社区贡献<ul><li>已支持PaddlePaddle</li></ul></li></ul><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><ul><li>Amazon family</li><li>TalkingData<ul><li>基于Apache Spark的大数据智能分析</li></ul></li><li>Netflix<ul><li>基于Scala的大规模流数据推理</li></ul></li><li>阿里<ul><li>基于Java的深度学习推理服务</li><li>PaddlePaddle </li></ul></li></ul><h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><p>DJL + Paddle = Java完全支持</p><h2 id="DJL架构"><a href="#DJL架构" class="headerlink" title="DJL架构"></a>DJL架构</h2><ul><li>NDArray:    目的：把很复杂的数据结构表达出来。</li><li>NDManager： NDArray的管理者，目的：对内存的管理，当NDArray结束时，立马回收。</li><li>Model：模型<ul><li>Trainer ： 训练师：对模型训练</li><li>Predictor： 推理师：进行推理</li></ul></li><li>Block：模块，所有的神经网络在DJL中都是BLock表达出来的，一个或多个就会构成一个基本的Model架构。</li></ul><h3 id="NDArray"><a href="#NDArray" class="headerlink" title="NDArray"></a>NDArray</h3><ul><li><p>多维数组</p></li><li><p>获取数组信息</p><ul><li>getDataType(): boolean int32,int64,float32,float64,string</li><li>getShape(): Shape 物件 (long[]）</li><li>getDevice(): CPU, GPU(0)</li><li>size(): 数组元素的总数</li></ul></li><li><p>实际上 NDArray 是在 natice C++ 内存里</p><ul><li>通过toByteBuffer 复制一份进Java heap<ul><li>toFloatArray()</li><li>toFloat()</li></ul></li></ul><h4 id="为什么内存存在C-里"><a href="#为什么内存存在C-里" class="headerlink" title="为什么内存存在C++里"></a>为什么内存存在C++里</h4></li></ul><p>​    只在java中，数据太大不好处理，并且使用的cpu较少,同时多维不好处理，并且下述中的加速库都是由C、C++实现的，所以需要存一份数据在C++中。</p><ul><li>矩阵加速库：LAPACK，BLAS</li><li>多线程：OpenMP</li><li>CPU加速库： oneDNN（MKLDNN）</li><li>GPU加速库：CUDA, cuDNN</li></ul><p> 因此，需要尽量避免原生的Java做计算，善用DJL提供的算子 array.add(1f).所有的计算都做完后再调用toFloatArray 转回java。</p><h4 id="DJL提供的算子"><a href="#DJL提供的算子" class="headerlink" title="DJL提供的算子"></a>DJL提供的算子</h4><ul><li><p>四则运算：add,sub,mul,div,…</p><p>｜1｜2｜</p><p>｜3｜4｜ </p><p>当使用add时，add(2)，矩阵中的所有数都会+2.</p><p>｜1+2｜2+2｜</p><p>｜3+2｜4+2｜</p><p>同理，sub,mul,div都是如此，而这里的矩阵乘法和标准的矩阵乘法时不一样的，因此，延伸出了专门针对标准矩阵乘法的接口。matMul。</p></li><li><p>矩阵乘法：matMul</p><p>当使用matMul时：array.matMul(array)</p></li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">｜<span class="number">1</span><span class="operator">*</span><span class="number">1</span><span class="operator">+</span><span class="number">2</span><span class="operator">*</span><span class="number">3</span><span class="operator">|</span><span class="number">1</span><span class="operator">*</span><span class="number">3</span><span class="operator">+</span><span class="number">2</span><span class="operator">*</span><span class="number">4</span><span class="operator">|</span></span><br><span class="line">｜<span class="number">3</span><span class="operator">*</span><span class="number">1</span><span class="operator">+</span><span class="number">4</span><span class="operator">*</span><span class="number">3</span><span class="operator">|</span><span class="number">3</span><span class="operator">*</span><span class="number">2</span><span class="operator">+</span><span class="number">4</span><span class="operator">*</span><span class="number">4</span><span class="operator">|</span></span><br></pre></td></tr></table></figure><ul><li><p>改变形状：reshape，swapAxes</p><p>reshape 与 swapAxes的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reshape(....y,x); ：y 代表从上往下排序几行，x代表从左到右排序几列，并且是x轴优先排序.但是在C++中的排序是不会变的。如：</span><br><span class="line">|1|2|3|</span><br><span class="line">|4|5|6|</span><br><span class="line">这个矩阵对应的C++的排列是：</span><br><span class="line">|1|2|3|4|5|6|</span><br><span class="line">然后调用reshape(3,2);</span><br><span class="line">java中的解读变成了：</span><br><span class="line">|1|2|</span><br><span class="line">|3|4|</span><br><span class="line">|5|6|</span><br><span class="line">但是C++中是不会变的。</span><br><span class="line">特别提示：最后两位永远是y,x而前面的是怎么分组，前位每多一个数，便多一个分组，并且所有的数相乘要等于数组大小。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">swapAxes(0,1);</span><br><span class="line">|1|2|3|</span><br><span class="line">|4|5|6|</span><br><span class="line">这里比较特殊，这个矩阵是（2，3）并且方向是(y,x)格式的矩阵，这里的yx和上述方法中的yx一个含义，所以上面的矩阵是1-3从左到右排序，然后从上往下排序。</span><br><span class="line">但是在swapAxes是进行整个轴的对调。那么这个矩阵就变成了(3,2),虽然排序方向依旧是（y,x) ，但是优先排序变成了y轴。因此，对调完后是，从上往下排3，然后从左到右排2，结果便是：</span><br><span class="line">｜1｜4｜</span><br><span class="line">｜2｜5｜</span><br><span class="line">｜3｜6｜</span><br><span class="line">同时C++中的排列也会随之改变为：</span><br><span class="line">|1|4|2|5|3|6|</span><br></pre></td></tr></table></figure></li><li><p>比较运算：eq,gt,…</p><p>array.eq(array);</p><p>|1==1|2==2|</p><p>|3==3|4==4|</p></li><li><p>Reduction运算：su m,max,min,…</p><p>array.max()</p><p>|4|</p></li><li><p>其他数学运算：abs，exp,…</p></li></ul><p> 每个操作输出的NDArray都是一份新的拷贝。也就是说不影响以前的数据喽。</p><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><p>临时生成的NDArray越早释放越好，并且不会自动释放。</p><p>因为NDArray内存存在C++里，上面提到过，所以java的GC没办法回收native内存。</p><p>​    每一个产生的NDArray都需要调用C API回收，这样非常容易出现内存溢出。</p><p>​    针对回收DJL使用NDManager管理。将临时的NDArray装入NDManager中，调用close()时一起释放。</p><h3 id="NDManager"><a href="#NDManager" class="headerlink" title="NDManager"></a>NDManager</h3><ul><li><p>管理数据的创建以及生命周期</p></li><li><p>创建所有的NDArray都需要通过NDManager.</p><ul><li>manager.create(new float[]{0f,1f,2f,3f}, new Shape(2,2));</li><li>manager.zeros(new Shape(2,2)); // 全是0的2*2 矩阵</li><li>manager.randomUniform(0f,1f,new Shape(2,2)); // 2*2 0-1的矩阵</li></ul></li><li><p>回收临时NDArray的方案</p><p>创建一个manager内部的NDMaber，然后将临时的NDArray放入，一起close。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NDManager subManager = manager.newSubManager();</span><br><span class="line">array.attach(subManager);</span><br><span class="line">subManager.close();</span><br></pre></td></tr></table></figure></li></ul><h2 id="DJL-深度学习推理实现"><a href="#DJL-深度学习推理实现" class="headerlink" title="DJL 深度学习推理实现"></a>DJL 深度学习推理实现</h2><h4 id="分步"><a href="#分步" class="headerlink" title="分步"></a>分步</h4><p><strong>数据前处理 -&gt; 推理 -&gt; 数据后处理</strong></p><ul><li>数据前处理：如图片<ul><li>把图片转化成RGB数组</li><li>把文字转换成索引</li><li>将数据归一化</li></ul></li><li>推理：<ul><li>输入NDList(List of NDArray)，封装NDArray到LIst中。</li><li>输出NDList(List of NDArray)</li><li>(概率，文字索引…)</li></ul></li><li>数据后处理<ul><li>把概率转换对应的标签</li><li>把文字索引转换回真正的文字</li></ul></li></ul><h4 id="Translator"><a href="#Translator" class="headerlink" title="Translator"></a>Translator</h4><p>将数据前处理和数据后处理封装到了Translator里</p><ul><li>public NDList processInput(TranslatorContext cox, I);     </li><li>public O processOutput(TranslatorContext ctx, NDList lits)</li><li>TranslatorContext 会获取NDManager，并且将数据处理时产生的NDArray返回NDManager,处理完成后直接close。</li><li>优点<ul><li>整理琐碎的处理代码</li><li>容易服用经典的数据处理</li></ul></li></ul><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="Apache-MXNet"><a href="#Apache-MXNet" class="headerlink" title="Apache MXNet"></a>Apache MXNet</h4><ul><li>Symbolic 模型</li><li>Gluon 模型，需要先 hybridize 后保存,就会转成Symbolic模型</li></ul><h4 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h4><ul><li>TorchScript 模型</li><li>PyTorch模型，可通过 jit.trace 或是 jit.script 转成TorchScript</li></ul><h4 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h4><ul><li>SavedModel</li><li>h5模型，可通过tf.keras.models.load_model 搭配 tf.saved_model.save转成SavedModel</li></ul><h3 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h3><ul><li>创建多个搜索条件找到需要加载的模型<ul><li>可以读取本地的模型</li><li>S3上的预训练模型</li><li>支持从URL读取，包含http，S3，hdfs</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**读取S3上的预训练模型*/</span></span><br><span class="line">Criteria&lt;Image, DetectedObjects&gt; criteria = Criteria.builder()</span><br><span class="line">.optApplication(Application.CV.OBJECT_DETECTION) <span class="comment">//读取模型</span></span><br><span class="line">.setTypes(Image.class, DetectedObjects.class) <span class="comment">// 类型</span></span><br><span class="line">.optFilter(<span class="string">&quot;backbone&quot;</span>,<span class="string">&quot;resnet50&quot;</span>) <span class="comment">// 多个filter</span></span><br><span class="line">.optProgress(<span class="keyword">new</span> ProgressBar()) <span class="comment">// </span></span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**读取本地模型</span></span><br><span class="line"><span class="comment">* 本地模型：/var/models/my_resnet50/my_resent50.pt</span></span><br><span class="line"><span class="comment">* pt 模型名要和上级文件夹同名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Criteria&lt;Image, Classifications&gt; criteria = Criteria.builder()</span><br><span class="line">  .setTypes(Image.class, Classifications.class)</span><br><span class="line">  .optTranslator(ImageClassifictionTranslator.builder()</span><br><span class="line">                .setSynsetArtifactName(<span class="string">&quot;synset.txt&quot;</span>)</span><br><span class="line">                .build()) <span class="comment">// 建立 Translator</span></span><br><span class="line">  .optModelUrls(<span class="string">&quot;file:///var/models/my_resnet50&quot;</span>) <span class="comment">// 路径</span></span><br><span class="line">  .optArtifactId(<span class="string">&quot;ai.djl.localmodelzoo:my_resnet50&quot;</span>) <span class="comment">// 本地的id</span></span><br><span class="line">  .build();</span><br><span class="line">ZooModel&lt;Image, Classifications&gt; model = ModelZoo.loadModel(criteria); <span class="comment">// 获取model</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果模型和上级文件不想同名，那么删除 optArtifactId，并将ModelUrl修改</span></span><br><span class="line"><span class="comment">// files:///var/models/文件名不一样?artifact_id=文件名&amp;model_name=模型名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取模型Criteria-API"><a href="#读取模型Criteria-API" class="headerlink" title="读取模型Criteria API"></a>读取模型Criteria API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Predictor</span></span><br><span class="line"><span class="keyword">try</span>(ZooModel&lt;?,?&gt; model = loadModel(arguments, metrics))&#123;</span><br><span class="line">  Object predictResult = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span>(Predictor predictor = model.<span class="function">new <span class="title">Predictor</span><span class="params">()</span>)</span>&#123; <span class="comment">// 线程安全的</span></span><br><span class="line">    predictResult = predictor.predic(inputData); <span class="comment">// 开始推理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多线程环境下：一个线程创建一个Predcitor，避免每次predict时都创建新的Predictor。</span></span><br></pre></td></tr></table></figure><h3 id="优化推理速度"><a href="#优化推理速度" class="headerlink" title="优化推理速度"></a>优化推理速度</h3><h4 id="MXNet"><a href="#MXNet" class="headerlink" title="MXNet"></a>MXNet</h4><ul><li>MXNet 推理引擎不是线程安全的</li><li>多线程调用需使用NaiveEngine （线程安全的）<ul><li>export MXNET_ENGINE_TYPE = NaiveEngine。</li></ul></li><li>每个线程里面都要有自己一份拷贝的weight </li><li>可以使用实验性质的线程安全接口 -Dai.djl.mxnet.user_thread_safe_predictor=true</li><li>多线程性能最优配置：<ul><li>export OMP_NUM_THREADS=1</li><li>只需要调整Java线程数量</li></ul></li></ul><h4 id="PyTorch-1"><a href="#PyTorch-1" class="headerlink" title="PyTorch"></a>PyTorch</h4><ul><li>Pytorch 释放Tensor的接口不是线程安全的，需要避免GC更NDManager同时回收Tensor<ul><li>必须传入：-Dai.djl.disable_close_resource_on_finalize=true</li></ul></li><li>PyTorch 默认不使用MKLDNN(oneDNN)<ul><li>使用：-Dai.djl.pytorch.usr_mkldnn=true</li></ul></li><li>多线程性能最优配置<ul><li>-Dai.djl.pytorch.num_interop_threads=1</li><li>-Dai.djl.pytorch.num_threads=1</li><li>同样只需要调整java线程数量即可</li></ul></li></ul><h4 id="TensorFlow-1"><a href="#TensorFlow-1" class="headerlink" title="TensorFlow"></a>TensorFlow</h4><ul><li>多行程性能最优配置<ul><li>export OMP_NUM_THREADS=1</li><li>export TF_NUM_INTEROP_THREADS=1</li><li>export TF_NUM_INTRAOP_THREADS=1</li><li>只需要调整Java线程数量</li></ul></li></ul><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210408113352890.png" alt="image-20210408113352890"></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="基于Java的Jupyter-Notebook"><a href="#基于Java的Jupyter-Notebook" class="headerlink" title="基于Java的Jupyter Notebook"></a>基于Java的Jupyter Notebook</h3><ul><li>基于Java11+ 的notebook</li><li>安装配置简单</li><li>Tablesaw： Java中的matplotlib</li><li>DJL完美适配：CPU/GPU直接使用</li></ul><h3 id="JAVA-深度学习微服务部署"><a href="#JAVA-深度学习微服务部署" class="headerlink" title="JAVA 深度学习微服务部署"></a>JAVA 深度学习微服务部署</h3><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h3 id="DJL模块简介"><a href="#DJL模块简介" class="headerlink" title="DJL模块简介"></a>DJL模块简介</h3><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>​    神经网络模型搭建：Model/ 使用Block Api 代表神经网络的基石</p><ul><li>Sequential Blocak</li><li>ParallelBlock</li><li>Lambda BLock</li></ul><h4 id="BLock-实现"><a href="#BLock-实现" class="headerlink" title="BLock 实现"></a>BLock 实现</h4><p>Linear Block 全连接层</p><ul><li><p>Linear, FullyConnected(FC),Dense</p></li><li><p>描述公式：<br>$$<br>Y=XW^T + b<br>$$</p></li><li><p>参数：Weight, Bias</p></li><li><p>前向传播：forward</p></li><li><p>实例演示：全连接层和多层感知机</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Linear</span> <span class="keyword">extends</span> <span class="title">AbstractBlock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> VERSION = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> units;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> inputFeatures;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Shape inputShape;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Parameter weight;</span><br><span class="line">   <span class="keyword">private</span> Parameter bias;</span><br><span class="line"></span><br><span class="line">   Linear(Builder builder) &#123;</span><br><span class="line">       <span class="keyword">super</span>(VERSION);</span><br><span class="line">       units = builder.units;</span><br><span class="line">       <span class="comment">// &quot;inputFeatures&quot; is only known after &quot;beforeInitialize&quot; is called, hence we need</span></span><br><span class="line">       <span class="comment">// a callback, even if we do not used the callback parameter</span></span><br><span class="line">       weight =</span><br><span class="line">               addParameter(</span><br><span class="line">                       <span class="keyword">new</span> Parameter(<span class="string">&quot;weight&quot;</span>, <span class="keyword">this</span>, ParameterType.WEIGHT),</span><br><span class="line">                       inputShapes -&gt; <span class="keyword">new</span> Shape(units, inputFeatures));</span><br><span class="line">       <span class="keyword">if</span> (builder.bias) &#123;</span><br><span class="line">           bias = addParameter(<span class="keyword">new</span> Parameter(<span class="string">&quot;bias&quot;</span>, <span class="keyword">this</span>, ParameterType.BIAS), <span class="keyword">new</span> Shape(units));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** &#123;<span class="doctag">@inheritDoc</span>&#125; */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> NDList <span class="title">forwardInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">           ParameterStore parameterStore,</span></span></span><br><span class="line"><span class="params"><span class="function">           NDList inputs,</span></span></span><br><span class="line"><span class="params"><span class="function">           <span class="keyword">boolean</span> training,</span></span></span><br><span class="line"><span class="params"><span class="function">           PairList&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">       NDArray input = inputs.singletonOrThrow();</span><br><span class="line">       Device device = input.getDevice();</span><br><span class="line">       NDArray weightArr = parameterStore.getValue(weight, device, training);</span><br><span class="line">       NDArray biasArr = parameterStore.getValue(bias, device, training);</span><br><span class="line">       <span class="keyword">return</span> linear(input, weightArr, biasArr);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据集读取和预处理：Dataset-Api"><a href="#数据集读取和预处理：Dataset-Api" class="headerlink" title="数据集读取和预处理：Dataset Api"></a>数据集读取和预处理：Dataset Api</h3><ul><li>预处理Transform， 需要做一些特殊处理</li><li>预处理Popeline</li><li>CV预处理流程</li><li>NLP预处理流程<ul><li>编码-&gt;清洗-&gt;分词-&gt;特征处理</li></ul></li><li>多线程载入数据</li></ul><h4 id="正式训练"><a href="#正式训练" class="headerlink" title="正式训练"></a>正式训练</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">1[数据] --&gt; 2[网络] --&gt;3[前向传播]--&gt;4[损失函数]--&gt; 5[方向传播]--&gt;6[更新权重]--&gt;1</span><br></pre></td></tr></table></figure><p>Trainer Api:</p><ul><li>​    设置损失函数和优化器<ul><li>学习目标和更新权重 的方法</li></ul></li><li>超参数设置<ul><li>训练多久，样本大小，学习率更新</li></ul></li><li>权重初始化</li><li>用Evaluator 评测学习情况</li><li>多GPU学习</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> lr = <span class="number">0.9f</span>; <span class="comment">// 学习率</span></span><br><span class="line">Model model = Model.newInstance(<span class="string">&quot;cnn&quot;</span>); <span class="comment">// 新建一个model</span></span><br><span class="line">model.setBlock(block);</span><br><span class="line"></span><br><span class="line">Loss loss = Los.softmaxCrossEntropyLoss(); <span class="comment">// 损失函数</span></span><br><span class="line"></span><br><span class="line">Tracker lrt = Tracker.fixed(lr); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">Optimizer sgd = Optimizer.sgd().setLearningRateTracker(lrt).build();</span><br><span class="line"></span><br><span class="line">DefaultTrainingConfig config = <span class="keyword">new</span> DefaultTrainingConfig(loss).optOptimizer(sgd) <span class="comment">// 设置损失函数和优化器</span></span><br><span class="line">  .addEvaluator(<span class="keyword">new</span> Accuracy()) <span class="comment">// 评测学习情况，默认打印超参数。accuracy: 学习情况</span></span><br><span class="line">  .addTrainingListeners(TrainingListener.Defaults.logging());</span><br></pre></td></tr></table></figure><p>源代码相似度比较，200多个分类。</p><p>比特币源代码，里面的源码被归类为1</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> DJL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DJL </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub + PicGo + Typora 自动上传图片</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/Github%20%E5%9B%BE%E5%BA%8A%20+%20Typora%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Git/Github%20%E5%9B%BE%E5%BA%8A%20+%20Typora%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><span id="more"></span><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722102530549.png"></p><p>新建仓库<name> ，然后就不用管了。</p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><p><a href="https://github.com/Molunerfinn/PicGo/releases/">下载PicGo</a> 可以在该地址选择心仪的版本，然后安装。</p><p>ps: PicGO的指南地址：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p><p>因为笔者电脑限制，所以这里只说mac版，其实是一样的，但是为了严谨。</p><p>下载 <a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.6/PicGo-2.3.0-beta.6.dmg">PicGo-2.3.0-beta.6.dmg</a> 然后点击安装，之后打开，打开后不会出来界面，需要手动点出。 </p><p>在状态栏找到</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722104355.png"></p><p>右键点击，选择 打开详细窗口</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722104523.png"></p><h2 id="回到github，生成token"><a href="#回到github，生成token" class="headerlink" title="回到github，生成token"></a>回到github，生成token</h2><p>点击头像，选择setting，然后选择Developer settings -&gt; Personal access tokens -&gt; Generate new token.</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105001811.png"></p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105219756.png"></p><p>​    给予repo权限，表示对仓库有操作权限。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105318749.png"></p><p>然后copy token，记得保存，不然只能重新生成了</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20210722105441447.png"></p><h2 id="配置github信息到PicGo"><a href="#配置github信息到PicGo" class="headerlink" title="配置github信息到PicGo"></a>配置github信息到PicGo</h2><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722112843.png"></p><p>token为上述生成的token，仓库名为新建的仓库。</p><p>自定义域名：</p><p>github 默认：<a href="https://github.com/exceedyc/images">https://github.com/exceedyc/images</a> </p><p>cdn加速：<a href="https://cdn.jsdelivr.net/gh/exceedyc/images">https://cdn.jsdelivr.net/gh/exceedyc/images</a></p><p>同时点击PicGo设置，将 时间戳重命名 及 上传后复制 打开</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722114732.png"></p><p>此处两个配置的作用是： 避免同名造成上传失败，以及上传成功后 自动复制链接到编译器。</p><p>至此上传及图床配置完成，接下来就是编辑器的配置了</p><h1 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h1><p>下载安装Typora 不再赘述。打开Typora -&gt; 设置 -&gt; 图片</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722114237.png"></p><p>将插入图片时配置为上传图片。将上传服务选定为PicGo.app。</p><p>点击验证图片上传选项，得到以下提示即为成功。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgs20210722114512.png"></p><p>这样在插入图片后会自动上传并自动修改路径。</p><p>至此结束。</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> typora </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper安装及启动</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/Zookeeper%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/Zookeeper%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper入门"><a href="#Zookeeper入门" class="headerlink" title="Zookeeper入门"></a>Zookeeper入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        Zookeeper 是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。</p><span id="more"></span><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p>​        Zookeeper 从设计模式角度来看：是一个基于观察这模式设计的分布式服务管理框架，它<strong>负责存储和管理大家都关心的数据</strong>，然后<strong>接受观察者的注册</strong>， 一旦这些数据的状态发生变化，Zookeeper就将<strong>负责通知已经在Zookeepr上注册的那些观察者</strong> 做出相应的反应。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>一个领导者（Leader), 多个跟随者（Follower）组成的集群</li><li>集群中只要有半数以上节点存活，Zookeeper集群就能正常服务。</li><li>全局数据一致：每个Server备份一份相同的数据副本，Client无论链接到哪个Server，数据都是一致的。</li><li>更新请求顺序进行，来自同一个Client的更新请求按其发送顺序依次执行</li><li>数据更新原子性，一次数据更新要么成功，要么失败。</li><li>实时性，在一定时间范围内，Client能读到最新数据。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>树形结构。</p><p>​    数据模型结构与Unix文件系统很类似i，整体上可以看作是一颗树，每个节点称作一个ZNode，每个ZNode默认能存储1MB的数据，每个ZNode都可以通过其路径唯一标识。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">a[ZNode] --&gt; b[ZNode1]</span><br><span class="line">a --&gt; c[ZNode2]</span><br><span class="line">b--&gt;d[ZNode1/file]</span><br><span class="line">b--&gt;e[ZNode1/file1]</span><br><span class="line">c--&gt;f[ZNode2/file]</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>​        提供的服务包括：</p><ul><li><p>统一命名服务</p><ul><li><p>在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。如下图，客户端访问域名，域名可以直接转发多个ip地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph Zokkeper Serviece</span><br><span class="line">/ --&gt; /service --&gt; id1[www.baidu.com]</span><br><span class="line">--&gt; 192.168.22.13</span><br><span class="line">id1--&gt; 192.168.22.14</span><br><span class="line">id1--&gt;192.168.22.15</span><br><span class="line">end</span><br><span class="line">client1 -- 访问--&gt; id1</span><br><span class="line">client2 -- 访问--&gt; id1</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul></li><li><p>统一配置管理</p><ul><li>分布式环境下，配置文件同步非常常见。<ul><li>一般要求一个集群中，所有节点的配置信息是一致的。比如Kafka集群</li><li>对配置文件修改后，希望能够快速同步到各个节点上。</li></ul></li><li>配置管理可交由Zookeeper实现<ul><li>可将配置信息写入ZooKeeper上的一个ZNode</li><li>各个客户断服务器监听这个ZNode</li><li>一旦ZNode中的数据被修改，ZooKeeper将通知各个客户端服务器。</li></ul></li></ul></li><li><p>统一集群管理</p><ul><li>分布式环境下，实时掌握每个节点的状态是必要的<ul><li>可根据节点试试状态作出一些调整</li></ul></li><li>ZooKeeper可以实现实时监控节点状态变化<ul><li>可将节点信息写入ZooKeeper是那个的一个ZNode</li><li>禁停这个ZNode可获取它的实时状态变化。</li></ul></li></ul></li><li><p>服务器节点动态上下线</p><ul><li>客户端能实时洞察到服务器上下线的变化</li></ul></li><li><p>软负载均衡</p><ul><li>在ZooKeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求。</li></ul></li><li><p>…</p></li></ul><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://zookeeper.apache.org/">Zookeeper官网</a></p><p><a href="https://zookeeper.apache.org/releases.html#download">下载地址</a></p><p><a href="https://downloads.apache.org/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz">3.7</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载后解压，简单明了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入opt</span> </span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">mkdir -p model/zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">cd model/zookeeper/</span><br><span class="line">curl https://downloads.apache.org/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz -&gt; zookeeper3.7.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tart -zxvf zookeeper3.7.tar.gz</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>zookeeper 文件目录如下：</p><p><strong>第一步</strong>：将 conf/zoo_sample.cfg 修改为 zoo.cfg</p><p><code> mv conf/zoo_sample.cfg conf/zoo.cfg</code></p><p><strong>第二步</strong> 新建数据存储文件</p><p><code> mkdir zkData</code></p><p><strong>第三步</strong> 修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi conf/zoo.cfg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将其中的dataDir=tem/zookeeper 修改</span></span><br><span class="line">dataDir=/opt/zookeeper/apache-zooleeper-3.7.0-bin/zkData</span><br><span class="line"></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p><strong>第四步</strong> 启动 （单机模式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh status</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动客户端</span></span><br><span class="line">bin/zkCli.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 退出客户端</span></span><br><span class="line">quit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件</span></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure><p><strong>第五步</strong>关闭服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java操作图片-ImageIo</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/ImageIo/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/IO/ImageIo/</url>
      
        <content type="html"><![CDATA[<h2 id="java操作图片"><a href="#java操作图片" class="headerlink" title="java操作图片"></a>java操作图片</h2><p>​    本文章主要说明java 进行图片合并、添加文字两个功能，其他功能大同小异，但是因为博主没用过，所以不做过多赘述。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 集成webSocket （二）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>基于stomp版的，啊，有个demo，但是还没实际用过，不想写怎么办，在线等，一点也不急那种。</p><span id="more"></span><p>啊，时隔n久，终于用到这个demo了，现在来补一下，啦啦啦。<br>此次使用的主要是后台推送功能，这样实现起来就比较简单了，前端订阅后，就不需要再次操作。<br>和上一篇有很多相似之处，主要的还是前后端连接，首先上配置类也是最主要的类代码。 </p><h5 id="1-WebStompConfig"><a href="#1-WebStompConfig" class="headerlink" title="1.  WebStompConfig"></a>1.  WebStompConfig</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/7/10/15:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebStompConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private WebSocketHandleInterceptor interceptor;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加一个/chat端点，客户端就可以通过这个端点来进行连接；withSockJS作用是添加SockJS支持</span></span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/chat&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义了两个客户端订阅地址的前缀信息，也就是客户端接收服务端发送消息的前缀信息</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;/api&quot;</span>);</span><br><span class="line">        <span class="comment">//定义了服务端接收地址的前缀，也即客户端给服务端发消息的地址前缀</span></span><br><span class="line">        <span class="comment">// 因不需要前端发送信息，所以不提供接收地址</span></span><br><span class="line"><span class="comment">//        registry.setApplicationDestinationPrefixes(&quot;/ws/jbcc&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端其实这样就算是结束了，是不是很简单。那么接下来，其实还有一点，没错，这里只是配置了链接，没有推送，我们的目的是推送呀推送。<br>好的，那么来推送代码，推送简直简单的可怕。</p><h5 id="2-推送代码"><a href="#2-推送代码" class="headerlink" title="2.推送代码"></a>2.推送代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private SimpMessagingTemplate simpMessagingTemplate; //引入消息发送类</span><br><span class="line"> simpMessagingTemplate.convertAndSend(&quot;/chain/info&quot;,&quot;test&quot;); // 发送消息到订阅该链接的客户端</span><br></pre></td></tr></table></figure><p>简单吧，没错，因为博主只用了推送功能，所以，就是这么简单。其实，就算使用客户端发送消息功能，后端其实也是这样写。</p><h4 id="前端交互"><a href="#前端交互" class="headerlink" title="前端交互"></a>前端交互</h4><h5 id="js-代码"><a href="#js-代码" class="headerlink" title="js 代码"></a>js 代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/stomp.js/2.3.3/stomp.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()  &#123;</span><br><span class="line">var socket;</span><br><span class="line">      </span><br><span class="line">            console.log(&quot;SockJS&quot;);</span><br><span class="line">            //socket = new SockJS(&quot;http://192.168.200.31:80/cloud/ws/jbcc&quot;);</span><br><span class="line">socket = new SockJS(&quot;http://127.0.0.1:8080/cloud/ws/jbcc&quot;);</span><br><span class="line">        var client = Stomp.over(socket);</span><br><span class="line">        client.connect(&#123;&#125;,function (succ) &#123;</span><br><span class="line">            console.log(&#x27;client connect success:&#x27;, succ);</span><br><span class="line"></span><br><span class="line">            client.subscribe(&quot;/blocks/info&quot;, function (res) &#123;</span><br><span class="line">                console.log(&#x27;收到消息---/blocks/info：&#x27;,res);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, function (error) &#123;</span><br><span class="line">            console.log(&#x27;client connect error:&#x27;, error);</span><br><span class="line">        &#125;);</span><br><span class="line">        sendMessage = function (destination, headers, body) &#123;</span><br><span class="line">            client.send(destination, headers, body)</span><br><span class="line">        &#125;;</span><br><span class="line">        disConnect = function () &#123;</span><br><span class="line">            client.disconnect();</span><br><span class="line">            console.log(&#x27;client connect break&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> webSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql读写分离 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E4%B8%80/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<pre><code>为了能让数据库更有效快速的进行存储查询工作，因此需要使用到读写分离。笔者是为了能使用springboot + mysql + mybaits 进行读写分离，因此专门进行学（挖）习（坑）</code></pre><span id="more"></span><pre><code>首先读写分离需要用到mysql的主从复制，读写分离也是基于mysql的主从复制展开的。所以本篇主要讲mysql怎么进行主从复制的搭建。一般都是废话写在前，那么我的废话就写在后吧，接下来就开始主从库的搭建。一、环境准备  正常来说，应该准备两个虚拟机，然后对其中一台虚拟机进行安装mysql8，并添加slave用户以及修改加密规则等操作，然后复制虚拟机进行ip，mysqlserverid 修改。这样两个准备环境就搭建完成了。但是，咳咳，博主没走正常路，用的是docker。咳，自己给自己作。那么就按照docker的步骤来记录吧。  1.1 拉取镜像    ``` docker pull centos ```    简单易操作，这里就不多赘述了。嗯，下面就是开始填坑了。  1.2 万恶的镜像    启动镜像    ``` docker run centos ```    拉取的镜像，是最小化版本的，啥都木得，唉，什么都要安装，最重要的是不能用ip addr     ``` yum -y install initscripts ```  1.3 安装mysql    因为是拉取的全新的镜像，启动起来的容器也就是一个啥也没有的centos系统，所以一切要重头来，所以，要安装mysql。    ``` yum -y mysql ```</code></pre>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dubbo 学习日记</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/dubbo/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/dubbo/</url>
      
        <content type="html"><![CDATA[<p>dubbo 直接使用scoket通信，传输效率高，并可以统计系统之间的调用干洗、调用次数。缺点是无法跨语音，只能是java。<br>  <span id="more"></span><br>  dubbo 是阿里巴巴开源的分布式框架。<br>  <img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsdubbo-relation.jpg" alt="依赖关系"></p><pre><code>简单来说，我们的服务端启动后，第一步去注册中心进行注册，第二部客户端去注册中心查找，第三步注册中心返回符合要求的地址，第四步客户端进行调用就进行请求调用。</code></pre><p>  注册中心：官方推荐使用<a href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E5%88%86%E5%B8%83%E5%BC%8F/Zookeeper%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/" title="Zookeeper安装及启动">Zookeeper安装及启动</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 踩坑记 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/docker/docker%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/docker/docker%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>  直奔主题吧，介绍文会新建一个，这里直接就开始安装使用吧<br>  <span id="more"></span></p><h4 id="CentOS-7-安装docker"><a href="#CentOS-7-安装docker" class="headerlink" title="CentOS 7 安装docker"></a>CentOS 7 安装docker</h4><p>  CentOS 可以直接使用命令行安装：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker</span><br></pre></td></tr></table></figure></p><h4 id="测试Docker版本"><a href="#测试Docker版本" class="headerlink" title="测试Docker版本"></a>测试Docker版本</h4><p>  1.运行 <code>docker --version</code> 可以查看docker版本<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 1.13.1, build b2f74b2/1.13.1</span><br></pre></td></tr></table></figure><br>  2.运行 <code>docker info</code> 查看docker安装的更多详细信息</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Containers: 7</span><br><span class="line">Running: 0</span><br><span class="line">Paused: 0</span><br><span class="line">Stopped: 7</span><br><span class="line">Images: 3</span><br><span class="line">Server Version: 1.13.1</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line">Backing Filesystem: xfs</span><br><span class="line">Supports d_type: true</span><br><span class="line">Native Overlay Diff: true</span><br><span class="line">Logging Driver: journald</span><br><span class="line">Cgroup Driver: systemd</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h4 id="测试Docker安装"><a href="#测试Docker安装" class="headerlink" title="测试Docker安装"></a>测试Docker安装</h4><ol><li><p>通过运行简单的Docker镜像hello-world来测试安装是否有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>列出hello-world 下载到虚拟机的镜像</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><ol start="3"><li>列出 hello-world 在显示其消息后退出的容器，如果它仍在运行，将不需要 –all选项；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls --all</span><br><span class="line"></span><br><span class="line">CONTAINER ID     IMAGE           COMMAND      CREATED            STATUS</span><br><span class="line">54f4984ed6a8     hello-world     &quot;/hello&quot;     20 seconds ago     Exited (0) 19 seconds ago</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 踩坑记 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/api/Swagger/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/api/Swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Swagger"><a href="#什么是Swagger" class="headerlink" title="什么是Swagger"></a>什么是Swagger</h1><p>Swagger是当前比较流行的Open Api 生成工具</p><blockquote><p>SwaggerHub is a collaborative platform for defining your APIs using the <a href="https://swagger.io/specification/">OpenAPI Specification</a>, and managing them throughout their lifecycle. It integrates the core Swagger tools (UI, Editor, Codegen, and Validator) into a single platform to help you coordinate the entire workflow of an API’s lifecycle.</p><hr><p>SwaggerHub是一个协作平台，用于使用<a href="https://swagger.io/specification/">OpenAPI规范</a>定义您的API ，并在其整个生命周期内对其进行管理。它将核心Swagger工具（UI，编辑器，Codegen和Validator）集成到单个平台中，以帮助您协调API生命周期的整个工作流程</p></blockquote><ul><li>文档地址： <a href="https://support.smartbear.com/swaggerhub/getting-started/introductory-topics/">https://support.smartbear.com/swaggerhub/getting-started/introductory-topics/</a></li></ul><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Swaggerhub分为两种生成Api的方式：</p><ul><li>远程生成</li><li>本地生成</li></ul><h2 id="远程生成"><a href="#远程生成" class="headerlink" title="远程生成"></a>远程生成</h2><p>远程生成使用的是订阅交付模式，所以需要去SwaggerBhub进行注册登录</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>点击下方地址进行注册登录：</p><blockquote><p><a href="https://app.swaggerhub.com/signup">https</a> : <a href="https://app.swaggerhub.com/signup">//app.swaggerhub.com/signup</a></p></blockquote><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><ul><li>设计优先</li><li>代码优先</li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="集成到项目"><a href="#集成到项目" class="headerlink" title="集成到项目"></a><strong>集成到项目</strong></h3><p>使用swagger需要使用<strong>springfox</strong>。嗯，一会研究下springfox</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="swagger-配置类"><a href="#swagger-配置类" class="headerlink" title="swagger 配置类"></a>swagger 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就已经可以用了，默认是扫描全部，所以springboot自带的/error也有被扫描，居然看下方启动</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>直接启动项目就可，启动后输入地址 ip:port/swagger-ui.html。这是固定的，swagger-ui.html在引入swagger-ui的包内。</p><p><img src="https://cdn.jsdelivr.net/gh/exceedyc/images/imgsimage-20200930161447109.png" alt="image-20200930161447109"></p><p>启动后可以看到swaggerui分为了四个部分：</p><ul><li>API信息</li><li>接口信息</li><li>模块</li><li>组</li></ul><p>接下来就是分析一波源码了</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式study（一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fstudy%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fstudy%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p> 人丑就要多读书，技术差就得多学习，这不，我就是又丑技术又差的，那么没办法，学习呗。先从《head first设计模式》开始。<br> <span id="more"></span></p><ul><li>设计原则<ul><li>1.找到应用中可能需要变化之处，把它们独立出来，不要和不需要变化的代码混在一起。</li><li>2.面向接口编程，而不是面向实现编程。</li><li>3.多用组合，少用继承。</li><li>4.为了交互对象之间的松耦合设计而努力</li><li>5.类对扩展开放，对修改关闭</li></ul></li></ul><hr><ul><li>设计模式<ul><li>策略模式：策略模式定义了算法族，分别封装起来，让它们之间可以互相替换。此模式让算法的变化独立于使用算法的客户。</li><li>观察者模式：定义了对象之间的一对多依赖，这样依赖，当一个对象改变状态时，它的所有依赖者都会收到通知。<ul><li>jvm的观察者模式：可观察者继承Observable，观察者实现Observer。</li></ul></li><li>装饰者模式：动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> head first </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 集成webSocket （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%20%E9%9B%86%E6%88%90webSocket%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>   springboot 集成webSocket是很方便简单的，当然对于博主这种小萌新还是需要多努力的，经过不断的度娘终于完成了可用的demo，虽然都是搬的，但是还是要做做笔记。<br>    <span id="more"></span><br>   好的，为了能加深印象，简单说一下webSocket的用处，webSocket是单个TCP链接提供全双工（双向通信）通信的计算机通信协议。webSocket允许服务端主动向客户端推送数据，在浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的链接，并进行双向数据传输。</p><h4 id="接下来就是代码时刻："><a href="#接下来就是代码时刻：" class="headerlink" title="接下来就是代码时刻："></a>接下来就是代码时刻：</h4><p>  首先springboot集成websocket在pom文件内直接加入以下代码<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h5 id="1-先从配置开始"><a href="#1-先从配置开始" class="headerlink" title="1. 先从配置开始"></a>1. 先从配置开始</h5><p>主要配置文件，配置了链接webSocket的访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.tdchain.cloud.interceptor.SocketInterceptor;</span><br><span class="line"><span class="keyword">import</span> cn.tdchain.cloud.service.websocket.MyWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment">* <span class="doctag">@time</span> 2019/3/12/11:33</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketInterceptor handshake; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyWebSocketHandler handler; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实现 WebSocketConfigurer 接口，重写 registerWebSocketHandlers 方法，这是一个核心实现方法，配置 websocket 入口，允许访问的域、注册 Handler、SockJs 支持和拦截器。</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * registry.addHandler()注册和路由的功能，当客户端发起 websocket 连接，把 /path 交给对应的 handler 处理，而不实现具体的业务逻辑，可以理解为收集和任务分发中心。</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * addInterceptors，顾名思义就是为 handler 添加拦截器，可以在调用 handler 前后加入我们自己的逻辑代码。</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * setAllowedOrigins(String[] domains),允许指定的域名或 IP (含端口号)建立长连接，如果只允许自家域名访问，这里轻松设置。如果不限时使用”*”号，如果指定了域名，则必须要以 http 或 https 开头。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//部分 支持websocket 的访问链接,允许跨域</span></span><br><span class="line">        registry.addHandler(handler, <span class="string">&quot;/echo&quot;</span>).addInterceptors(handshake).setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//部分 不支持websocket的访问链接,允许跨域</span></span><br><span class="line">        registry.addHandler(handler, <span class="string">&quot;/sockjs/echo&quot;</span>).addInterceptors(handshake).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-实现HandshakeInterceptor"><a href="#2-实现HandshakeInterceptor" class="headerlink" title="2. 实现HandshakeInterceptor"></a>2. 实现HandshakeInterceptor</h5><p>拦截器，在客户端与服务端握手前后进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.tdchain.cloud.constant.WebSocketUrlType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/3/12/10:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (serverHttpRequest <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            HttpServletRequest request = ((ServletServerHttpRequest)serverHttpRequest).getServletRequest();</span><br><span class="line">            String user = (String) request.getAttribute(WebSocketUrlType.WEBSOCKET_USERNAME);</span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                user = (String) request.getSession().getAttribute(WebSocketUrlType.WEBSOCKET_USERNAME);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------socket&quot;</span> +user);</span><br><span class="line">            map.put(WebSocketUrlType.WEBSOCKET_USERNAME,user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="3、实现WebSocketHandler-该功能主要用于消息分发"><a href="#3、实现WebSocketHandler-该功能主要用于消息分发" class="headerlink" title="3、实现WebSocketHandler,该功能主要用于消息分发"></a>3、实现WebSocketHandler,该功能主要用于消息分发</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">import cn.tdchain.cloud.constant.WebSocketUrlType;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.socket.*;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Mr.Y</span><br><span class="line"> * @time 2019/3/12/9:51</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class MyWebSocketHandler implements WebSocketHandler &#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(MyWebSocketHandler.class);</span><br><span class="line">    private final static List&lt;WebSocketSession&gt; webSocketSessions = Collections.synchronizedList(new ArrayList&lt;WebSocketSession&gt;());</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionEstablished(WebSocketSession webSocketSession) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;webSocket 链接成功&quot;);</span><br><span class="line">        webSocketSessions.add(webSocketSession);</span><br><span class="line"></span><br><span class="line">        String userName = (String) webSocketSession.getAttributes().get(WebSocketUrlType.WEBSOCKET_USERNAME);</span><br><span class="line">        System.out.println(&quot;--------user:&quot; + userName);</span><br><span class="line">        if (userName != null) &#123;</span><br><span class="line">            JSONObject obj = new JSONObject();</span><br><span class="line">            // 统计当前链接人数</span><br><span class="line">            obj.put(&quot;count&quot;, webSocketSessions.size());</span><br><span class="line">            users(obj);</span><br><span class="line">            webSocketSession.sendMessage(new TextMessage(obj.toJSONString()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;处理消息发送&quot;);</span><br><span class="line">        JSONObject msg = JSON.parseObject(webSocketMessage.getPayload().toString());</span><br><span class="line">        JSONObject obj = new JSONObject();</span><br><span class="line">        if (msg.getInteger(&quot;type&quot;) == 1) &#123;</span><br><span class="line">            // 发送给所有人</span><br><span class="line">            obj.put(&quot;msg&quot;, msg.getString(&quot;msg&quot;));</span><br><span class="line">            sendMessageToUser(new TextMessage(obj.toJSONString()));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String to = msg.getString(&quot;to&quot;);</span><br><span class="line">            obj.put(&quot;msg&quot;, msg.getString(&quot;msg&quot;));</span><br><span class="line">            sendMessageToUser(to, new TextMessage(obj.toJSONString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleTransportError(WebSocketSession webSocketSession, Throwable throwable) throws Exception &#123;</span><br><span class="line">        if (webSocketSession.isOpen()) &#123;</span><br><span class="line">            webSocketSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(&quot;链接出错，断开链接。。。&quot;);</span><br><span class="line">        webSocketSessions.remove(webSocketSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionClosed(WebSocketSession webSocketSession, CloseStatus closeStatus) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;链接断开&quot;);</span><br><span class="line">        webSocketSessions.remove(webSocketSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supportsPartialMessages() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给所有用户发消息</span><br><span class="line">     *</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public static void sendMessageToUser(TextMessage message) &#123;</span><br><span class="line">        webSocketSessions.forEach(v -&gt; &#123;</span><br><span class="line">            if (v.isOpen()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    v.sendMessage(message);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送给指定用户</span><br><span class="line">     *</span><br><span class="line">     * @param to</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public static void sendMessageToUser(String to, TextMessage message) &#123;</span><br><span class="line">        webSocketSessions.forEach(v -&gt; &#123;</span><br><span class="line">            if (v.getAttributes().get(WebSocketUrlType.WEBSOCKET_USERNAME).equals(to)) &#123;</span><br><span class="line">                if (v.isOpen()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        v.sendMessage(message);</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将所有用户发送到前端</span><br><span class="line">     *</span><br><span class="line">     * @param obj</span><br><span class="line">     */</span><br><span class="line">    private void users(JSONObject obj) &#123;</span><br><span class="line">        List&lt;String&gt; userNames = new ArrayList&lt;&gt;();</span><br><span class="line">        webSocketSessions.forEach(v -&gt; &#123;</span><br><span class="line">            userNames.add((String) v.getAttributes().get(WebSocketUrlType.WEBSOCKET_USERNAME));</span><br><span class="line">        &#125;);</span><br><span class="line">        obj.put(&quot;users&quot;, userNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List&lt;WebSocketSession&gt; getWebSocketSessions() &#123;</span><br><span class="line">        return webSocketSessions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>前端js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> websocket;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;WebSocket&quot;</span>);</span><br><span class="line">          websocket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:8080/cloud/echo&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;MozWebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;MozWebSocket&quot;</span>);</span><br><span class="line">          websocket = <span class="keyword">new</span> MozWebSocket(<span class="string">&quot;ws://cloud/echo&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;SockJS&quot;</span>);</span><br><span class="line">          websocket = <span class="keyword">new</span> SockJS(<span class="string">&quot;http://127.0.0.1:8080/cloud/sockjs/echo&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;链接服务器成功!&quot;</span>, evnt.data);</span><br><span class="line">      &#125;;</span><br><span class="line">      websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;收到消息:&#x27;</span>, evnt.data);</span><br><span class="line">          <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(evnt.data);</span><br><span class="line">          <span class="keyword">if</span> (json.hasOwnProperty(<span class="string">&#x27;users&#x27;</span>)) &#123;</span><br><span class="line">              <span class="keyword">var</span> users = json.users;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">                  $(<span class="string">&quot;#inputGroupSelect01&quot;</span>).append(<span class="string">&#x27;&lt;option value=&quot;&#x27;</span> + users[i] + <span class="string">&#x27;&quot;&gt;&#x27;</span> + users[i] + <span class="string">&#x27;&lt;/option&gt;&#x27;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//打印消息</span></span><br><span class="line">              toast(json, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      websocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">      &#125;;</span><br><span class="line">      websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;与服务器断开了链接!&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toast</span>(<span class="params">text, icon</span>) </span>&#123;</span><br><span class="line">      $.toast(&#123;</span><br><span class="line">          <span class="attr">text</span>: text,</span><br><span class="line">          <span class="attr">heading</span>: <span class="string">&#x27;新消息&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: icon,</span><br><span class="line">          <span class="attr">showHideTransition</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">          <span class="attr">allowToastClose</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">hideAfter</span>: <span class="number">3000</span>,</span><br><span class="line">          <span class="attr">stack</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">position</span>: <span class="string">&#x27;top-right&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="attr">bgColor</span>: <span class="string">&#x27;#444444&#x27;</span>,</span><br><span class="line">          <span class="attr">textColor</span>: <span class="string">&#x27;#eeeeee&#x27;</span>,</span><br><span class="line">          <span class="attr">textAlign</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">loaderBg</span>: <span class="string">&#x27;#006eff&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> webSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/poi/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/poi/</url>
      
        <content type="html"><![CDATA[<h2 id="操作excel"><a href="#操作excel" class="headerlink" title="操作excel"></a>操作excel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工作簿</span></span><br><span class="line">       HSSFWorkbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">       <span class="comment">// 创建表</span></span><br><span class="line">       Sheet sheet = hssfWorkbook.createSheet();</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>合并单元格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CellRangeAddress cellAddresses = <span class="keyword">new</span> CellRangeAddress(startRow,endRow,startCell,endCell);</span><br><span class="line">sheet.addMergedRegion(cellAddresses);</span><br></pre></td></tr></table></figure><ul><li>设置默认列宽</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sheet.setdefaultColumnWidt(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><ul><li><p>设置样式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 设置样式</span></span><br><span class="line">        HSSFCellStyle style = hssfWorkbook.createCellStyle();</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 左右居中</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 上下居中</span></span><br><span class="line">cell.setCellStyle(style);</span><br></pre></td></tr></table></figure></li><li><p>读取图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片输出流</span></span><br><span class="line">ByteImageOutStream byteOut = <span class="keyword">new</span> ByteImageOutStream();</span><br><span class="line"><span class="comment">// 读取图片</span></span><br><span class="line">BufferedImage image = ImageIo.read(<span class="keyword">new</span> File(path));</span><br><span class="line"><span class="comment">// 将图片写入输出流</span></span><br><span class="line">ImageIo.write(image,<span class="string">&quot;png&quot;</span>,byteOut);</span><br></pre></td></tr></table></figure></li><li><p>插入图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 日期转化器 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="骚气的前言"><a href="#骚气的前言" class="headerlink" title="骚气的前言"></a>骚气的前言</h4><p>SpringBoot @RequestBody 在写接口的时候用这个注解接收对象，哇塞，简直好用的一批，@RequestBody 转换对象时使用的是<span id="more"></span>Jackson。</p><p>jackson千好万好，但是居然不支持”yyyy-MM-dd HH:mm:ss”这个格式，大佬，您都支持”yyyy-MM-dd HH:mm:ss.SSSZ”这个格式了，为嘛不支持一下CN常用的格式嘞。咳咳，吐槽的话不多说，毕竟人家是大佬。那么接下来就是为RequestBody做一个自定义的日期转换器了。</p><p>现在博主使用的方式是进行局部转换，还没找到不加注解就转换的好方法，找到后后期会更新。好了废话有点多，接下来就上代码：</p><p>顺带一提，使用@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”, timezone=”GMT+8”)这个方式也不可行，只要是用@RequestBody，好像就和这个格式绝缘一样，当然也有可能是博主使用有问题，有问题的话欢迎指出。</p><h4 id="正儿八经的局部转换方法"><a href="#正儿八经的局部转换方法" class="headerlink" title="正儿八经的局部转换方法"></a>正儿八经的局部转换方法</h4><p> 博主目前使用的是@JsonDeserialize和@JsonSerialize。首先需要一个类来继承JsonDeserializer,然后重写里面的deserialize方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/3/7/16:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note</span> 在接口接受对象使用<span class="doctag">@RequestBody</span>时,在对象中Date类型的变量上添加注解<span class="doctag">@JsonDeserialize</span>(using = DateJsonDeserializer.class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat simpleDateFormat = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        String time = jsonParser.getText();</span><br><span class="line">        time = time.trim();</span><br><span class="line">        <span class="keyword">if</span> (time.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// 可能是时间戳</span></span><br><span class="line">            Long _time = Long.valueOf(String.valueOf(jsonParser.getText()));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(_time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是在对象中添加注解，方式很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonDeserialize(using = DateJsonDeserializer.class)</span></span><br><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好，至此大工当然没有告成。</p><h4 id="差点忘记的全局配置方法"><a href="#差点忘记的全局配置方法" class="headerlink" title="差点忘记的全局配置方法"></a>差点忘记的全局配置方法</h4><p>上述的代码只是对@RequestBody进行了处理，让Date的转换可以按照我们自定义的方式进行。接下来就是让不使用RequestBody的接口接受参数时进行时间的转换了。</p><p>  全局配置的处理方式是实现Converter接口，重写convert方法，然后进行全局配置。代码在这：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/3/6/16:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String time = (String) o;</span><br><span class="line">        time = time.trim();</span><br><span class="line">        <span class="keyword">if</span> (time.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// 可能是时间戳</span></span><br><span class="line">            Long _time = Long.valueOf(String.valueOf(o));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(_time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后进行全局配置，全局配置需要继承WebMvcConfigurationSupport类，然后重写addFormatters方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcCloudConfigure</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> DateConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好的，到这里才是大功告成，是不是很简(炸)单(裂)。哎，一把心酸类，踩了两天的坑，终于有点样子了。继续学习，加油！</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> DateConverter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux sendEmail 踩坑记 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%20sendEmail%20%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/linux%20sendEmail%20%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>linux 可以直接发送email，需要借助sendEmail工具，废话少说直接上代码</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 下载安装包</span><br><span class="line">wget http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar zxf sendEmail-v1.56.tar.gz</span><br><span class="line"></span><br><span class="line"># 进入解压目录</span><br><span class="line">cd /usr/src/sendEmail-v1.56/</span><br><span class="line"></span><br><span class="line">#复制程序到指定目录</span><br><span class="line">cp -a sendEmail /usr/local/bin/</span><br><span class="line"></span><br><span class="line">#给执行权限</span><br><span class="line">chmod +x /usr/local/bin/sendEmail</span><br><span class="line"></span><br><span class="line">#安装组件</span><br><span class="line">yum install perl-Net-SSLeay perl-IO-Socket-SSL -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sendEmail-参数"><a href="#sendEmail-参数" class="headerlink" title="sendEmail 参数"></a>sendEmail 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sendEmail -h</span><br><span class="line"></span><br><span class="line">-f 表示发送者的邮箱</span><br><span class="line">-t 表示接收者的邮箱</span><br><span class="line">-s 表示SMTP服务器的域名或者ip</span><br><span class="line">-u 表示邮件的主题</span><br><span class="line">-xu 表示SMTP验证的用户名</span><br><span class="line">-xp 表示SMTP验证的密码(注意,这个密码貌似有限制,例如我用d!5neyland就不能被正确识别)</span><br><span class="line">-m 表示邮件的内容</span><br><span class="line">-cc 表示抄送</span><br><span class="line">-bcc 表示暗抄送</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="发送邮件测试"><a href="#发送邮件测试" class="headerlink" title="发送邮件测试"></a>发送邮件测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#发送邮件</span><br><span class="line">/usr/local/bin/sendEmail -f hhh@163.com -t 123456789@qq.com -s smtp.163.com -u &quot;测试&quot;-xu hhh@163.com -xp @453163.com -m &quot;test-1234567890&quot;</span><br></pre></td></tr></table></figure><p> 发送邮箱测试时会报如下错误，原因是perl版本不兼容</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    *******************************************************************</span><br><span class="line"> Using the default of SSL_verify_mode of SSL_VERIFY_NONE for client</span><br><span class="line"> is deprecated! Please set SSL_verify_mode to SSL_VERIFY_PEER</span><br><span class="line"> possibly with SSL_ca_file|SSL_ca_path for verification.</span><br><span class="line"> If you really don&#x27;t want to verify the certificate and keep the</span><br><span class="line"> connection open to Man-In-The-Middle attacks please set</span><br><span class="line"> SSL_verify_mode explicitly to SSL_VERIFY_NONE in your application.</span><br><span class="line">*******************************************************************</span><br><span class="line">  at /usr/local/bin/sendEmail line 1906.</span><br><span class="line">invalid SSL_version specified at /usr/share/perl5/vendor_perl/IO/Socket/SSL.pm line 444.</span><br></pre></td></tr></table></figure><p> 解决方案，sendEmail 增加两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o tls=no    // sendEmail -h 查看帮助，解释是 -o tls=&lt;auto|yes|no&gt;         -o fqdn=FQDN  即不验证 ssl</span><br></pre></td></tr></table></figure><p>完整的正确命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sendEmail -f hhh@163.com -t 123456789@qq.com -s smtp.163.com -u &quot;测试&quot;-xu hhh@163.com -xp @453163.com -m &quot;正文&quot; -o tls = no</span><br></pre></td></tr></table></figure><p>上述问题还有解决perl版本冲突的方案，博主还没测试，等测试可用后再进行更新。<br>执行发送命令时需要注意 -xp 的密码并不是发送邮箱的本身密码，以163邮箱为例，需要开启smtp等权限，然后生成授权码，该密码为生成的授权码。设置授权码详情整理后更新</p><hr><p>参考网址：<a href="http://www.mamicode.com/info-detail-2404622.html">http://www.mamicode.com/info-detail-2404622.html</a><br>参考网址：<a href="https://blog.csdn.net/ithomer/article/details/83514232">https://blog.csdn.net/ithomer/article/details/83514232</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sendEmail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 进阶 -jvm</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/java-%E8%BF%9B%E9%98%B6-jvm/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/java-%E8%BF%9B%E9%98%B6-jvm/</url>
      
        <content type="html"><![CDATA[<p>生成内存溢出快照：在runConfigurations中的VM arguments添加：<code>-XX:+HeapDumpOnOutOfMemoryError </code>。 </p><span id="more"></span><p>-Xss规定了每个线程堆栈的大小。一般情况下256K是足够了。影响了此进程中并发线程数大小。</p><p>-Xms初始的Heap的大小。</p><p>-Xmx最大Heap的大小。</p><p>在很多情况下，-Xms和-Xmx设置成一样的。这么设置，是因为当Heap不够用时，会发生内存抖动，影响程序运行稳定性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql 踩坑记 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mysql%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/sql/mysql/mysql%E8%B8%A9%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>今天某贱贱的同事，给我出了个题,关于sql查询的题，那么直接开始吧。</p><span id="more"></span><ul><li>题目：</li></ul><table><thead><tr><th>id</th><th>userid</th><th>start</th><th>end</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>18</td><td>28</td></tr><tr><td>2</td><td>2</td><td>34</td><td>44</td></tr><tr><td>3</td><td>2</td><td>24</td><td>44</td></tr><tr><td>获得从开始时间(start)到结束时间(end)的总时长,重复时间按一个时间算。</td><td></td><td></td><td></td></tr></tbody></table><ul><li>代码解答:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE test() BEGIN</span><br><span class="line">DECLARE</span><br><span class="line">oneStart INT;</span><br><span class="line">DECLARE</span><br><span class="line">oneEnd INT;</span><br><span class="line">DECLARE</span><br><span class="line">twoStart INT;</span><br><span class="line">DECLARE</span><br><span class="line">twoEnd INT;</span><br><span class="line">DECLARE</span><br><span class="line">count INT default 0;</span><br><span class="line">-- DECLARE</span><br><span class="line">-- start_ INT;</span><br><span class="line">-- DECLARE</span><br><span class="line">-- end_ INT;</span><br><span class="line">declare done int default false;</span><br><span class="line">DECLARE</span><br><span class="line">my_test CURSOR FOR ( SELECT START, END FROM ruizhi WHERE userid = 2 ORDER BY START ASC );</span><br><span class="line">declare continue HANDLER for not found set done = true;</span><br><span class="line">OPEN my_test;</span><br><span class="line">FETCH  my_test INTO oneStart,oneEnd;</span><br><span class="line">read_loop:loop</span><br><span class="line">FETCH  my_test INTO twoStart,twoEnd;</span><br><span class="line">if done then</span><br><span class="line">leave read_loop;    # 跳出游标循环</span><br><span class="line"> end if;</span><br><span class="line">SELECT twoStart,twoEnd;</span><br><span class="line">IF</span><br><span class="line">twoStart &lt; oneStart THEN</span><br><span class="line"></span><br><span class="line">SET oneStart = twoStart; </span><br><span class="line">END IF; -- 如果第一行的结束小于第二行的开始就记录第一行的结果。并更新start为第二行。</span><br><span class="line">IF</span><br><span class="line">oneEnd &lt; twoStart THEN </span><br><span class="line">SET count = count + ( oneEnd - oneStart ); </span><br><span class="line">SET oneStart = twoStart; </span><br><span class="line">SET oneEnd = twoEnd;</span><br><span class="line">ELSEIF twoEnd &gt; oneEnd THEN-- 第二行开始时间包含在第一行，那么对比结束时间</span><br><span class="line">SET oneEnd = twoEnd; </span><br><span class="line">END IF ;</span><br><span class="line">-- SELECT start_,end_,count;</span><br><span class="line"></span><br><span class="line">end loop;</span><br><span class="line">SET count = count + ( oneEnd - oneStart ); </span><br><span class="line">CLOSE my_test ;</span><br><span class="line">SELECT count;</span><br><span class="line">END // </span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call test();</span><br><span class="line">oEnd &gt; oneEnd THEN-- 第二行开始时间包含在第一行，那么对比结束时间</span><br><span class="line">SET oneEnd = twoEnd; </span><br><span class="line">END IF ;</span><br><span class="line">-- SELECT start_,end_,count;</span><br><span class="line"></span><br><span class="line">end loop;</span><br><span class="line">SET count = count + ( oneEnd - oneStart ); </span><br><span class="line">CLOSE my_test ;</span><br><span class="line">SELECT count;</span><br><span class="line">END // </span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call test();</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>代码解析<ul><li>声明：declare<ul><li>declare data data_type。声明变量，declare使用时需要注意放在BEGIN …END 之间，并且是所有其他语句之前。</li></ul></li></ul></li><li>浮标：cursor<ul><li>创建浮标：<ul><li>declare cur cursor for select * from test;</li></ul></li><li>打开浮标<ul><li>open cur；</li></ul></li><li>获取浮标当前位置的值并赋值给变量，浮标位置前进一位<ul><li>fetch cur into data；</li></ul></li><li>开启浮标循环<ul><li>read_loop:loop;</li></ul></li><li>退出浮标循环<ul><li>leave read_loop;</li></ul></li><li>浮标循环实例  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> declare done int default false; --设置浮标控制变量</span><br><span class="line"> DECLARE</span><br><span class="line">     my_test CURSOR FOR ( SELECT START, END FROM ruizhi WHERE userid = 2 ORDER BY START ASC );--创建浮标</span><br><span class="line"> declare continue HANDLER for not found set done = true;--浮标查询结束后返回。</span><br><span class="line"> open my_test; --打开浮标</span><br><span class="line"> read_loop:loop;--开启浮标循环</span><br><span class="line">     fetch my_test into data;--获取浮标当前位置内容并前进一。</span><br><span class="line">     if done then</span><br><span class="line">         leave read_loop;--退出loop循环</span><br><span class="line">    end if；</span><br><span class="line">end loop；--使用loop，必须要关闭。</span><br><span class="line">close my_test;--关闭浮标</span><br></pre></td></tr></table></figure></li></ul></li><li>while 循环  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while boolean do</span><br><span class="line">    业务</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure></li><li>if 语句  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if <span class="type">boolean</span> <span class="keyword">then</span> </span><br><span class="line">业务，这里要注意写法和java相同，每行都要以&quot;;&quot;结尾</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">业务 同上</span><br><span class="line"><span class="keyword">end</span> if；</span><br></pre></td></tr></table></figure></li><li>存储过程<ul><li>CREATE PROCEDURE test()  begin end;</li><li>开始要进行结束符转化 delimiter //  – 设置结尾符为”//“</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 从0学起 （一）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/nginx/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/linux/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><h3 id="nginx-是什么"><a href="#nginx-是什么" class="headerlink" title="nginx 是什么"></a>nginx 是什么</h3><ul><li>nginx是一个高性能的Http和反向代理的服务器，具有占内存小、并发能力强的特点</li><li>nginx是专为性能优化而开发的，非常注重效率，能经受高负载的考验。有报告生命能支持高达50000个并发连接数。</li></ul></blockquote><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><ul><li><p>正向代理</p><blockquote><p>​        如果把互联网比做一个巨大的资源库，而局域网内的客户端想要访问Internet，就需要通过代理服务器进行访问，这个过程就是正向代理。</p></blockquote><p>​        简单来说，就是我们的客户端（浏览器）配置代理服务器，通过代理服务器访问Internet就是正向代理。</p></li><li><p>反向代理</p></li></ul><blockquote><p>​        反向代理，客户端对代理是无感知的，客户端不知道服务器是否进行了代理。        客户端进行反向代理服务器，反向代理服务器选择目标服务器，获取到数据后，将数据返回给客户端，此时目标服务器和代理服务器暴露出来的就是代理服务器这一个服务器，隐藏了目标服务器的真实Ip地址。</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>​        单个服务器解决不了，就增加服务器数量，然后通过代理服务器反向代理多个目标服务器。</p><p>​        然后代理服务器将请求多个请求分发到目标服务器，这个过程也就是负载均衡。</p></blockquote><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><blockquote><p>​    为了加快网站的解析速度，把动态页面和静态页面由补同的服务器来解析，加快解析速度，降低单个服务器的压力</p></blockquote><h2 id="高可用的集群"><a href="#高可用的集群" class="headerlink" title="高可用的集群"></a>高可用的集群</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><p>展示文件目录 </p><p>autoindex on;</p><p>autoindex_exact_size off;</p><p>autoindex_localtime on;</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 踩坑记 之 日期转化器 （二）</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/Java/%E8%BF%9B%E9%98%B6/Spring/SpringBoot/SpringBoot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%20%E4%B9%8B%20%E6%97%A5%E6%9C%9F%E8%BD%AC%E5%8C%96%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="啊，依旧骚气的前言"><a href="#啊，依旧骚气的前言" class="headerlink" title="啊，依旧骚气的前言"></a>啊，依旧骚气的前言</h4><p> 咳咳，接长达一天间隔的上一篇，终于在我不懈的努力下，可以在使用RequestBody时不加注解的办法，被公司大佬完成了，嗯，完美。<br> <span id="more"></span></p><h4 id="全局配置（哎呀，怎么能有这么正经的标题）"><a href="#全局配置（哎呀，怎么能有这么正经的标题）" class="headerlink" title="全局配置（哎呀，怎么能有这么正经的标题）"></a>全局配置（哎呀，怎么能有这么正经的标题）</h4><p>  大部分代码其实和上一篇相同，只不过是在全局配置的时候需要对ObjectMapper进行部分值的修改，大体意思就是修改Jackson的对象映射，听起来是不是很简（懵）单（逼）。懵就对了，我也很懵。<br>  首先需要继承SimpleDateFormat，然后重写里面的方法，代码如下：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDateFormat</span> <span class="keyword">extends</span> <span class="title">SimpleDateFormat</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DateFormat FORMAT_DATE_TIME = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DateFormat FORMAT_DATE = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果都是数字则是long</span></span><br><span class="line">        <span class="keyword">if</span> (source.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Date(Long.parseLong(source));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是yyyy-MM-dd格式</span></span><br><span class="line">        <span class="keyword">if</span> (source.matches(<span class="string">&quot;^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;$&quot;</span>)) &#123;</span><br><span class="line">            Date date = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                date = FORMAT_DATE.parse(source);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> date;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        <span class="keyword">if</span> (source.matches(<span class="string">&quot;^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;$&quot;</span>)) &#123;</span><br><span class="line">            Date date = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                date = FORMAT_DATE_TIME.parse(source);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> date;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuffer <span class="title">format</span><span class="params">(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FORMAT_DATE_TIME.format(date, toAppendTo, fieldPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Date convert = convert(source);</span><br><span class="line">        <span class="keyword">return</span> convert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source, ParsePosition pos)</span> </span>&#123;</span><br><span class="line">        Date convert = convert(source);</span><br><span class="line">        <span class="keyword">return</span> convert;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>   然后在上篇博客提到的继承WebMvcConfigurationSupport的WebMvcCloudConfigure类中，重写extendMessageConverters()方法，就可以了：<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (HttpMessageConverter httpMessageConverter : converters) &#123;</span><br><span class="line">           <span class="keyword">if</span> (httpMessageConverter <span class="keyword">instanceof</span> MappingJackson2HttpMessageConverter) &#123;</span><br><span class="line">               MappingJackson2HttpMessageConverter conver = (MappingJackson2HttpMessageConverter) httpMessageConverter;</span><br><span class="line">               ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">               <span class="comment">// 统一返回数据的输出风格</span></span><br><span class="line">               objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">               objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">               objectMapper.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>));</span><br><span class="line">               objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">               objectMapper.setDateFormat(<span class="keyword">new</span> DefaultDateFormat());</span><br><span class="line">               conver.setObjectMapper(objectMapper);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>   在这里提一下，如果你觉得写两个类很麻烦，那么细心的你有没有发现上一篇的DateConverter类和这篇中的DefaultDateFormat类中有相似的地方呢，没错，这个类了面也写了convert()这个方法，虽然是自己写的，但是没关系，我们实现一下Converter接口，然后convert方法就变成重写啦，之后WebMvcCloudConfigure的addFormatters()方法稍作修改，两个类就可以合二为一，就可以只用这篇中的类啦，是不是有剩了好大的代码量呢。<br>     当然你也可以根据需要，依旧采用上篇的方式。改动如下：<br>    DefaultDateFormat类改动：<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDateFormat</span> <span class="keyword">extends</span> <span class="title">SimpleDateFormat</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>WebMvcCloudConfigure类改动：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addConverter(<span class="keyword">new</span> DefaultDateFormat());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>好的， 历经三天的远征，终于把坑填好了，哎，效率果然低了。没办法慢慢学吧，加油！<br>漫漫长夜，又水完一篇博客，舒服。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> DateConverter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/hexo/hello-world/"/>
      <url>/;categories/%E7%9F%A5%E8%AF%86%E5%BA%93/hexo/hello-world/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的天呢，终于弄好了，纪念一下</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
